;;; psyntax.pp
;;; automatically generated from psyntax.ss
;;; Fri Sep 2 14:55:14 EST 2005
;;; see copyright notice in psyntax.ss

((lambda ()
   (letrec ((noexpand62 '"noexpand")
            (make-syntax-object63 (lambda (expression2516 wrap2515)
                                    (vector
                                      'syntax-object
                                      expression2516
                                      wrap2515)))
            (syntax-object?64 (lambda (x2514)
                                (if (vector? x2514)
                                    (if (= (vector-length x2514) '3)
                                        (eq? (vector-ref x2514 '0)
                                             'syntax-object)
                                        '#f)
                                    '#f)))
            (syntax-object-expression65 (lambda (x2513)
                                          (vector-ref x2513 '1)))
            (syntax-object-wrap66 (lambda (x2512)
                                    (vector-ref x2512 '2)))
            (set-syntax-object-expression!67 (lambda (x2511 update2510)
                                               (vector-set!
                                                 x2511
                                                 '1
                                                 update2510)))
            (set-syntax-object-wrap!68 (lambda (x2509 update2508)
                                         (vector-set!
                                           x2509
                                           '2
                                           update2508)))
            (annotation?132 (lambda (x2507) '#f))
            (top-level-eval-hook133 (lambda (x2506)
                                      (eval (list noexpand62 x2506))))
            (local-eval-hook134 (lambda (x2505)
                                  (eval (list noexpand62 x2505))))
            (define-top-level-value-hook135 (lambda (sym2504 val2503)
                                              (top-level-eval-hook133
                                                (list
                                                  'define
                                                  sym2504
                                                  (list 'quote val2503)))))
            (error-hook136 (lambda (who2502 why2501 what2500)
                             (error who2502 '"~a ~s" why2501 what2500)))
            (put-cte-hook141 (lambda (symbol2499 val2498)
                               ($sc-put-cte symbol2499 val2498 '*top*)))
            (get-global-definition-hook142 (lambda (symbol2497)
                                             (getprop
                                               symbol2497
                                               '*sc-expander*)))
            (put-global-definition-hook143 (lambda (symbol2496 x2495)
                                             (if (not x2495)
                                                 (remprop
                                                   symbol2496
                                                   '*sc-expander*)
                                                 (putprop
                                                   symbol2496
                                                   '*sc-expander*
                                                   x2495))))
            (read-only-binding?144 (lambda (symbol2494) '#f))
            (get-import-binding145 (lambda (symbol2493 token2492)
                                     (getprop symbol2493 token2492)))
            (put-import-binding146 (lambda (symbol2491 token2490 x2489)
                                     (if (not x2489)
                                         (remprop symbol2491 token2490)
                                         (putprop
                                           symbol2491
                                           token2490
                                           x2489))))
            (generate-id147 ((lambda (digits2475)
                               ((lambda (base2477 session-key2476)
                                  (letrec ((make-digit2478 (lambda (x2488)
                                                             (string-ref
                                                               digits2475
                                                               x2488)))
                                           (fmt2479 (lambda (n2482)
                                                      ((letrec ((fmt2483 (lambda (n2485
                                                                                  a2484)
                                                                           (if (< n2485
                                                                                  base2477)
                                                                               (list->string
                                                                                 (cons
                                                                                   (make-digit2478
                                                                                     n2485)
                                                                                   a2484))
                                                                               ((lambda (r2487
                                                                                         rest2486)
                                                                                  (fmt2483
                                                                                    rest2486
                                                                                    (cons
                                                                                      (make-digit2478
                                                                                        r2487)
                                                                                      a2484)))
                                                                                 (modulo
                                                                                   n2485
                                                                                   base2477)
                                                                                 (quotient
                                                                                   n2485
                                                                                   base2477))))))
                                                         fmt2483)
                                                        n2482
                                                        '()))))
                                    ((lambda (n2480)
                                       (lambda (name2481)
                                         (begin
                                           (set! n2480 (+ n2480 '1))
                                           (string->symbol
                                             (string-append
                                               session-key2476
                                               (fmt2479 n2480))))))
                                      '-1)))
                                 (string-length digits2475)
                                 '"_"))
                              '"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&*/:<=>?~_^.+-"))
            (built-lambda?221 (lambda (x2474)
                                (if (pair? x2474)
                                    (eq? (car x2474) 'lambda)
                                    '#f)))
            (build-sequence239 (lambda (ae2471 exps2470)
                                 ((letrec ((loop2472 (lambda (exps2473)
                                                       (if (null?
                                                             (cdr exps2473))
                                                           (car exps2473)
                                                           (if (equal?
                                                                 (car exps2473)
                                                                 '(void))
                                                               (loop2472
                                                                 (cdr exps2473))
                                                               (cons
                                                                 'begin
                                                                 exps2473))))))
                                    loop2472)
                                   exps2470)))
            (build-letrec240 (lambda (ae2469 vars2468 val-exps2467
                                      body-exp2466)
                               (if (null? vars2468)
                                   body-exp2466
                                   (list
                                     'letrec
                                     (map list vars2468 val-exps2467)
                                     body-exp2466))))
            (build-body241 (lambda (ae2465 vars2464 val-exps2463
                                    body-exp2462)
                             (build-letrec240
                               ae2465
                               vars2464
                               val-exps2463
                               body-exp2462)))
            (build-top-module242 (lambda (ae2450 types2449 vars2448
                                          val-exps2447 body-exp2446)
                                   (call-with-values
                                     (lambda ()
                                       ((letrec ((f2454 (lambda (types2456
                                                                 vars2455)
                                                          (if (null?
                                                                types2456)
                                                              (values
                                                                '()
                                                                '()
                                                                '())
                                                              ((lambda (var2457)
                                                                 (call-with-values
                                                                   (lambda ()
                                                                     (f2454
                                                                       (cdr types2456)
                                                                       (cdr vars2455)))
                                                                   (lambda (vars2460
                                                                            defns2459
                                                                            sets2458)
                                                                     (if (eq? (car types2456)
                                                                              'global)
                                                                         ((lambda (x2461)
                                                                            (values
                                                                              (cons
                                                                                x2461
                                                                                vars2460)
                                                                              (cons
                                                                                (list
                                                                                  'define
                                                                                  var2457
                                                                                  (chi-void513))
                                                                                defns2459)
                                                                              (cons
                                                                                (list
                                                                                  'set!
                                                                                  var2457
                                                                                  x2461)
                                                                                sets2458)))
                                                                           (gensym))
                                                                         (values
                                                                           (cons
                                                                             var2457
                                                                             vars2460)
                                                                           defns2459
                                                                           sets2458)))))
                                                                (car vars2455))))))
                                          f2454)
                                         types2449
                                         vars2448))
                                     (lambda (vars2453 defns2452 sets2451)
                                       (if (null? defns2452)
                                           (build-letrec240
                                             ae2450
                                             vars2453
                                             val-exps2447
                                             body-exp2446)
                                           (build-sequence239
                                             '#f
                                             (append
                                               defns2452
                                               (list
                                                 (build-letrec240
                                                   ae2450
                                                   vars2453
                                                   val-exps2447
                                                   (build-sequence239
                                                     '#f
                                                     (append
                                                       sets2451
                                                       (list
                                                         body-exp2446))))))))))))
            (sanitize-binding275 (lambda (b2442)
                                   (if (procedure? b2442)
                                       (cons 'macro b2442)
                                       (if (binding?289 b2442)
                                           (if ((lambda (t2443)
                                                  (if (memv
                                                        t2443
                                                        '(core
                                                           macro
                                                           macro!
                                                           deferred))
                                                      (procedure?
                                                        (binding-value286
                                                          b2442))
                                                      (if (memv
                                                            t2443
                                                            '($module))
                                                          (interface?447
                                                            (binding-value286
                                                              b2442))
                                                          (if (memv
                                                                t2443
                                                                '(lexical))
                                                              '#f
                                                              (if (memv
                                                                    t2443
                                                                    '(global
                                                                       meta-variable))
                                                                  (symbol?
                                                                    (binding-value286
                                                                      b2442))
                                                                  (if (memv
                                                                        t2443
                                                                        '(syntax))
                                                                      ((lambda (x2444)
                                                                         (if (pair?
                                                                               x2444)
                                                                             (if '#f
                                                                                 ((lambda (n2445)
                                                                                    (if (integer?
                                                                                          n2445)
                                                                                        (if (exact?
                                                                                              n2445)
                                                                                            (>= n2445
                                                                                                '0)
                                                                                            '#f)
                                                                                        '#f))
                                                                                   (cdr x2444))
                                                                                 '#f)
                                                                             '#f))
                                                                        (binding-value286
                                                                          b2442))
                                                                      (if (memv
                                                                            t2443
                                                                            '(begin
                                                                               define
                                                                               define-syntax
                                                                               set!
                                                                               $module-key
                                                                               $import
                                                                               eval-when
                                                                               meta))
                                                                          (null?
                                                                            (binding-value286
                                                                              b2442))
                                                                          (if (memv
                                                                                t2443
                                                                                '(local-syntax))
                                                                              (boolean?
                                                                                (binding-value286
                                                                                  b2442))
                                                                              (if (memv
                                                                                    t2443
                                                                                    '(displaced-lexical))
                                                                                  (eq? (binding-value286
                                                                                         b2442)
                                                                                       '#f)
                                                                                  '#t)))))))))
                                                 (binding-type285 b2442))
                                               b2442
                                               '#f)
                                           '#f))))
            (binding-type285 car)
            (binding-value286 cdr)
            (set-binding-type!287 set-car!)
            (set-binding-value!288 set-cdr!)
            (binding?289 (lambda (x2441)
                           (if (pair? x2441) (symbol? (car x2441)) '#f)))
            (extend-env299 (lambda (label2440 binding2439 r2438)
                             (cons (cons label2440 binding2439) r2438)))
            (extend-env*300 (lambda (labels2437 bindings2436 r2435)
                              (if (null? labels2437)
                                  r2435
                                  (extend-env*300
                                    (cdr labels2437)
                                    (cdr bindings2436)
                                    (extend-env299
                                      (car labels2437)
                                      (car bindings2436)
                                      r2435)))))
            (extend-var-env*301 (lambda (labels2434 vars2433 r2432)
                                  (if (null? labels2434)
                                      r2432
                                      (extend-var-env*301
                                        (cdr labels2434)
                                        (cdr vars2433)
                                        (extend-env299
                                          (car labels2434)
                                          (cons 'lexical (car vars2433))
                                          r2432)))))
            (displaced-lexical?302 (lambda (id2429 r2428)
                                     ((lambda (n2430)
                                        (if n2430
                                            ((lambda (b2431)
                                               (eq? (binding-type285 b2431)
                                                    'displaced-lexical))
                                              (lookup305 n2430 r2428))
                                            '#f))
                                       (id-var-name429 id2429 '(())))))
            (displaced-lexical-error303 (lambda (id2427)
                                          (syntax-error
                                            id2427
                                            (if (id-var-name429
                                                  id2427
                                                  '(()))
                                                '"identifier out of context"
                                                '"identifier not visible"))))
            (lookup*304 (lambda (x2424 r2423)
                          ((lambda (t2425)
                             (if t2425
                                 (cdr t2425)
                                 (if (symbol? x2424)
                                     ((lambda (t2426)
                                        (if t2426
                                            t2426
                                            (cons 'global x2424)))
                                       (get-global-definition-hook142
                                         x2424))
                                     '(displaced-lexical . #f))))
                            (assq x2424 r2423))))
            (lookup305 (lambda (x2418 r2417)
                         (letrec ((whack-binding!2419 (lambda (b2422
                                                               *b2421)
                                                        (begin
                                                          (set-binding-type!287
                                                            b2422
                                                            (binding-type285
                                                              *b2421))
                                                          (set-binding-value!288
                                                            b2422
                                                            (binding-value286
                                                              *b2421))))))
                           ((lambda (b2420)
                              (begin
                                (if (eq? (binding-type285 b2420) 'deferred)
                                    (whack-binding!2419
                                      b2420
                                      (make-transformer-binding306
                                        ((binding-value286 b2420))))
                                    (void))
                                b2420))
                             (lookup*304 x2418 r2417)))))
            (make-transformer-binding306 (lambda (b2415)
                                           ((lambda (t2416)
                                              (if t2416
                                                  t2416
                                                  (syntax-error
                                                    b2415
                                                    '"invalid transformer")))
                                             (sanitize-binding275 b2415))))
            (defer-or-eval-transformer307 (lambda (eval2414 x2413)
                                            (if (built-lambda?221 x2413)
                                                (cons
                                                  'deferred
                                                  (lambda ()
                                                    (eval2414 x2413)))
                                                (make-transformer-binding306
                                                  (eval2414 x2413)))))
            (global-extend308 (lambda (type2412 sym2411 val2410)
                                (put-cte-hook141
                                  sym2411
                                  (cons type2412 val2410))))
            (nonsymbol-id?309 (lambda (x2408)
                                (if (syntax-object?64 x2408)
                                    (symbol?
                                      ((lambda (e2409)
                                         (if (annotation?132 e2409)
                                             (annotation-expression e2409)
                                             e2409))
                                        (syntax-object-expression65
                                          x2408)))
                                    '#f)))
            (id?310 (lambda (x2406)
                      (if (symbol? x2406)
                          '#t
                          (if (syntax-object?64 x2406)
                              (symbol?
                                ((lambda (e2407)
                                   (if (annotation?132 e2407)
                                       (annotation-expression e2407)
                                       e2407))
                                  (syntax-object-expression65 x2406)))
                              (if (annotation?132 x2406)
                                  (symbol? (annotation-expression x2406))
                                  '#f)))))
            (id-marks316 (lambda (id2405)
                           (if (syntax-object?64 id2405)
                               (wrap-marks320
                                 (syntax-object-wrap66 id2405))
                               (wrap-marks320 '((top))))))
            (id-subst317 (lambda (id2404)
                           (if (syntax-object?64 id2404)
                               (wrap-subst321
                                 (syntax-object-wrap66 id2404))
                               (wrap-marks320 '((top))))))
            (id-sym-name&marks318 (lambda (x2401 w2400)
                                    (if (syntax-object?64 x2401)
                                        (values
                                          ((lambda (e2402)
                                             (if (annotation?132 e2402)
                                                 (annotation-expression
                                                   e2402)
                                                 e2402))
                                            (syntax-object-expression65
                                              x2401))
                                          (join-marks418
                                            (wrap-marks320 w2400)
                                            (wrap-marks320
                                              (syntax-object-wrap66
                                                x2401))))
                                        (values
                                          ((lambda (e2403)
                                             (if (annotation?132 e2403)
                                                 (annotation-expression
                                                   e2403)
                                                 e2403))
                                            x2401)
                                          (wrap-marks320 w2400)))))
            (make-wrap319 cons)
            (wrap-marks320 car)
            (wrap-subst321 cdr)
            (make-indirect-label350 (lambda (label2399)
                                      (vector 'indirect-label label2399)))
            (indirect-label?351 (lambda (x2398)
                                  (if (vector? x2398)
                                      (if (= (vector-length x2398) '2)
                                          (eq? (vector-ref x2398 '0)
                                               'indirect-label)
                                          '#f)
                                      '#f)))
            (indirect-label-label352 (lambda (x2397)
                                       (vector-ref x2397 '1)))
            (set-indirect-label-label!353 (lambda (x2396 update2395)
                                            (vector-set!
                                              x2396
                                              '1
                                              update2395)))
            (gen-indirect-label354 (lambda ()
                                     (make-indirect-label350
                                       (gen-label357))))
            (get-indirect-label355 (lambda (x2394)
                                     (indirect-label-label352 x2394)))
            (set-indirect-label!356 (lambda (x2393 v2392)
                                      (set-indirect-label-label!353
                                        x2393
                                        v2392)))
            (gen-label357 (lambda () (string '#\i)))
            (label?358 (lambda (x2389)
                         ((lambda (t2390)
                            (if t2390
                                t2390
                                ((lambda (t2391)
                                   (if t2391
                                       t2391
                                       (indirect-label?351 x2389)))
                                  (symbol? x2389))))
                           (string? x2389))))
            (gen-labels359 (lambda (ls2388)
                             (if (null? ls2388)
                                 '()
                                 (cons
                                   (gen-label357)
                                   (gen-labels359 (cdr ls2388))))))
            (make-ribcage360 (lambda (symnames2387 marks2386 labels2385)
                               (vector
                                 'ribcage
                                 symnames2387
                                 marks2386
                                 labels2385)))
            (ribcage?361 (lambda (x2384)
                           (if (vector? x2384)
                               (if (= (vector-length x2384) '4)
                                   (eq? (vector-ref x2384 '0) 'ribcage)
                                   '#f)
                               '#f)))
            (ribcage-symnames362 (lambda (x2383) (vector-ref x2383 '1)))
            (ribcage-marks363 (lambda (x2382) (vector-ref x2382 '2)))
            (ribcage-labels364 (lambda (x2381) (vector-ref x2381 '3)))
            (set-ribcage-symnames!365 (lambda (x2380 update2379)
                                        (vector-set! x2380 '1 update2379)))
            (set-ribcage-marks!366 (lambda (x2378 update2377)
                                     (vector-set! x2378 '2 update2377)))
            (set-ribcage-labels!367 (lambda (x2376 update2375)
                                      (vector-set! x2376 '3 update2375)))
            (make-top-ribcage368 (lambda (key2374 mutable?2373)
                                   (vector
                                     'top-ribcage
                                     key2374
                                     mutable?2373)))
            (top-ribcage?369 (lambda (x2372)
                               (if (vector? x2372)
                                   (if (= (vector-length x2372) '3)
                                       (eq? (vector-ref x2372 '0)
                                            'top-ribcage)
                                       '#f)
                                   '#f)))
            (top-ribcage-key370 (lambda (x2371) (vector-ref x2371 '1)))
            (top-ribcage-mutable?371 (lambda (x2370)
                                       (vector-ref x2370 '2)))
            (set-top-ribcage-key!372 (lambda (x2369 update2368)
                                       (vector-set! x2369 '1 update2368)))
            (set-top-ribcage-mutable?!373 (lambda (x2367 update2366)
                                            (vector-set!
                                              x2367
                                              '2
                                              update2366)))
            (make-import-interface374 (lambda (interface2365
                                               new-marks2364)
                                        (vector
                                          'import-interface
                                          interface2365
                                          new-marks2364)))
            (import-interface?375 (lambda (x2363)
                                    (if (vector? x2363)
                                        (if (= (vector-length x2363) '3)
                                            (eq? (vector-ref x2363 '0)
                                                 'import-interface)
                                            '#f)
                                        '#f)))
            (import-interface-interface376 (lambda (x2362)
                                             (vector-ref x2362 '1)))
            (import-interface-new-marks377 (lambda (x2361)
                                             (vector-ref x2361 '2)))
            (set-import-interface-interface!378 (lambda (x2360
                                                         update2359)
                                                  (vector-set!
                                                    x2360
                                                    '1
                                                    update2359)))
            (set-import-interface-new-marks!379 (lambda (x2358
                                                         update2357)
                                                  (vector-set!
                                                    x2358
                                                    '2
                                                    update2357)))
            (make-env380 (lambda (top-ribcage2356 wrap2355)
                           (vector 'env top-ribcage2356 wrap2355)))
            (env?381 (lambda (x2354)
                       (if (vector? x2354)
                           (if (= (vector-length x2354) '3)
                               (eq? (vector-ref x2354 '0) 'env)
                               '#f)
                           '#f)))
            (env-top-ribcage382 (lambda (x2353) (vector-ref x2353 '1)))
            (env-wrap383 (lambda (x2352) (vector-ref x2352 '2)))
            (set-env-top-ribcage!384 (lambda (x2351 update2350)
                                       (vector-set! x2351 '1 update2350)))
            (set-env-wrap!385 (lambda (x2349 update2348)
                                (vector-set! x2349 '2 update2348)))
            (anti-mark395 (lambda (w2347)
                            (make-wrap319
                              (cons '#f (wrap-marks320 w2347))
                              (cons 'shift (wrap-subst321 w2347)))))
            (barrier-marker400 '#f)
            (extend-ribcage!405 (lambda (ribcage2345 id2344 label2343)
                                  (begin
                                    (set-ribcage-symnames!365
                                      ribcage2345
                                      (cons
                                        ((lambda (e2346)
                                           (if (annotation?132 e2346)
                                               (annotation-expression
                                                 e2346)
                                               e2346))
                                          (syntax-object-expression65
                                            id2344))
                                        (ribcage-symnames362 ribcage2345)))
                                    (set-ribcage-marks!366
                                      ribcage2345
                                      (cons
                                        (wrap-marks320
                                          (syntax-object-wrap66 id2344))
                                        (ribcage-marks363 ribcage2345)))
                                    (set-ribcage-labels!367
                                      ribcage2345
                                      (cons
                                        label2343
                                        (ribcage-labels364
                                          ribcage2345))))))
            (import-extend-ribcage!406 (lambda (ribcage2341
                                                new-marks2340 id2339
                                                label2338)
                                         (begin
                                           (set-ribcage-symnames!365
                                             ribcage2341
                                             (cons
                                               ((lambda (e2342)
                                                  (if (annotation?132
                                                        e2342)
                                                      (annotation-expression
                                                        e2342)
                                                      e2342))
                                                 (syntax-object-expression65
                                                   id2339))
                                               (ribcage-symnames362
                                                 ribcage2341)))
                                           (set-ribcage-marks!366
                                             ribcage2341
                                             (cons
                                               (join-marks418
                                                 new-marks2340
                                                 (wrap-marks320
                                                   (syntax-object-wrap66
                                                     id2339)))
                                               (ribcage-marks363
                                                 ribcage2341)))
                                           (set-ribcage-labels!367
                                             ribcage2341
                                             (cons
                                               label2338
                                               (ribcage-labels364
                                                 ribcage2341))))))
            (extend-ribcage-barrier!407 (lambda (ribcage2337
                                                 killer-id2336)
                                          (extend-ribcage-barrier-help!408
                                            ribcage2337
                                            (syntax-object-wrap66
                                              killer-id2336))))
            (extend-ribcage-barrier-help!408 (lambda (ribcage2335
                                                      wrap2334)
                                               (begin
                                                 (set-ribcage-symnames!365
                                                   ribcage2335
                                                   (cons
                                                     barrier-marker400
                                                     (ribcage-symnames362
                                                       ribcage2335)))
                                                 (set-ribcage-marks!366
                                                   ribcage2335
                                                   (cons
                                                     (wrap-marks320
                                                       wrap2334)
                                                     (ribcage-marks363
                                                       ribcage2335))))))
            (extend-ribcage-subst!409 (lambda (ribcage2333
                                               import-iface2332)
                                        (set-ribcage-symnames!365
                                          ribcage2333
                                          (cons
                                            import-iface2332
                                            (ribcage-symnames362
                                              ribcage2333)))))
            (lookup-import-binding-name410 (lambda (sym2327 marks2326
                                                    token2325
                                                    new-marks2324)
                                             ((lambda (new2328)
                                                (if new2328
                                                    ((letrec ((f2329 (lambda (new2330)
                                                                       (if (pair?
                                                                             new2330)
                                                                           ((lambda (t2331)
                                                                              (if t2331
                                                                                  t2331
                                                                                  (f2329
                                                                                    (cdr new2330))))
                                                                             (f2329
                                                                               (car new2330)))
                                                                           (if (symbol?
                                                                                 new2330)
                                                                               (if (same-marks?420
                                                                                     marks2326
                                                                                     (join-marks418
                                                                                       new-marks2324
                                                                                       (wrap-marks320
                                                                                         '((top)))))
                                                                                   new2330
                                                                                   '#f)
                                                                               (if (same-marks?420
                                                                                     marks2326
                                                                                     (join-marks418
                                                                                       new-marks2324
                                                                                       (wrap-marks320
                                                                                         (syntax-object-wrap66
                                                                                           new2330))))
                                                                                   new2330
                                                                                   '#f))))))
                                                       f2329)
                                                      new2328)
                                                    '#f))
                                               (get-import-binding145
                                                 sym2327
                                                 token2325))))
            (store-import-binding411 (lambda (id2309 token2308
                                              new-marks2307)
                                       (letrec ((cons-id2310 (lambda (id2323
                                                                      x2322)
                                                               (if (not x2322)
                                                                   id2323
                                                                   (cons
                                                                     id2323
                                                                     x2322))))
                                                (weed2311 (lambda (marks2321
                                                                   x2320)
                                                            (if (pair?
                                                                  x2320)
                                                                (if (same-marks?420
                                                                      (id-marks316
                                                                        (car x2320))
                                                                      marks2321)
                                                                    (weed2311
                                                                      marks2321
                                                                      (cdr x2320))
                                                                    (cons-id2310
                                                                      (car x2320)
                                                                      (weed2311
                                                                        marks2321
                                                                        (cdr x2320))))
                                                                (if x2320
                                                                    (if (not (same-marks?420
                                                                               (id-marks316
                                                                                 x2320)
                                                                               marks2321))
                                                                        x2320
                                                                        '#f)
                                                                    '#f)))))
                                         ((lambda (id2312)
                                            ((lambda (sym2313)
                                               (if (not (eq? id2312
                                                             sym2313))
                                                   ((lambda (marks2314)
                                                      ((lambda (x2315)
                                                         (put-import-binding146
                                                           sym2313
                                                           token2308
                                                           (cons-id2310
                                                             (if (same-marks?420
                                                                   marks2314
                                                                   (wrap-marks320
                                                                     '((top))))
                                                                 (resolved-id-var-name415
                                                                   id2312)
                                                                 id2312)
                                                             x2315)))
                                                        (weed2311
                                                          marks2314
                                                          (get-import-binding145
                                                            sym2313
                                                            token2308))))
                                                     (id-marks316 id2312))
                                                   (void)))
                                              ((lambda (x2316)
                                                 ((lambda (e2317)
                                                    (if (annotation?132
                                                          e2317)
                                                        (annotation-expression
                                                          e2317)
                                                        e2317))
                                                   (if (syntax-object?64
                                                         x2316)
                                                       (syntax-object-expression65
                                                         x2316)
                                                       x2316)))
                                                id2312)))
                                           (if (null? new-marks2307)
                                               id2309
                                               (make-syntax-object63
                                                 ((lambda (x2318)
                                                    ((lambda (e2319)
                                                       (if (annotation?132
                                                             e2319)
                                                           (annotation-expression
                                                             e2319)
                                                           e2319))
                                                      (if (syntax-object?64
                                                            x2318)
                                                          (syntax-object-expression65
                                                            x2318)
                                                          x2318)))
                                                   id2309)
                                                 (make-wrap319
                                                   (join-marks418
                                                     new-marks2307
                                                     (id-marks316 id2309))
                                                   (id-subst317
                                                     id2309))))))))
            (make-binding-wrap412 (lambda (ids2297 labels2296 w2295)
                                    (if (null? ids2297)
                                        w2295
                                        (make-wrap319
                                          (wrap-marks320 w2295)
                                          (cons
                                            ((lambda (labelvec2298)
                                               ((lambda (n2299)
                                                  ((lambda (symnamevec2301
                                                            marksvec2300)
                                                     (begin
                                                       ((letrec ((f2302 (lambda (ids2304
                                                                                 i2303)
                                                                          (if (not (null?
                                                                                     ids2304))
                                                                              (call-with-values
                                                                                (lambda ()
                                                                                  (id-sym-name&marks318
                                                                                    (car ids2304)
                                                                                    w2295))
                                                                                (lambda (symname2306
                                                                                         marks2305)
                                                                                  (begin
                                                                                    (vector-set!
                                                                                      symnamevec2301
                                                                                      i2303
                                                                                      symname2306)
                                                                                    (vector-set!
                                                                                      marksvec2300
                                                                                      i2303
                                                                                      marks2305)
                                                                                    (f2302
                                                                                      (cdr ids2304)
                                                                                      (+ i2303
                                                                                         '1)))))
                                                                              (void)))))
                                                          f2302)
                                                         ids2297
                                                         '0)
                                                       (make-ribcage360
                                                         symnamevec2301
                                                         marksvec2300
                                                         labelvec2298)))
                                                    (make-vector n2299)
                                                    (make-vector n2299)))
                                                 (vector-length
                                                   labelvec2298)))
                                              (list->vector labels2296))
                                            (wrap-subst321 w2295))))))
            (make-resolved-id413 (lambda (fromsym2294 marks2293
                                          tosym2292)
                                   (make-syntax-object63
                                     fromsym2294
                                     (make-wrap319
                                       marks2293
                                       (list
                                         (make-ribcage360
                                           (vector fromsym2294)
                                           (vector marks2293)
                                           (vector tosym2292)))))))
            (id->resolved-id414 (lambda (id2287)
                                  (call-with-values
                                    (lambda ()
                                      (id-var-name&marks427 id2287 '(())))
                                    (lambda (tosym2289 marks2288)
                                      (begin
                                        (if (not tosym2289)
                                            (syntax-error
                                              id2287
                                              '"identifier not visible for export")
                                            (void))
                                        (make-resolved-id413
                                          ((lambda (x2290)
                                             ((lambda (e2291)
                                                (if (annotation?132 e2291)
                                                    (annotation-expression
                                                      e2291)
                                                    e2291))
                                               (if (syntax-object?64 x2290)
                                                   (syntax-object-expression65
                                                     x2290)
                                                   x2290)))
                                            id2287)
                                          marks2288
                                          tosym2289))))))
            (resolved-id-var-name415 (lambda (id2286)
                                       (vector-ref
                                         (ribcage-labels364
                                           (car (wrap-subst321
                                                  (syntax-object-wrap66
                                                    id2286))))
                                         '0)))
            (smart-append416 (lambda (m12285 m22284)
                               (if (null? m22284)
                                   m12285
                                   (append m12285 m22284))))
            (join-wraps417 (lambda (w12281 w22280)
                             ((lambda (m12283 s12282)
                                (if (null? m12283)
                                    (if (null? s12282)
                                        w22280
                                        (make-wrap319
                                          (wrap-marks320 w22280)
                                          (join-subst419
                                            s12282
                                            (wrap-subst321 w22280))))
                                    (make-wrap319
                                      (join-marks418
                                        m12283
                                        (wrap-marks320 w22280))
                                      (join-subst419
                                        s12282
                                        (wrap-subst321 w22280)))))
                               (wrap-marks320 w12281)
                               (wrap-subst321 w12281))))
            (join-marks418 (lambda (m12279 m22278)
                             (smart-append416 m12279 m22278)))
            (join-subst419 (lambda (s12277 s22276)
                             (smart-append416 s12277 s22276)))
            (same-marks?420 (lambda (x2274 y2273)
                              ((lambda (t2275)
                                 (if t2275
                                     t2275
                                     (if (not (null? x2274))
                                         (if (not (null? y2273))
                                             (if (eq? (car x2274)
                                                      (car y2273))
                                                 (same-marks?420
                                                   (cdr x2274)
                                                   (cdr y2273))
                                                 '#f)
                                             '#f)
                                         '#f)))
                                (eq? x2274 y2273))))
            (diff-marks421 (lambda (m12267 m22266)
                             ((lambda (n12269 n22268)
                                ((letrec ((f2270 (lambda (n12272 m12271)
                                                   (if (> n12272 n22268)
                                                       (cons
                                                         (car m12271)
                                                         (f2270
                                                           (- n12272 '1)
                                                           (cdr m12271)))
                                                       (if (equal?
                                                             m12271
                                                             m22266)
                                                           '()
                                                           (error 'sc-expand
                                                             '"internal error in diff-marks: ~s is not a tail of ~s"
                                                             m12271
                                                             m22266))))))
                                   f2270)
                                  n12269
                                  m12267))
                               (length m12267)
                               (length m22266))))
            (leave-implicit?422 (lambda (token2265)
                                  (eq? token2265 '*top*)))
            (new-binding423 (lambda (sym2262 marks2261 token2260)
                              ((lambda (loc2263)
                                 ((lambda (id2264)
                                    (begin
                                      (store-import-binding411
                                        id2264
                                        token2260
                                        '())
                                      (values loc2263 id2264)))
                                   (make-resolved-id413
                                     sym2262
                                     marks2261
                                     loc2263)))
                                (if (if (leave-implicit?422 token2260)
                                        (same-marks?420
                                          marks2261
                                          (wrap-marks320 '((top))))
                                        '#f)
                                    sym2262
                                    (generate-id147 sym2262)))))
            (top-id-bound-var-name424 (lambda (sym2256 marks2255
                                               top-ribcage2254)
                                        ((lambda (token2257)
                                           ((lambda (t2258)
                                              (if t2258
                                                  ((lambda (id2259)
                                                     (if (symbol? id2259)
                                                         (if (read-only-binding?144
                                                               id2259)
                                                             (new-binding423
                                                               sym2256
                                                               marks2255
                                                               token2257)
                                                             (values
                                                               id2259
                                                               (make-resolved-id413
                                                                 sym2256
                                                                 marks2255
                                                                 id2259)))
                                                         (values
                                                           (resolved-id-var-name415
                                                             id2259)
                                                           id2259)))
                                                    t2258)
                                                  (new-binding423
                                                    sym2256
                                                    marks2255
                                                    token2257)))
                                             (lookup-import-binding-name410
                                               sym2256
                                               marks2255
                                               token2257
                                               '())))
                                          (top-ribcage-key370
                                            top-ribcage2254))))
            (top-id-free-var-name425 (lambda (sym2248 marks2247
                                              top-ribcage2246)
                                       ((lambda (token2249)
                                          ((lambda (t2250)
                                             (if t2250
                                                 ((lambda (id2251)
                                                    (if (symbol? id2251)
                                                        id2251
                                                        (resolved-id-var-name415
                                                          id2251)))
                                                   t2250)
                                                 (if (if (top-ribcage-mutable?371
                                                           top-ribcage2246)
                                                         (same-marks?420
                                                           marks2247
                                                           (wrap-marks320
                                                             '((top))))
                                                         '#f)
                                                     (call-with-values
                                                       (lambda ()
                                                         (new-binding423
                                                           sym2248
                                                           (wrap-marks320
                                                             '((top)))
                                                           token2249))
                                                       (lambda (sym2253
                                                                id2252)
                                                         sym2253))
                                                     '#f)))
                                            (lookup-import-binding-name410
                                              sym2248
                                              marks2247
                                              token2249
                                              '())))
                                         (top-ribcage-key370
                                           top-ribcage2246))))
            (id-var-name-loc&marks426 (lambda (id2197 w2196)
                                        (letrec ((search2198 (lambda (sym2241
                                                                      subst2240
                                                                      marks2239)
                                                               (if (null?
                                                                     subst2240)
                                                                   (values
                                                                     '#f
                                                                     marks2239)
                                                                   ((lambda (fst2242)
                                                                      (if (eq? fst2242
                                                                               'shift)
                                                                          (search2198
                                                                            sym2241
                                                                            (cdr subst2240)
                                                                            (cdr marks2239))
                                                                          (if (ribcage?361
                                                                                fst2242)
                                                                              ((lambda (symnames2243)
                                                                                 (if (vector?
                                                                                       symnames2243)
                                                                                     (search-vector-rib2200
                                                                                       sym2241
                                                                                       subst2240
                                                                                       marks2239
                                                                                       symnames2243
                                                                                       fst2242)
                                                                                     (search-list-rib2199
                                                                                       sym2241
                                                                                       subst2240
                                                                                       marks2239
                                                                                       symnames2243
                                                                                       fst2242)))
                                                                                (ribcage-symnames362
                                                                                  fst2242))
                                                                              (if (top-ribcage?369
                                                                                    fst2242)
                                                                                  ((lambda (t2244)
                                                                                     (if t2244
                                                                                         ((lambda (var-name2245)
                                                                                            (values
                                                                                              var-name2245
                                                                                              marks2239))
                                                                                           t2244)
                                                                                         (search2198
                                                                                           sym2241
                                                                                           (cdr subst2240)
                                                                                           marks2239)))
                                                                                    (top-id-free-var-name425
                                                                                      sym2241
                                                                                      marks2239
                                                                                      fst2242))
                                                                                  (error 'sc-expand
                                                                                    '"internal error in id-var-name-loc&marks: improper subst ~s"
                                                                                    subst2240)))))
                                                                     (car subst2240)))))
                                                 (search-list-rib2199 (lambda (sym2219
                                                                               subst2218
                                                                               marks2217
                                                                               symnames2216
                                                                               ribcage2215)
                                                                        ((letrec ((f2220 (lambda (symnames2222
                                                                                                  i2221)
                                                                                           (if (null?
                                                                                                 symnames2222)
                                                                                               (search2198
                                                                                                 sym2219
                                                                                                 (cdr subst2218)
                                                                                                 marks2217)
                                                                                               ((lambda (x2223)
                                                                                                  (if (if (eq? x2223
                                                                                                               sym2219)
                                                                                                          (same-marks?420
                                                                                                            marks2217
                                                                                                            (list-ref
                                                                                                              (ribcage-marks363
                                                                                                                ribcage2215)
                                                                                                              i2221))
                                                                                                          '#f)
                                                                                                      (values
                                                                                                        (list-ref
                                                                                                          (ribcage-labels364
                                                                                                            ribcage2215)
                                                                                                          i2221)
                                                                                                        marks2217)
                                                                                                      (if (import-interface?375
                                                                                                            x2223)
                                                                                                          ((lambda (iface2225
                                                                                                                    new-marks2224)
                                                                                                             ((lambda (t2226)
                                                                                                                (if t2226
                                                                                                                    ((lambda (token2227)
                                                                                                                       ((lambda (t2228)
                                                                                                                          (if t2228
                                                                                                                              ((lambda (id2229)
                                                                                                                                 (values
                                                                                                                                   (if (symbol?
                                                                                                                                         id2229)
                                                                                                                                       id2229
                                                                                                                                       (resolved-id-var-name415
                                                                                                                                         id2229))
                                                                                                                                   marks2217))
                                                                                                                                t2228)
                                                                                                                              (f2220
                                                                                                                                (cdr symnames2222)
                                                                                                                                i2221)))
                                                                                                                         (lookup-import-binding-name410
                                                                                                                           sym2219
                                                                                                                           marks2217
                                                                                                                           token2227
                                                                                                                           new-marks2224)))
                                                                                                                      t2226)
                                                                                                                    ((lambda (ie2230)
                                                                                                                       ((lambda (n2231)
                                                                                                                          ((lambda ()
                                                                                                                             ((letrec ((g2232 (lambda (j2233)
                                                                                                                                                (if (= j2233
                                                                                                                                                       n2231)
                                                                                                                                                    (f2220
                                                                                                                                                      (cdr symnames2222)
                                                                                                                                                      i2221)
                                                                                                                                                    ((lambda (id2234)
                                                                                                                                                       ((lambda (id.sym2236
                                                                                                                                                                 id.marks2235)
                                                                                                                                                          (if (help-bound-id=?432
                                                                                                                                                                id.sym2236
                                                                                                                                                                id.marks2235
                                                                                                                                                                sym2219
                                                                                                                                                                marks2217)
                                                                                                                                                              (values
                                                                                                                                                                (lookup-import-label501
                                                                                                                                                                  id2234)
                                                                                                                                                                marks2217)
                                                                                                                                                              (g2232
                                                                                                                                                                (+ j2233
                                                                                                                                                                   '1))))
                                                                                                                                                         ((lambda (x2237)
                                                                                                                                                            ((lambda (e2238)
                                                                                                                                                               (if (annotation?132
                                                                                                                                                                     e2238)
                                                                                                                                                                   (annotation-expression
                                                                                                                                                                     e2238)
                                                                                                                                                                   e2238))
                                                                                                                                                              (if (syntax-object?64
                                                                                                                                                                    x2237)
                                                                                                                                                                  (syntax-object-expression65
                                                                                                                                                                    x2237)
                                                                                                                                                                  x2237)))
                                                                                                                                                           id2234)
                                                                                                                                                         (join-marks418
                                                                                                                                                           new-marks2224
                                                                                                                                                           (id-marks316
                                                                                                                                                             id2234))))
                                                                                                                                                      (vector-ref
                                                                                                                                                        ie2230
                                                                                                                                                        j2233))))))
                                                                                                                                g2232)
                                                                                                                               '0))))
                                                                                                                         (vector-length
                                                                                                                           ie2230)))
                                                                                                                      (interface-exports449
                                                                                                                        iface2225))))
                                                                                                               (interface-token450
                                                                                                                 iface2225)))
                                                                                                            (import-interface-interface376
                                                                                                              x2223)
                                                                                                            (import-interface-new-marks377
                                                                                                              x2223))
                                                                                                          (if (if (eq? x2223
                                                                                                                       barrier-marker400)
                                                                                                                  (same-marks?420
                                                                                                                    marks2217
                                                                                                                    (list-ref
                                                                                                                      (ribcage-marks363
                                                                                                                        ribcage2215)
                                                                                                                      i2221))
                                                                                                                  '#f)
                                                                                                              (values
                                                                                                                '#f
                                                                                                                marks2217)
                                                                                                              (f2220
                                                                                                                (cdr symnames2222)
                                                                                                                (+ i2221
                                                                                                                   '1))))))
                                                                                                 (car symnames2222))))))
                                                                           f2220)
                                                                          symnames2216
                                                                          '0)))
                                                 (search-vector-rib2200 (lambda (sym2211
                                                                                 subst2210
                                                                                 marks2209
                                                                                 symnames2208
                                                                                 ribcage2207)
                                                                          ((lambda (n2212)
                                                                             ((letrec ((f2213 (lambda (i2214)
                                                                                                (if (= i2214
                                                                                                       n2212)
                                                                                                    (search2198
                                                                                                      sym2211
                                                                                                      (cdr subst2210)
                                                                                                      marks2209)
                                                                                                    (if (if (eq? (vector-ref
                                                                                                                   symnames2208
                                                                                                                   i2214)
                                                                                                                 sym2211)
                                                                                                            (same-marks?420
                                                                                                              marks2209
                                                                                                              (vector-ref
                                                                                                                (ribcage-marks363
                                                                                                                  ribcage2207)
                                                                                                                i2214))
                                                                                                            '#f)
                                                                                                        (values
                                                                                                          (vector-ref
                                                                                                            (ribcage-labels364
                                                                                                              ribcage2207)
                                                                                                            i2214)
                                                                                                          marks2209)
                                                                                                        (f2213
                                                                                                          (+ i2214
                                                                                                             '1)))))))
                                                                                f2213)
                                                                               '0))
                                                                            (vector-length
                                                                              symnames2208)))))
                                          (if (symbol? id2197)
                                              (search2198
                                                id2197
                                                (wrap-subst321 w2196)
                                                (wrap-marks320 w2196))
                                              (if (syntax-object?64 id2197)
                                                  ((lambda (sym2202 w12201)
                                                     (call-with-values
                                                       (lambda ()
                                                         (search2198
                                                           sym2202
                                                           (wrap-subst321
                                                             w2196)
                                                           (join-marks418
                                                             (wrap-marks320
                                                               w2196)
                                                             (wrap-marks320
                                                               w12201))))
                                                       (lambda (name2204
                                                                marks2203)
                                                         (if name2204
                                                             (values
                                                               name2204
                                                               marks2203)
                                                             (search2198
                                                               sym2202
                                                               (wrap-subst321
                                                                 w12201)
                                                               marks2203)))))
                                                    ((lambda (e2205)
                                                       (if (annotation?132
                                                             e2205)
                                                           (annotation-expression
                                                             e2205)
                                                           e2205))
                                                      (syntax-object-expression65
                                                        id2197))
                                                    (syntax-object-wrap66
                                                      id2197))
                                                  (if (annotation?132
                                                        id2197)
                                                      (search2198
                                                        ((lambda (e2206)
                                                           (if (annotation?132
                                                                 e2206)
                                                               (annotation-expression
                                                                 e2206)
                                                               e2206))
                                                          id2197)
                                                        (wrap-subst321
                                                          w2196)
                                                        (wrap-marks320
                                                          w2196))
                                                      (error-hook136
                                                        'id-var-name
                                                        '"invalid id"
                                                        id2197)))))))
            (id-var-name&marks427 (lambda (id2193 w2192)
                                    (call-with-values
                                      (lambda ()
                                        (id-var-name-loc&marks426
                                          id2193
                                          w2192))
                                      (lambda (label2195 marks2194)
                                        (values
                                          (if (indirect-label?351
                                                label2195)
                                              (get-indirect-label355
                                                label2195)
                                              label2195)
                                          marks2194)))))
            (id-var-name-loc428 (lambda (id2189 w2188)
                                  (call-with-values
                                    (lambda ()
                                      (id-var-name-loc&marks426
                                        id2189
                                        w2188))
                                    (lambda (label2191 marks2190)
                                      label2191))))
            (id-var-name429 (lambda (id2185 w2184)
                              (call-with-values
                                (lambda ()
                                  (id-var-name-loc&marks426 id2185 w2184))
                                (lambda (label2187 marks2186)
                                  (if (indirect-label?351 label2187)
                                      (get-indirect-label355 label2187)
                                      label2187)))))
            (free-id=?430 (lambda (i2179 j2178)
                            (if (eq? ((lambda (x2182)
                                        ((lambda (e2183)
                                           (if (annotation?132 e2183)
                                               (annotation-expression
                                                 e2183)
                                               e2183))
                                          (if (syntax-object?64 x2182)
                                              (syntax-object-expression65
                                                x2182)
                                              x2182)))
                                       i2179)
                                     ((lambda (x2180)
                                        ((lambda (e2181)
                                           (if (annotation?132 e2181)
                                               (annotation-expression
                                                 e2181)
                                               e2181))
                                          (if (syntax-object?64 x2180)
                                              (syntax-object-expression65
                                                x2180)
                                              x2180)))
                                       j2178))
                                (eq? (id-var-name429 i2179 '(()))
                                     (id-var-name429 j2178 '(())))
                                '#f)))
            (literal-id=?431 (lambda (id2168 literal2167)
                               (if (eq? ((lambda (x2171)
                                           ((lambda (e2172)
                                              (if (annotation?132 e2172)
                                                  (annotation-expression
                                                    e2172)
                                                  e2172))
                                             (if (syntax-object?64 x2171)
                                                 (syntax-object-expression65
                                                   x2171)
                                                 x2171)))
                                          id2168)
                                        ((lambda (x2169)
                                           ((lambda (e2170)
                                              (if (annotation?132 e2170)
                                                  (annotation-expression
                                                    e2170)
                                                  e2170))
                                             (if (syntax-object?64 x2169)
                                                 (syntax-object-expression65
                                                   x2169)
                                                 x2169)))
                                          literal2167))
                                   ((lambda (n-id2174 n-literal2173)
                                      ((lambda (t2175)
                                         (if t2175
                                             t2175
                                             (if ((lambda (t2176)
                                                    (if t2176
                                                        t2176
                                                        (symbol?
                                                          n-id2174)))
                                                   (not n-id2174))
                                                 ((lambda (t2177)
                                                    (if t2177
                                                        t2177
                                                        (symbol?
                                                          n-literal2173)))
                                                   (not n-literal2173))
                                                 '#f)))
                                        (eq? n-id2174 n-literal2173)))
                                     (id-var-name429 id2168 '(()))
                                     (id-var-name429 literal2167 '(())))
                                   '#f)))
            (help-bound-id=?432 (lambda (i.sym2166 i.marks2165 j.sym2164
                                         j.marks2163)
                                  (if (eq? i.sym2166 j.sym2164)
                                      (same-marks?420
                                        i.marks2165
                                        j.marks2163)
                                      '#f)))
            (bound-id=?433 (lambda (i2158 j2157)
                             (help-bound-id=?432
                               ((lambda (x2161)
                                  ((lambda (e2162)
                                     (if (annotation?132 e2162)
                                         (annotation-expression e2162)
                                         e2162))
                                    (if (syntax-object?64 x2161)
                                        (syntax-object-expression65 x2161)
                                        x2161)))
                                 i2158)
                               (id-marks316 i2158)
                               ((lambda (x2159)
                                  ((lambda (e2160)
                                     (if (annotation?132 e2160)
                                         (annotation-expression e2160)
                                         e2160))
                                    (if (syntax-object?64 x2159)
                                        (syntax-object-expression65 x2159)
                                        x2159)))
                                 j2157)
                               (id-marks316 j2157))))
            (valid-bound-ids?434 (lambda (ids2153)
                                   (if ((letrec ((all-ids?2154 (lambda (ids2155)
                                                                 ((lambda (t2156)
                                                                    (if t2156
                                                                        t2156
                                                                        (if (id?310
                                                                              (car ids2155))
                                                                            (all-ids?2154
                                                                              (cdr ids2155))
                                                                            '#f)))
                                                                   (null?
                                                                     ids2155)))))
                                          all-ids?2154)
                                         ids2153)
                                       (distinct-bound-ids?435 ids2153)
                                       '#f)))
            (distinct-bound-ids?435 (lambda (ids2149)
                                      ((letrec ((distinct?2150 (lambda (ids2151)
                                                                 ((lambda (t2152)
                                                                    (if t2152
                                                                        t2152
                                                                        (if (not (bound-id-member?437
                                                                                   (car ids2151)
                                                                                   (cdr ids2151)))
                                                                            (distinct?2150
                                                                              (cdr ids2151))
                                                                            '#f)))
                                                                   (null?
                                                                     ids2151)))))
                                         distinct?2150)
                                        ids2149)))
            (invalid-ids-error436 (lambda (ids2145 exp2144 class2143)
                                    ((letrec ((find2146 (lambda (ids2148
                                                                 gooduns2147)
                                                          (if (null?
                                                                ids2148)
                                                              (syntax-error
                                                                exp2144)
                                                              (if (id?310
                                                                    (car ids2148))
                                                                  (if (bound-id-member?437
                                                                        (car ids2148)
                                                                        gooduns2147)
                                                                      (syntax-error
                                                                        (car ids2148)
                                                                        '"duplicate "
                                                                        class2143)
                                                                      (find2146
                                                                        (cdr ids2148)
                                                                        (cons
                                                                          (car ids2148)
                                                                          gooduns2147)))
                                                                  (syntax-error
                                                                    (car ids2148)
                                                                    '"invalid "
                                                                    class2143))))))
                                       find2146)
                                      ids2145
                                      '())))
            (bound-id-member?437 (lambda (x2141 list2140)
                                   (if (not (null? list2140))
                                       ((lambda (t2142)
                                          (if t2142
                                              t2142
                                              (bound-id-member?437
                                                x2141
                                                (cdr list2140))))
                                         (bound-id=?433
                                           x2141
                                           (car list2140)))
                                       '#f)))
            (wrap438 (lambda (x2139 w2138)
                       (if (if (null? (wrap-marks320 w2138))
                               (null? (wrap-subst321 w2138))
                               '#f)
                           x2139
                           (if (syntax-object?64 x2139)
                               (make-syntax-object63
                                 (syntax-object-expression65 x2139)
                                 (join-wraps417
                                   w2138
                                   (syntax-object-wrap66 x2139)))
                               (if (null? x2139)
                                   x2139
                                   (make-syntax-object63 x2139 w2138))))))
            (source-wrap439 (lambda (x2137 w2136 ae2135)
                              (wrap438
                                (if (annotation?132 ae2135)
                                    (begin
                                      (if (not (eq? (annotation-expression
                                                      ae2135)
                                                    x2137))
                                          (error 'sc-expand
                                            '"internal error in source-wrap: ae/x mismatch")
                                          (void))
                                      ae2135)
                                    x2137)
                                w2136)))
            (chi-when-list440 (lambda (when-list2133 w2132)
                                (map (lambda (x2134)
                                       (if (literal-id=?431
                                             x2134
                                             '#(syntax-object compile ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                           'compile
                                           (if (literal-id=?431
                                                 x2134
                                                 '#(syntax-object load ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                               'load
                                               (if (literal-id=?431
                                                     x2134
                                                     '#(syntax-object visit ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                   'visit
                                                   (if (literal-id=?431
                                                         x2134
                                                         '#(syntax-object revisit ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                       'revisit
                                                       (if (literal-id=?431
                                                             x2134
                                                             '#(syntax-object eval ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(when-list w) #((top) (top)) #("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                           'eval
                                                           (syntax-error
                                                             (wrap438
                                                               x2134
                                                               w2132)
                                                             '"invalid eval-when situation")))))))
                                     when-list2133)))
            (syntax-type441 (lambda (e2117 r2116 w2115 ae2114 rib2113)
                              (if (symbol? e2117)
                                  ((lambda (n2118)
                                     ((lambda (b2119)
                                        ((lambda (type2120)
                                           ((lambda ()
                                              ((lambda (t2121)
                                                 (if (memv
                                                       t2121
                                                       '(macro macro!))
                                                     (syntax-type441
                                                       (chi-macro497
                                                         (binding-value286
                                                           b2119)
                                                         e2117 r2116 w2115
                                                         ae2114 rib2113)
                                                       r2116 '(()) '#f
                                                       rib2113)
                                                     (values type2120
                                                       (binding-value286
                                                         b2119)
                                                       e2117 w2115
                                                       ae2114)))
                                                type2120))))
                                          (binding-type285 b2119)))
                                       (lookup305 n2118 r2116)))
                                    (id-var-name429 e2117 w2115))
                                  (if (pair? e2117)
                                      ((lambda (first2122)
                                         (if (id?310 first2122)
                                             ((lambda (n2123)
                                                ((lambda (b2124)
                                                   ((lambda (type2125)
                                                      ((lambda ()
                                                         ((lambda (t2126)
                                                            (if (memv
                                                                  t2126
                                                                  '(lexical))
                                                                (values
                                                                  'lexical-call
                                                                  (binding-value286
                                                                    b2124)
                                                                  e2117
                                                                  w2115
                                                                  ae2114)
                                                                (if (memv
                                                                      t2126
                                                                      '(macro
                                                                         macro!))
                                                                    (syntax-type441
                                                                      (chi-macro497
                                                                        (binding-value286
                                                                          b2124)
                                                                        e2117
                                                                        r2116
                                                                        w2115
                                                                        ae2114
                                                                        rib2113)
                                                                      r2116
                                                                      '(())
                                                                      '#f
                                                                      rib2113)
                                                                    (if (memv
                                                                          t2126
                                                                          '(core))
                                                                        (values
                                                                          type2125
                                                                          (binding-value286
                                                                            b2124)
                                                                          e2117
                                                                          w2115
                                                                          ae2114)
                                                                        (if (memv
                                                                              t2126
                                                                              '(begin))
                                                                            (values
                                                                              'begin-form
                                                                              '#f
                                                                              e2117
                                                                              w2115
                                                                              ae2114)
                                                                            (if (memv
                                                                                  t2126
                                                                                  '(alias))
                                                                                (values
                                                                                  'alias-form
                                                                                  '#f
                                                                                  e2117
                                                                                  w2115
                                                                                  ae2114)
                                                                                (if (memv
                                                                                      t2126
                                                                                      '(define))
                                                                                    (values
                                                                                      'define-form
                                                                                      '#f
                                                                                      e2117
                                                                                      w2115
                                                                                      ae2114)
                                                                                    (if (memv
                                                                                          t2126
                                                                                          '(define-syntax))
                                                                                        (values
                                                                                          'define-syntax-form
                                                                                          '#f
                                                                                          e2117
                                                                                          w2115
                                                                                          ae2114)
                                                                                        (if (memv
                                                                                              t2126
                                                                                              '(set!))
                                                                                            (chi-set!496
                                                                                              e2117
                                                                                              r2116
                                                                                              w2115
                                                                                              ae2114
                                                                                              rib2113)
                                                                                            (if (memv
                                                                                                  t2126
                                                                                                  '($module-key))
                                                                                                (values
                                                                                                  '$module-form
                                                                                                  '#f
                                                                                                  e2117
                                                                                                  w2115
                                                                                                  ae2114)
                                                                                                (if (memv
                                                                                                      t2126
                                                                                                      '($import))
                                                                                                    (values
                                                                                                      '$import-form
                                                                                                      '#f
                                                                                                      e2117
                                                                                                      w2115
                                                                                                      ae2114)
                                                                                                    (if (memv
                                                                                                          t2126
                                                                                                          '(eval-when))
                                                                                                        (values
                                                                                                          'eval-when-form
                                                                                                          '#f
                                                                                                          e2117
                                                                                                          w2115
                                                                                                          ae2114)
                                                                                                        (if (memv
                                                                                                              t2126
                                                                                                              '(meta))
                                                                                                            (values
                                                                                                              'meta-form
                                                                                                              '#f
                                                                                                              e2117
                                                                                                              w2115
                                                                                                              ae2114)
                                                                                                            (if (memv
                                                                                                                  t2126
                                                                                                                  '(local-syntax))
                                                                                                                (values
                                                                                                                  'local-syntax-form
                                                                                                                  (binding-value286
                                                                                                                    b2124)
                                                                                                                  e2117
                                                                                                                  w2115
                                                                                                                  ae2114)
                                                                                                                (values
                                                                                                                  'call
                                                                                                                  '#f
                                                                                                                  e2117
                                                                                                                  w2115
                                                                                                                  ae2114)))))))))))))))
                                                           type2125))))
                                                     (binding-type285
                                                       b2124)))
                                                  (lookup305 n2123 r2116)))
                                               (id-var-name429
                                                 first2122
                                                 w2115))
                                             (values 'call '#f e2117 w2115
                                               ae2114)))
                                        (car e2117))
                                      (if (syntax-object?64 e2117)
                                          (syntax-type441
                                            (syntax-object-expression65
                                              e2117)
                                            r2116
                                            (join-wraps417
                                              w2115
                                              (syntax-object-wrap66 e2117))
                                            '#f rib2113)
                                          (if (annotation?132 e2117)
                                              (syntax-type441
                                                (annotation-expression
                                                  e2117)
                                                r2116 w2115 e2117 rib2113)
                                              (if ((lambda (x2127)
                                                     ((lambda (t2128)
                                                        (if t2128
                                                            t2128
                                                            ((lambda (t2129)
                                                               (if t2129
                                                                   t2129
                                                                   ((lambda (t2130)
                                                                      (if t2130
                                                                          t2130
                                                                          ((lambda (t2131)
                                                                             (if t2131
                                                                                 t2131
                                                                                 (null?
                                                                                   x2127)))
                                                                            (char?
                                                                              x2127))))
                                                                     (string?
                                                                       x2127))))
                                                              (number?
                                                                x2127))))
                                                       (boolean? x2127)))
                                                    e2117)
                                                  (values 'constant '#f
                                                    e2117 w2115 ae2114)
                                                  (values 'other '#f e2117
                                                    w2115 ae2114))))))))
            (chi-top*442 (lambda (e2108 r2107 w2106 ctem2105 rtem2104
                                  meta?2103 top-ribcage2102)
                           ((lambda (meta-residuals2109)
                              (letrec ((meta-residualize!2110 (lambda (x2112)
                                                                (set! meta-residuals2109
                                                                  (cons
                                                                    x2112
                                                                    meta-residuals2109)))))
                                ((lambda (e2111)
                                   (build-sequence239
                                     '#f
                                     (reverse
                                       (cons e2111 meta-residuals2109))))
                                  (chi-top444 e2108 r2107 w2106 ctem2105
                                    rtem2104 meta?2103 top-ribcage2102
                                    meta-residualize!2110 '#f))))
                             '())))
            (chi-top-sequence443 (lambda (body2098 r2097 w2096 ae2095
                                          ctem2094 rtem2093 meta?2092
                                          ribcage2091
                                          meta-residualize!2090)
                                   (build-sequence239
                                     ae2095
                                     ((letrec ((dobody2099 (lambda (body2100)
                                                             (if (null?
                                                                   body2100)
                                                                 '()
                                                                 ((lambda (first2101)
                                                                    (cons
                                                                      first2101
                                                                      (dobody2099
                                                                        (cdr body2100))))
                                                                   (chi-top444
                                                                     (car body2100)
                                                                     r2097
                                                                     w2096
                                                                     ctem2094
                                                                     rtem2093
                                                                     meta?2092
                                                                     ribcage2091
                                                                     meta-residualize!2090
                                                                     '#f))))))
                                        dobody2099)
                                       body2098))))
            (chi-top444 (lambda (e2035 r2034 w2033 ctem2032 rtem2031
                                 meta?2030 top-ribcage2029
                                 meta-residualize!2028 meta-seen?2027)
                          (call-with-values
                            (lambda ()
                              (syntax-type441 e2035 r2034 w2033 '#f
                                top-ribcage2029))
                            (lambda (type2040 value2039 e2038 w2037 ae2036)
                              ((lambda (t2041)
                                 (if (memv t2041 '(begin-form))
                                     ((lambda (forms2042)
                                        (if (null? forms2042)
                                            (chi-void513)
                                            (chi-top-sequence443 forms2042
                                              r2034 w2037 ae2036 ctem2032
                                              rtem2031 meta?2030
                                              top-ribcage2029
                                              meta-residualize!2028)))
                                       (parse-begin510
                                         e2038
                                         w2037
                                         ae2036
                                         '#t))
                                     (if (memv t2041 '(local-syntax-form))
                                         (call-with-values
                                           (lambda ()
                                             (chi-local-syntax512 value2039
                                               e2038 r2034 r2034 w2037
                                               ae2036))
                                           (lambda (forms2047 r2046 mr2045
                                                    w2044 ae2043)
                                             (chi-top-sequence443 forms2047
                                               r2046 w2044 ae2043 ctem2032
                                               rtem2031 meta?2030
                                               top-ribcage2029
                                               meta-residualize!2028)))
                                         (if (memv t2041 '(eval-when-form))
                                             (call-with-values
                                               (lambda ()
                                                 (parse-eval-when508
                                                   e2038
                                                   w2037
                                                   ae2036))
                                               (lambda (when-list2049
                                                        forms2048)
                                                 ((lambda (ctem2051
                                                           rtem2050)
                                                    (if (if (null?
                                                              ctem2051)
                                                            (null?
                                                              rtem2050)
                                                            '#f)
                                                        (chi-void513)
                                                        (chi-top-sequence443
                                                          forms2048 r2034
                                                          w2037 ae2036
                                                          ctem2051 rtem2050
                                                          meta?2030
                                                          top-ribcage2029
                                                          meta-residualize!2028)))
                                                   (update-mode-set485
                                                     when-list2049
                                                     ctem2032)
                                                   (update-mode-set485
                                                     when-list2049
                                                     rtem2031))))
                                             (if (memv t2041 '(meta-form))
                                                 (chi-top444
                                                   (parse-meta507
                                                     e2038
                                                     w2037
                                                     ae2036)
                                                   r2034 w2037 ctem2032
                                                   rtem2031 '#t
                                                   top-ribcage2029
                                                   meta-residualize!2028
                                                   '#t)
                                                 (if (memv
                                                       t2041
                                                       '(define-syntax-form))
                                                     (call-with-values
                                                       (lambda ()
                                                         (parse-define-syntax506
                                                           e2038
                                                           w2037
                                                           ae2036))
                                                       (lambda (id2054
                                                                rhs2053
                                                                w2052)
                                                         ((lambda (id2055)
                                                            (begin
                                                              (if (displaced-lexical?302
                                                                    id2055
                                                                    r2034)
                                                                  (displaced-lexical-error303
                                                                    id2055)
                                                                  (void))
                                                              (if (not (top-ribcage-mutable?371
                                                                         top-ribcage2029))
                                                                  (syntax-error
                                                                    (source-wrap439
                                                                      e2038
                                                                      w2052
                                                                      ae2036)
                                                                    '"invalid definition in read-only environment")
                                                                  (void))
                                                              ((lambda (sym2056)
                                                                 (call-with-values
                                                                   (lambda ()
                                                                     (top-id-bound-var-name424
                                                                       sym2056
                                                                       (wrap-marks320
                                                                         (syntax-object-wrap66
                                                                           id2055))
                                                                       top-ribcage2029))
                                                                   (lambda (valsym2058
                                                                            bound-id2057)
                                                                     (begin
                                                                       (if (not (eq? (id-var-name429
                                                                                       id2055
                                                                                       '(()))
                                                                                     valsym2058))
                                                                           (syntax-error
                                                                             (source-wrap439
                                                                               e2038
                                                                               w2052
                                                                               ae2036)
                                                                             '"definition not permitted")
                                                                           (void))
                                                                       (if (read-only-binding?144
                                                                             valsym2058)
                                                                           (syntax-error
                                                                             (source-wrap439
                                                                               e2038
                                                                               w2052
                                                                               ae2036)
                                                                             '"invalid definition of read-only identifier")
                                                                           (void))
                                                                       (ct-eval/residualize2488
                                                                         ctem2032
                                                                         (lambda ()
                                                                           (list
                                                                             '$sc-put-cte
                                                                             (list
                                                                               'quote
                                                                               bound-id2057)
                                                                             (chi493
                                                                               rhs2053
                                                                               r2034
                                                                               r2034
                                                                               w2052
                                                                               '#t)
                                                                             (list
                                                                               'quote
                                                                               (top-ribcage-key370
                                                                                 top-ribcage2029)))))))))
                                                                ((lambda (x2059)
                                                                   ((lambda (e2060)
                                                                      (if (annotation?132
                                                                            e2060)
                                                                          (annotation-expression
                                                                            e2060)
                                                                          e2060))
                                                                     (if (syntax-object?64
                                                                           x2059)
                                                                         (syntax-object-expression65
                                                                           x2059)
                                                                         x2059)))
                                                                  id2055))))
                                                           (wrap438
                                                             id2054
                                                             w2052))))
                                                     (if (memv
                                                           t2041
                                                           '(define-form))
                                                         (call-with-values
                                                           (lambda ()
                                                             (parse-define505
                                                               e2038
                                                               w2037
                                                               ae2036))
                                                           (lambda (id2063
                                                                    rhs2062
                                                                    w2061)
                                                             ((lambda (id2064)
                                                                (begin
                                                                  (if (displaced-lexical?302
                                                                        id2064
                                                                        r2034)
                                                                      (displaced-lexical-error303
                                                                        id2064)
                                                                      (void))
                                                                  (if (not (top-ribcage-mutable?371
                                                                             top-ribcage2029))
                                                                      (syntax-error
                                                                        (source-wrap439
                                                                          e2038
                                                                          w2061
                                                                          ae2036)
                                                                        '"invalid definition in read-only environment")
                                                                      (void))
                                                                  ((lambda (sym2065)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (top-id-bound-var-name424
                                                                           sym2065
                                                                           (wrap-marks320
                                                                             (syntax-object-wrap66
                                                                               id2064))
                                                                           top-ribcage2029))
                                                                       (lambda (valsym2067
                                                                                bound-id2066)
                                                                         (begin
                                                                           (if (not (eq? (id-var-name429
                                                                                           id2064
                                                                                           '(()))
                                                                                         valsym2067))
                                                                               (syntax-error
                                                                                 (source-wrap439
                                                                                   e2038
                                                                                   w2061
                                                                                   ae2036)
                                                                                 '"definition not permitted")
                                                                               (void))
                                                                           (if (read-only-binding?144
                                                                                 valsym2067)
                                                                               (syntax-error
                                                                                 (source-wrap439
                                                                                   e2038
                                                                                   w2061
                                                                                   ae2036)
                                                                                 '"invalid definition of read-only identifier")
                                                                               (void))
                                                                           (if meta?2030
                                                                               (ct-eval/residualize2488
                                                                                 ctem2032
                                                                                 (lambda ()
                                                                                   (build-sequence239
                                                                                     '#f
                                                                                     (list
                                                                                       (list
                                                                                         '$sc-put-cte
                                                                                         (list
                                                                                           'quote
                                                                                           bound-id2066)
                                                                                         (list
                                                                                           'quote
                                                                                           (cons
                                                                                             'meta-variable
                                                                                             valsym2067))
                                                                                         (list
                                                                                           'quote
                                                                                           (top-ribcage-key370
                                                                                             top-ribcage2029)))
                                                                                       (list
                                                                                         'define
                                                                                         valsym2067
                                                                                         (chi493
                                                                                           rhs2062
                                                                                           r2034
                                                                                           r2034
                                                                                           w2061
                                                                                           '#t))))))
                                                                               ((lambda (x2068)
                                                                                  (build-sequence239
                                                                                    '#f
                                                                                    (list
                                                                                      x2068
                                                                                      (rt-eval/residualize487
                                                                                        rtem2031
                                                                                        (lambda ()
                                                                                          (list
                                                                                            'define
                                                                                            valsym2067
                                                                                            (chi493
                                                                                              rhs2062
                                                                                              r2034
                                                                                              r2034
                                                                                              w2061
                                                                                              '#f)))))))
                                                                                 (ct-eval/residualize2488
                                                                                   ctem2032
                                                                                   (lambda ()
                                                                                     (list
                                                                                       '$sc-put-cte
                                                                                       (list
                                                                                         'quote
                                                                                         bound-id2066)
                                                                                       (list
                                                                                         'quote
                                                                                         (cons
                                                                                           'global
                                                                                           valsym2067))
                                                                                       (list
                                                                                         'quote
                                                                                         (top-ribcage-key370
                                                                                           top-ribcage2029)))))))))))
                                                                    ((lambda (x2069)
                                                                       ((lambda (e2070)
                                                                          (if (annotation?132
                                                                                e2070)
                                                                              (annotation-expression
                                                                                e2070)
                                                                              e2070))
                                                                         (if (syntax-object?64
                                                                               x2069)
                                                                             (syntax-object-expression65
                                                                               x2069)
                                                                             x2069)))
                                                                      id2064))))
                                                               (wrap438
                                                                 id2063
                                                                 w2061))))
                                                         (if (memv
                                                               t2041
                                                               '($module-form))
                                                             ((lambda (ribcage2071)
                                                                (call-with-values
                                                                  (lambda ()
                                                                    (parse-module503
                                                                      e2038
                                                                      w2037
                                                                      ae2036
                                                                      (make-wrap319
                                                                        (wrap-marks320
                                                                          w2037)
                                                                        (cons
                                                                          ribcage2071
                                                                          (wrap-subst321
                                                                            w2037)))))
                                                                  (lambda (orig2075
                                                                           id2074
                                                                           exports2073
                                                                           forms2072)
                                                                    (begin
                                                                      (if (displaced-lexical?302
                                                                            id2074
                                                                            r2034)
                                                                          (displaced-lexical-error303
                                                                            (wrap438
                                                                              id2074
                                                                              w2037))
                                                                          (void))
                                                                      (if (not (top-ribcage-mutable?371
                                                                                 top-ribcage2029))
                                                                          (syntax-error
                                                                            orig2075
                                                                            '"invalid definition in read-only environment")
                                                                          (void))
                                                                      (chi-top-module477
                                                                        orig2075
                                                                        r2034
                                                                        r2034
                                                                        top-ribcage2029
                                                                        ribcage2071
                                                                        ctem2032
                                                                        rtem2031
                                                                        meta?2030
                                                                        id2074
                                                                        exports2073
                                                                        forms2072
                                                                        meta-residualize!2028)))))
                                                               (make-ribcage360
                                                                 '()
                                                                 '()
                                                                 '()))
                                                             (if (memv
                                                                   t2041
                                                                   '($import-form))
                                                                 (call-with-values
                                                                   (lambda ()
                                                                     (parse-import504
                                                                       e2038
                                                                       w2037
                                                                       ae2036))
                                                                   (lambda (orig2078
                                                                            only?2077
                                                                            mid2076)
                                                                     (begin
                                                                       (if (not (top-ribcage-mutable?371
                                                                                  top-ribcage2029))
                                                                           (syntax-error
                                                                             orig2078
                                                                             '"invalid definition in read-only environment")
                                                                           (void))
                                                                       (ct-eval/residualize2488
                                                                         ctem2032
                                                                         (lambda ()
                                                                           ((lambda (binding2079)
                                                                              ((lambda (t2080)
                                                                                 (if (memv
                                                                                       t2080
                                                                                       '($module))
                                                                                     (do-top-import484
                                                                                       only?2077
                                                                                       top-ribcage2029
                                                                                       mid2076
                                                                                       (interface-token450
                                                                                         (binding-value286
                                                                                           binding2079)))
                                                                                     (if (memv
                                                                                           t2080
                                                                                           '(displaced-lexical))
                                                                                         (displaced-lexical-error303
                                                                                           mid2076)
                                                                                         (syntax-error
                                                                                           mid2076
                                                                                           '"unknown module"))))
                                                                                (binding-type285
                                                                                  binding2079)))
                                                                             (lookup305
                                                                               (id-var-name429
                                                                                 mid2076
                                                                                 '(()))
                                                                               '())))))))
                                                                 (if (memv
                                                                       t2041
                                                                       '(alias-form))
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (parse-alias509
                                                                           e2038
                                                                           w2037
                                                                           ae2036))
                                                                       (lambda (new-id2082
                                                                                old-id2081)
                                                                         ((lambda (new-id2083)
                                                                            (begin
                                                                              (if (displaced-lexical?302
                                                                                    new-id2083
                                                                                    r2034)
                                                                                  (displaced-lexical-error303
                                                                                    new-id2083)
                                                                                  (void))
                                                                              (if (not (top-ribcage-mutable?371
                                                                                         top-ribcage2029))
                                                                                  (syntax-error
                                                                                    (source-wrap439
                                                                                      e2038
                                                                                      w2037
                                                                                      ae2036)
                                                                                    '"invalid definition in read-only environment")
                                                                                  (void))
                                                                              ((lambda (sym2084)
                                                                                 (call-with-values
                                                                                   (lambda ()
                                                                                     (top-id-bound-var-name424
                                                                                       sym2084
                                                                                       (wrap-marks320
                                                                                         (syntax-object-wrap66
                                                                                           new-id2083))
                                                                                       top-ribcage2029))
                                                                                   (lambda (valsym2086
                                                                                            bound-id2085)
                                                                                     (begin
                                                                                       (if (not (eq? (id-var-name429
                                                                                                       new-id2083
                                                                                                       '(()))
                                                                                                     valsym2086))
                                                                                           (syntax-error
                                                                                             (source-wrap439
                                                                                               e2038
                                                                                               w2037
                                                                                               ae2036)
                                                                                             '"definition not permitted")
                                                                                           (void))
                                                                                       (if (read-only-binding?144
                                                                                             valsym2086)
                                                                                           (syntax-error
                                                                                             (source-wrap439
                                                                                               e2038
                                                                                               w2037
                                                                                               ae2036)
                                                                                             '"invalid definition of read-only identifier")
                                                                                           (void))
                                                                                       (ct-eval/residualize2488
                                                                                         ctem2032
                                                                                         (lambda ()
                                                                                           (list
                                                                                             '$sc-put-cte
                                                                                             (list
                                                                                               'quote
                                                                                               (make-resolved-id413
                                                                                                 sym2084
                                                                                                 (wrap-marks320
                                                                                                   (syntax-object-wrap66
                                                                                                     new-id2083))
                                                                                                 (id-var-name429
                                                                                                   old-id2081
                                                                                                   w2037)))
                                                                                             (list
                                                                                               'quote
                                                                                               '(do-alias
                                                                                                  .
                                                                                                  #f))
                                                                                             (list
                                                                                               'quote
                                                                                               (top-ribcage-key370
                                                                                                 top-ribcage2029)))))))))
                                                                                ((lambda (x2087)
                                                                                   ((lambda (e2088)
                                                                                      (if (annotation?132
                                                                                            e2088)
                                                                                          (annotation-expression
                                                                                            e2088)
                                                                                          e2088))
                                                                                     (if (syntax-object?64
                                                                                           x2087)
                                                                                         (syntax-object-expression65
                                                                                           x2087)
                                                                                         x2087)))
                                                                                  new-id2083))))
                                                                           (wrap438
                                                                             new-id2082
                                                                             w2037))))
                                                                     (begin
                                                                       (if meta-seen?2027
                                                                           (syntax-error
                                                                             (source-wrap439
                                                                               e2038
                                                                               w2037
                                                                               ae2036)
                                                                             '"invalid meta definition")
                                                                           (void))
                                                                       (if meta?2030
                                                                           ((lambda (x2089)
                                                                              (begin
                                                                                (top-level-eval-hook133
                                                                                  x2089)
                                                                                (ct-eval/residualize3489
                                                                                  ctem2032
                                                                                  void
                                                                                  (lambda ()
                                                                                    x2089))))
                                                                             (chi-expr494
                                                                               type2040
                                                                               value2039
                                                                               e2038
                                                                               r2034
                                                                               r2034
                                                                               w2037
                                                                               ae2036
                                                                               '#t))
                                                                           (rt-eval/residualize487
                                                                             rtem2031
                                                                             (lambda ()
                                                                               (chi-expr494
                                                                                 type2040
                                                                                 value2039
                                                                                 e2038
                                                                                 r2034
                                                                                 r2034
                                                                                 w2037
                                                                                 ae2036
                                                                                 '#f)))))))))))))))
                                type2040)))))
            (flatten-exports445 (lambda (exports2023)
                                  ((letrec ((loop2024 (lambda (exports2026
                                                               ls2025)
                                                        (if (null?
                                                              exports2026)
                                                            ls2025
                                                            (loop2024
                                                              (cdr exports2026)
                                                              (if (pair?
                                                                    (car exports2026))
                                                                  (loop2024
                                                                    (car exports2026)
                                                                    ls2025)
                                                                  (cons
                                                                    (car exports2026)
                                                                    ls2025)))))))
                                     loop2024)
                                    exports2023
                                    '())))
            (make-interface446 (lambda (marks2022 exports2021 token2020)
                                 (vector
                                   'interface
                                   marks2022
                                   exports2021
                                   token2020)))
            (interface?447 (lambda (x2019)
                             (if (vector? x2019)
                                 (if (= (vector-length x2019) '4)
                                     (eq? (vector-ref x2019 '0) 'interface)
                                     '#f)
                                 '#f)))
            (interface-marks448 (lambda (x2018) (vector-ref x2018 '1)))
            (interface-exports449 (lambda (x2017)
                                    (vector-ref x2017 '2)))
            (interface-token450 (lambda (x2016) (vector-ref x2016 '3)))
            (set-interface-marks!451 (lambda (x2015 update2014)
                                       (vector-set! x2015 '1 update2014)))
            (set-interface-exports!452 (lambda (x2013 update2012)
                                         (vector-set!
                                           x2013
                                           '2
                                           update2012)))
            (set-interface-token!453 (lambda (x2011 update2010)
                                       (vector-set! x2011 '3 update2010)))
            (make-unresolved-interface454 (lambda (mid2008 exports2007)
                                            (make-interface446
                                              (wrap-marks320
                                                (syntax-object-wrap66
                                                  mid2008))
                                              (list->vector
                                                (map (lambda (x2009)
                                                       (if (pair? x2009)
                                                           (car x2009)
                                                           x2009))
                                                     exports2007))
                                              '#f)))
            (make-resolved-interface455 (lambda (mid2005 exports2004
                                                 token2003)
                                          (make-interface446
                                            (wrap-marks320
                                              (syntax-object-wrap66
                                                mid2005))
                                            (list->vector
                                              (map (lambda (x2006)
                                                     (id->resolved-id414
                                                       (if (pair? x2006)
                                                           (car x2006)
                                                           x2006)))
                                                   exports2004))
                                            token2003)))
            (make-module-binding456 (lambda (type2002 id2001 label2000
                                             imps1999 val1998 exported1997)
                                      (vector 'module-binding type2002
                                        id2001 label2000 imps1999 val1998
                                        exported1997)))
            (module-binding?457 (lambda (x1996)
                                  (if (vector? x1996)
                                      (if (= (vector-length x1996) '7)
                                          (eq? (vector-ref x1996 '0)
                                               'module-binding)
                                          '#f)
                                      '#f)))
            (module-binding-type458 (lambda (x1995)
                                      (vector-ref x1995 '1)))
            (module-binding-id459 (lambda (x1994)
                                    (vector-ref x1994 '2)))
            (module-binding-label460 (lambda (x1993)
                                       (vector-ref x1993 '3)))
            (module-binding-imps461 (lambda (x1992)
                                      (vector-ref x1992 '4)))
            (module-binding-val462 (lambda (x1991)
                                     (vector-ref x1991 '5)))
            (module-binding-exported463 (lambda (x1990)
                                          (vector-ref x1990 '6)))
            (set-module-binding-type!464 (lambda (x1989 update1988)
                                           (vector-set!
                                             x1989
                                             '1
                                             update1988)))
            (set-module-binding-id!465 (lambda (x1987 update1986)
                                         (vector-set!
                                           x1987
                                           '2
                                           update1986)))
            (set-module-binding-label!466 (lambda (x1985 update1984)
                                            (vector-set!
                                              x1985
                                              '3
                                              update1984)))
            (set-module-binding-imps!467 (lambda (x1983 update1982)
                                           (vector-set!
                                             x1983
                                             '4
                                             update1982)))
            (set-module-binding-val!468 (lambda (x1981 update1980)
                                          (vector-set!
                                            x1981
                                            '5
                                            update1980)))
            (set-module-binding-exported!469 (lambda (x1979 update1978)
                                               (vector-set!
                                                 x1979
                                                 '6
                                                 update1978)))
            (create-module-binding470 (lambda (type1977 id1976 label1975
                                               imps1974 val1973)
                                        (make-module-binding456 type1977
                                          id1976 label1975 imps1974 val1973
                                          '#f)))
            (make-frob471 (lambda (e1972 meta?1971)
                            (vector 'frob e1972 meta?1971)))
            (frob?472 (lambda (x1970)
                        (if (vector? x1970)
                            (if (= (vector-length x1970) '3)
                                (eq? (vector-ref x1970 '0) 'frob)
                                '#f)
                            '#f)))
            (frob-e473 (lambda (x1969) (vector-ref x1969 '1)))
            (frob-meta?474 (lambda (x1968) (vector-ref x1968 '2)))
            (set-frob-e!475 (lambda (x1967 update1966)
                              (vector-set! x1967 '1 update1966)))
            (set-frob-meta?!476 (lambda (x1965 update1964)
                                  (vector-set! x1965 '2 update1964)))
            (chi-top-module477 (lambda (orig1905 r1904 mr1903
                                        top-ribcage1902 ribcage1901
                                        ctem1900 rtem1899 meta?1898 id1897
                                        exports1896 forms1895
                                        meta-residualize!1894)
                                 ((lambda (fexports1906)
                                    (call-with-values
                                      (lambda ()
                                        (chi-external481 ribcage1901
                                          orig1905
                                          (map (lambda (d1963)
                                                 (make-frob471
                                                   d1963
                                                   meta?1898))
                                               forms1895)
                                          r1904 mr1903 ctem1900 exports1896
                                          fexports1906
                                          meta-residualize!1894))
                                      (lambda (r1910 mr1909 bindings1908
                                               inits1907)
                                        ((letrec ((process-exports1911 (lambda (fexports1913
                                                                                ctdefs1912)
                                                                         (if (null?
                                                                               fexports1913)
                                                                             ((letrec ((process-locals1914 (lambda (bs1919
                                                                                                                    r1918
                                                                                                                    dts1917
                                                                                                                    dvs1916
                                                                                                                    des1915)
                                                                                                             (if (null?
                                                                                                                   bs1919)
                                                                                                                 ((lambda (des1921
                                                                                                                           inits1920)
                                                                                                                    (build-sequence239
                                                                                                                      '#f
                                                                                                                      (append
                                                                                                                        (ctdefs1912)
                                                                                                                        (list
                                                                                                                          (ct-eval/residualize2488
                                                                                                                            ctem1900
                                                                                                                            (lambda ()
                                                                                                                              ((lambda (sym1922)
                                                                                                                                 ((lambda (token1923)
                                                                                                                                    ((lambda (b1924)
                                                                                                                                       ((lambda ()
                                                                                                                                          (call-with-values
                                                                                                                                            (lambda ()
                                                                                                                                              (top-id-bound-var-name424
                                                                                                                                                sym1922
                                                                                                                                                (wrap-marks320
                                                                                                                                                  (syntax-object-wrap66
                                                                                                                                                    id1897))
                                                                                                                                                top-ribcage1902))
                                                                                                                                            (lambda (valsym1926
                                                                                                                                                     bound-id1925)
                                                                                                                                              (begin
                                                                                                                                                (if (not (eq? (id-var-name429
                                                                                                                                                                id1897
                                                                                                                                                                '(()))
                                                                                                                                                              valsym1926))
                                                                                                                                                    (syntax-error
                                                                                                                                                      orig1905
                                                                                                                                                      '"definition not permitted")
                                                                                                                                                    (void))
                                                                                                                                                (if (read-only-binding?144
                                                                                                                                                      valsym1926)
                                                                                                                                                    (syntax-error
                                                                                                                                                      orig1905
                                                                                                                                                      '"invalid definition of read-only identifier")
                                                                                                                                                    (void))
                                                                                                                                                (list
                                                                                                                                                  '$sc-put-cte
                                                                                                                                                  (list
                                                                                                                                                    'quote
                                                                                                                                                    bound-id1925)
                                                                                                                                                  b1924
                                                                                                                                                  (list
                                                                                                                                                    'quote
                                                                                                                                                    (top-ribcage-key370
                                                                                                                                                      top-ribcage1902)))))))))
                                                                                                                                      (list
                                                                                                                                        'quote
                                                                                                                                        (cons
                                                                                                                                          '$module
                                                                                                                                          (make-resolved-interface455
                                                                                                                                            id1897
                                                                                                                                            exports1896
                                                                                                                                            token1923)))))
                                                                                                                                   (generate-id147
                                                                                                                                     sym1922)))
                                                                                                                                ((lambda (x1927)
                                                                                                                                   ((lambda (e1928)
                                                                                                                                      (if (annotation?132
                                                                                                                                            e1928)
                                                                                                                                          (annotation-expression
                                                                                                                                            e1928)
                                                                                                                                          e1928))
                                                                                                                                     (if (syntax-object?64
                                                                                                                                           x1927)
                                                                                                                                         (syntax-object-expression65
                                                                                                                                           x1927)
                                                                                                                                         x1927)))
                                                                                                                                  id1897))))
                                                                                                                          (rt-eval/residualize487
                                                                                                                            rtem1899
                                                                                                                            (lambda ()
                                                                                                                              (build-top-module242
                                                                                                                                '#f
                                                                                                                                dts1917
                                                                                                                                dvs1916
                                                                                                                                des1921
                                                                                                                                (if (null?
                                                                                                                                      inits1920)
                                                                                                                                    (chi-void513)
                                                                                                                                    (build-sequence239
                                                                                                                                      '#f
                                                                                                                                      (append
                                                                                                                                        inits1920
                                                                                                                                        (list
                                                                                                                                          (chi-void513))))))))))))
                                                                                                                   (chi-frobs490
                                                                                                                     des1915
                                                                                                                     r1918
                                                                                                                     mr1909
                                                                                                                     '#f)
                                                                                                                   (chi-frobs490
                                                                                                                     inits1907
                                                                                                                     r1918
                                                                                                                     mr1909
                                                                                                                     '#f))
                                                                                                                 ((lambda (b1930
                                                                                                                           bs1929)
                                                                                                                    ((lambda (t1931)
                                                                                                                       ((lambda (t1932)
                                                                                                                          (if (memv
                                                                                                                                t1932
                                                                                                                                '(define-form))
                                                                                                                              ((lambda (label1933)
                                                                                                                                 (if (module-binding-exported463
                                                                                                                                       b1930)
                                                                                                                                     ((lambda (var1934)
                                                                                                                                        (process-locals1914
                                                                                                                                          bs1929
                                                                                                                                          r1918
                                                                                                                                          (cons
                                                                                                                                            'global
                                                                                                                                            dts1917)
                                                                                                                                          (cons
                                                                                                                                            label1933
                                                                                                                                            dvs1916)
                                                                                                                                          (cons
                                                                                                                                            (module-binding-val462
                                                                                                                                              b1930)
                                                                                                                                            des1915)))
                                                                                                                                       (module-binding-id459
                                                                                                                                         b1930))
                                                                                                                                     ((lambda (var1935)
                                                                                                                                        (process-locals1914
                                                                                                                                          bs1929
                                                                                                                                          (extend-env299
                                                                                                                                            label1933
                                                                                                                                            (cons
                                                                                                                                              'lexical
                                                                                                                                              var1935)
                                                                                                                                            r1918)
                                                                                                                                          (cons
                                                                                                                                            'local
                                                                                                                                            dts1917)
                                                                                                                                          (cons
                                                                                                                                            var1935
                                                                                                                                            dvs1916)
                                                                                                                                          (cons
                                                                                                                                            (module-binding-val462
                                                                                                                                              b1930)
                                                                                                                                            des1915)))
                                                                                                                                       (gen-var518
                                                                                                                                         (module-binding-id459
                                                                                                                                           b1930)))))
                                                                                                                                (get-indirect-label355
                                                                                                                                  (module-binding-label460
                                                                                                                                    b1930)))
                                                                                                                              (if (memv
                                                                                                                                    t1932
                                                                                                                                    '(ctdefine-form
                                                                                                                                       define-syntax-form
                                                                                                                                       $module-form
                                                                                                                                       alias-form))
                                                                                                                                  (process-locals1914
                                                                                                                                    bs1929
                                                                                                                                    r1918
                                                                                                                                    dts1917
                                                                                                                                    dvs1916
                                                                                                                                    des1915)
                                                                                                                                  (error 'sc-expand-internal
                                                                                                                                    '"unexpected module binding type ~s"
                                                                                                                                    t1931))))
                                                                                                                         (module-binding-type458
                                                                                                                           b1930)))
                                                                                                                      (module-binding-type458
                                                                                                                        b1930)))
                                                                                                                   (car bs1919)
                                                                                                                   (cdr bs1919))))))
                                                                                process-locals1914)
                                                                               bindings1908
                                                                               r1910
                                                                               '()
                                                                               '()
                                                                               '())
                                                                             ((lambda (id1937
                                                                                       fexports1936)
                                                                                ((letrec ((loop1938 (lambda (bs1939)
                                                                                                      (if (null?
                                                                                                            bs1939)
                                                                                                          (process-exports1911
                                                                                                            fexports1936
                                                                                                            ctdefs1912)
                                                                                                          ((lambda (b1941
                                                                                                                    bs1940)
                                                                                                             (if (free-id=?430
                                                                                                                   (module-binding-id459
                                                                                                                     b1941)
                                                                                                                   id1937)
                                                                                                                 (if (module-binding-exported463
                                                                                                                       b1941)
                                                                                                                     (process-exports1911
                                                                                                                       fexports1936
                                                                                                                       ctdefs1912)
                                                                                                                     ((lambda (t1942)
                                                                                                                        ((lambda (label1943)
                                                                                                                           ((lambda (imps1944)
                                                                                                                              ((lambda (fexports1945)
                                                                                                                                 ((lambda ()
                                                                                                                                    (begin
                                                                                                                                      (set-module-binding-exported!469
                                                                                                                                        b1941
                                                                                                                                        '#t)
                                                                                                                                      ((lambda (t1946)
                                                                                                                                         (if (memv
                                                                                                                                               t1946
                                                                                                                                               '(define-form))
                                                                                                                                             ((lambda (sym1947)
                                                                                                                                                (begin
                                                                                                                                                  (set-indirect-label!356
                                                                                                                                                    label1943
                                                                                                                                                    sym1947)
                                                                                                                                                  (process-exports1911
                                                                                                                                                    fexports1945
                                                                                                                                                    ctdefs1912)))
                                                                                                                                               (generate-id147
                                                                                                                                                 ((lambda (x1948)
                                                                                                                                                    ((lambda (e1949)
                                                                                                                                                       (if (annotation?132
                                                                                                                                                             e1949)
                                                                                                                                                           (annotation-expression
                                                                                                                                                             e1949)
                                                                                                                                                           e1949))
                                                                                                                                                      (if (syntax-object?64
                                                                                                                                                            x1948)
                                                                                                                                                          (syntax-object-expression65
                                                                                                                                                            x1948)
                                                                                                                                                          x1948)))
                                                                                                                                                   id1937)))
                                                                                                                                             (if (memv
                                                                                                                                                   t1946
                                                                                                                                                   '(ctdefine-form))
                                                                                                                                                 ((lambda (b1950)
                                                                                                                                                    (process-exports1911
                                                                                                                                                      fexports1945
                                                                                                                                                      (lambda ()
                                                                                                                                                        ((lambda (sym1951)
                                                                                                                                                           (begin
                                                                                                                                                             (set-indirect-label!356
                                                                                                                                                               label1943
                                                                                                                                                               sym1951)
                                                                                                                                                             (cons
                                                                                                                                                               (ct-eval/residualize3489
                                                                                                                                                                 ctem1900
                                                                                                                                                                 (lambda ()
                                                                                                                                                                   (put-cte-hook141
                                                                                                                                                                     sym1951
                                                                                                                                                                     b1950))
                                                                                                                                                                 (lambda ()
                                                                                                                                                                   (list
                                                                                                                                                                     '$sc-put-cte
                                                                                                                                                                     (list
                                                                                                                                                                       'quote
                                                                                                                                                                       sym1951)
                                                                                                                                                                     (list
                                                                                                                                                                       'quote
                                                                                                                                                                       b1950)
                                                                                                                                                                     (list
                                                                                                                                                                       'quote
                                                                                                                                                                       '#f))))
                                                                                                                                                               (ctdefs1912))))
                                                                                                                                                          (binding-value286
                                                                                                                                                            b1950)))))
                                                                                                                                                   (module-binding-val462
                                                                                                                                                     b1941))
                                                                                                                                                 (if (memv
                                                                                                                                                       t1946
                                                                                                                                                       '(define-syntax-form))
                                                                                                                                                     ((lambda (sym1952)
                                                                                                                                                        (process-exports1911
                                                                                                                                                          fexports1945
                                                                                                                                                          (lambda ()
                                                                                                                                                            ((lambda (local-label1953)
                                                                                                                                                               (begin
                                                                                                                                                                 (set-indirect-label!356
                                                                                                                                                                   label1943
                                                                                                                                                                   sym1952)
                                                                                                                                                                 (cons
                                                                                                                                                                   (ct-eval/residualize3489
                                                                                                                                                                     ctem1900
                                                                                                                                                                     (lambda ()
                                                                                                                                                                       (put-cte-hook141
                                                                                                                                                                         sym1952
                                                                                                                                                                         (car (module-binding-val462
                                                                                                                                                                                b1941))))
                                                                                                                                                                     (lambda ()
                                                                                                                                                                       (list
                                                                                                                                                                         '$sc-put-cte
                                                                                                                                                                         (list
                                                                                                                                                                           'quote
                                                                                                                                                                           sym1952)
                                                                                                                                                                         (cdr (module-binding-val462
                                                                                                                                                                                b1941))
                                                                                                                                                                         (list
                                                                                                                                                                           'quote
                                                                                                                                                                           '#f))))
                                                                                                                                                                   (ctdefs1912))))
                                                                                                                                                              (get-indirect-label355
                                                                                                                                                                label1943)))))
                                                                                                                                                       (generate-id147
                                                                                                                                                         ((lambda (x1954)
                                                                                                                                                            ((lambda (e1955)
                                                                                                                                                               (if (annotation?132
                                                                                                                                                                     e1955)
                                                                                                                                                                   (annotation-expression
                                                                                                                                                                     e1955)
                                                                                                                                                                   e1955))
                                                                                                                                                              (if (syntax-object?64
                                                                                                                                                                    x1954)
                                                                                                                                                                  (syntax-object-expression65
                                                                                                                                                                    x1954)
                                                                                                                                                                  x1954)))
                                                                                                                                                           id1937)))
                                                                                                                                                     (if (memv
                                                                                                                                                           t1946
                                                                                                                                                           '($module-form))
                                                                                                                                                         ((lambda (sym1957
                                                                                                                                                                   exports1956)
                                                                                                                                                            (process-exports1911
                                                                                                                                                              (append
                                                                                                                                                                (flatten-exports445
                                                                                                                                                                  exports1956)
                                                                                                                                                                fexports1945)
                                                                                                                                                              (lambda ()
                                                                                                                                                                (begin
                                                                                                                                                                  (set-indirect-label!356
                                                                                                                                                                    label1943
                                                                                                                                                                    sym1957)
                                                                                                                                                                  ((lambda (rest1958)
                                                                                                                                                                     ((lambda (x1959)
                                                                                                                                                                        (cons
                                                                                                                                                                          (ct-eval/residualize3489
                                                                                                                                                                            ctem1900
                                                                                                                                                                            (lambda ()
                                                                                                                                                                              (put-cte-hook141
                                                                                                                                                                                sym1957
                                                                                                                                                                                x1959))
                                                                                                                                                                            (lambda ()
                                                                                                                                                                              (list
                                                                                                                                                                                '$sc-put-cte
                                                                                                                                                                                (list
                                                                                                                                                                                  'quote
                                                                                                                                                                                  sym1957)
                                                                                                                                                                                (list
                                                                                                                                                                                  'quote
                                                                                                                                                                                  x1959)
                                                                                                                                                                                (list
                                                                                                                                                                                  'quote
                                                                                                                                                                                  '#f))))
                                                                                                                                                                          rest1958))
                                                                                                                                                                       (cons
                                                                                                                                                                         '$module
                                                                                                                                                                         (make-resolved-interface455
                                                                                                                                                                           id1937
                                                                                                                                                                           exports1956
                                                                                                                                                                           sym1957))))
                                                                                                                                                                    (ctdefs1912))))))
                                                                                                                                                           (generate-id147
                                                                                                                                                             ((lambda (x1960)
                                                                                                                                                                ((lambda (e1961)
                                                                                                                                                                   (if (annotation?132
                                                                                                                                                                         e1961)
                                                                                                                                                                       (annotation-expression
                                                                                                                                                                         e1961)
                                                                                                                                                                       e1961))
                                                                                                                                                                  (if (syntax-object?64
                                                                                                                                                                        x1960)
                                                                                                                                                                      (syntax-object-expression65
                                                                                                                                                                        x1960)
                                                                                                                                                                      x1960)))
                                                                                                                                                               id1937))
                                                                                                                                                           (module-binding-val462
                                                                                                                                                             b1941))
                                                                                                                                                         (if (memv
                                                                                                                                                               t1946
                                                                                                                                                               '(alias-form))
                                                                                                                                                             (process-exports1911
                                                                                                                                                               fexports1945
                                                                                                                                                               (lambda ()
                                                                                                                                                                 ((lambda (rest1962)
                                                                                                                                                                    (begin
                                                                                                                                                                      (if (indirect-label?351
                                                                                                                                                                            label1943)
                                                                                                                                                                          (if (not (symbol?
                                                                                                                                                                                     (get-indirect-label355
                                                                                                                                                                                       label1943)))
                                                                                                                                                                              (syntax-error
                                                                                                                                                                                (module-binding-id459
                                                                                                                                                                                  b1941)
                                                                                                                                                                                '"unexported target of alias")
                                                                                                                                                                              (void))
                                                                                                                                                                          (void))
                                                                                                                                                                      rest1962))
                                                                                                                                                                   (ctdefs1912))))
                                                                                                                                                             (error 'sc-expand-internal
                                                                                                                                                               '"unexpected module binding type ~s"
                                                                                                                                                               t1942)))))))
                                                                                                                                        t1942)))))
                                                                                                                                (append
                                                                                                                                  imps1944
                                                                                                                                  fexports1936)))
                                                                                                                             (module-binding-imps461
                                                                                                                               b1941)))
                                                                                                                          (module-binding-label460
                                                                                                                            b1941)))
                                                                                                                       (module-binding-type458
                                                                                                                         b1941)))
                                                                                                                 (loop1938
                                                                                                                   bs1940)))
                                                                                                            (car bs1939)
                                                                                                            (cdr bs1939))))))
                                                                                   loop1938)
                                                                                  bindings1908))
                                                                               (car fexports1913)
                                                                               (cdr fexports1913))))))
                                           process-exports1911)
                                          fexports1906
                                          (lambda () '())))))
                                   (flatten-exports445 exports1896))))
            (id-set-diff478 (lambda (exports1893 defs1892)
                              (if (null? exports1893)
                                  '()
                                  (if (bound-id-member?437
                                        (car exports1893)
                                        defs1892)
                                      (id-set-diff478
                                        (cdr exports1893)
                                        defs1892)
                                      (cons
                                        (car exports1893)
                                        (id-set-diff478
                                          (cdr exports1893)
                                          defs1892))))))
            (check-module-exports479 (lambda (source-exp1867
                                              fexports1866 ids1865)
                                       (letrec ((defined?1868 (lambda (e1875
                                                                       ids1874)
                                                                (ormap
                                                                  (lambda (x1876)
                                                                    (if (import-interface?375
                                                                          x1876)
                                                                        ((lambda (x.iface1878
                                                                                  x.new-marks1877)
                                                                           ((lambda (t1879)
                                                                              (if t1879
                                                                                  ((lambda (token1880)
                                                                                     (lookup-import-binding-name410
                                                                                       ((lambda (x1881)
                                                                                          ((lambda (e1882)
                                                                                             (if (annotation?132
                                                                                                   e1882)
                                                                                                 (annotation-expression
                                                                                                   e1882)
                                                                                                 e1882))
                                                                                            (if (syntax-object?64
                                                                                                  x1881)
                                                                                                (syntax-object-expression65
                                                                                                  x1881)
                                                                                                x1881)))
                                                                                         e1875)
                                                                                       (id-marks316
                                                                                         e1875)
                                                                                       token1880
                                                                                       x.new-marks1877))
                                                                                    t1879)
                                                                                  ((lambda (v1883)
                                                                                     ((letrec ((lp1884 (lambda (i1885)
                                                                                                         (if (>= i1885
                                                                                                                 '0)
                                                                                                             ((lambda (t1886)
                                                                                                                (if t1886
                                                                                                                    t1886
                                                                                                                    (lp1884
                                                                                                                      (- i1885
                                                                                                                         '1))))
                                                                                                               ((lambda (id1887)
                                                                                                                  (help-bound-id=?432
                                                                                                                    ((lambda (x1890)
                                                                                                                       ((lambda (e1891)
                                                                                                                          (if (annotation?132
                                                                                                                                e1891)
                                                                                                                              (annotation-expression
                                                                                                                                e1891)
                                                                                                                              e1891))
                                                                                                                         (if (syntax-object?64
                                                                                                                               x1890)
                                                                                                                             (syntax-object-expression65
                                                                                                                               x1890)
                                                                                                                             x1890)))
                                                                                                                      id1887)
                                                                                                                    (join-marks418
                                                                                                                      x.new-marks1877
                                                                                                                      (id-marks316
                                                                                                                        id1887))
                                                                                                                    ((lambda (x1888)
                                                                                                                       ((lambda (e1889)
                                                                                                                          (if (annotation?132
                                                                                                                                e1889)
                                                                                                                              (annotation-expression
                                                                                                                                e1889)
                                                                                                                              e1889))
                                                                                                                         (if (syntax-object?64
                                                                                                                               x1888)
                                                                                                                             (syntax-object-expression65
                                                                                                                               x1888)
                                                                                                                             x1888)))
                                                                                                                      e1875)
                                                                                                                    (id-marks316
                                                                                                                      e1875)))
                                                                                                                 (vector-ref
                                                                                                                   v1883
                                                                                                                   i1885)))
                                                                                                             '#f))))
                                                                                        lp1884)
                                                                                       (- (vector-length
                                                                                            v1883)
                                                                                          '1)))
                                                                                    (interface-exports449
                                                                                      x.iface1878))))
                                                                             (interface-token450
                                                                               x.iface1878)))
                                                                          (import-interface-interface376
                                                                            x1876)
                                                                          (import-interface-new-marks377
                                                                            x1876))
                                                                        (bound-id=?433
                                                                          e1875
                                                                          x1876)))
                                                                  ids1874))))
                                         ((letrec ((loop1869 (lambda (fexports1871
                                                                      missing1870)
                                                               (if (null?
                                                                     fexports1871)
                                                                   (if (not (null?
                                                                              missing1870))
                                                                       (syntax-error
                                                                         (car missing1870)
                                                                         (if (= (length
                                                                                  missing1870)
                                                                                '1)
                                                                             '"missing definition for export"
                                                                             '"missing definition for multiple exports, including"))
                                                                       (void))
                                                                   ((lambda (e1873
                                                                             fexports1872)
                                                                      (if (defined?1868
                                                                            e1873
                                                                            ids1865)
                                                                          (loop1869
                                                                            fexports1872
                                                                            missing1870)
                                                                          (loop1869
                                                                            fexports1872
                                                                            (cons
                                                                              e1873
                                                                              missing1870))))
                                                                     (car fexports1871)
                                                                     (cdr fexports1871))))))
                                            loop1869)
                                           fexports1866
                                           '()))))
            (check-defined-ids480 (lambda (source-exp1814 ls1813)
                                    (letrec ((vfold1815 (lambda (v1860
                                                                 p1859
                                                                 cls1858)
                                                          ((lambda (len1861)
                                                             ((letrec ((lp1862 (lambda (i1864
                                                                                        cls1863)
                                                                                 (if (= i1864
                                                                                        len1861)
                                                                                     cls1863
                                                                                     (lp1862
                                                                                       (+ i1864
                                                                                          '1)
                                                                                       (p1859
                                                                                         (vector-ref
                                                                                           v1860
                                                                                           i1864)
                                                                                         cls1863))))))
                                                                lp1862)
                                                               '0
                                                               cls1858))
                                                            (vector-length
                                                              v1860))))
                                             (conflicts1816 (lambda (x1845
                                                                     y1844
                                                                     cls1843)
                                                              (if (import-interface?375
                                                                    x1845)
                                                                  ((lambda (x.iface1847
                                                                            x.new-marks1846)
                                                                     (if (import-interface?375
                                                                           y1844)
                                                                         ((lambda (y.iface1849
                                                                                   y.new-marks1848)
                                                                            ((lambda (xe1851
                                                                                      ye1850)
                                                                               (if (> (vector-length
                                                                                        xe1851)
                                                                                      (vector-length
                                                                                        ye1850))
                                                                                   (vfold1815
                                                                                     ye1850
                                                                                     (lambda (id1853
                                                                                              cls1852)
                                                                                       (id-iface-conflicts1817
                                                                                         id1853
                                                                                         y.new-marks1848
                                                                                         x.iface1847
                                                                                         x.new-marks1846
                                                                                         cls1852))
                                                                                     cls1843)
                                                                                   (vfold1815
                                                                                     xe1851
                                                                                     (lambda (id1855
                                                                                              cls1854)
                                                                                       (id-iface-conflicts1817
                                                                                         id1855
                                                                                         x.new-marks1846
                                                                                         y.iface1849
                                                                                         y.new-marks1848
                                                                                         cls1854))
                                                                                     cls1843)))
                                                                              (interface-exports449
                                                                                x.iface1847)
                                                                              (interface-exports449
                                                                                y.iface1849)))
                                                                           (import-interface-interface376
                                                                             y1844)
                                                                           (import-interface-new-marks377
                                                                             y1844))
                                                                         (id-iface-conflicts1817
                                                                           y1844
                                                                           '()
                                                                           x.iface1847
                                                                           x.new-marks1846
                                                                           cls1843)))
                                                                    (import-interface-interface376
                                                                      x1845)
                                                                    (import-interface-new-marks377
                                                                      x1845))
                                                                  (if (import-interface?375
                                                                        y1844)
                                                                      ((lambda (y.iface1857
                                                                                y.new-marks1856)
                                                                         (id-iface-conflicts1817
                                                                           x1845
                                                                           '()
                                                                           y.iface1857
                                                                           y.new-marks1856
                                                                           cls1843))
                                                                        (import-interface-interface376
                                                                          y1844)
                                                                        (import-interface-new-marks377
                                                                          y1844))
                                                                      (if (bound-id=?433
                                                                            x1845
                                                                            y1844)
                                                                          (cons
                                                                            x1845
                                                                            cls1843)
                                                                          cls1843)))))
                                             (id-iface-conflicts1817 (lambda (id1830
                                                                              id.new-marks1829
                                                                              iface1828
                                                                              iface.new-marks1827
                                                                              cls1826)
                                                                       ((lambda (id.sym1832
                                                                                 id.marks1831)
                                                                          ((lambda (t1833)
                                                                             (if t1833
                                                                                 ((lambda (token1834)
                                                                                    (if (lookup-import-binding-name410
                                                                                          id.sym1832
                                                                                          id.marks1831
                                                                                          token1834
                                                                                          iface.new-marks1827)
                                                                                        (cons
                                                                                          id1830
                                                                                          cls1826)
                                                                                        cls1826))
                                                                                   t1833)
                                                                                 (vfold1815
                                                                                   (interface-exports449
                                                                                     iface1828)
                                                                                   (lambda (*id1836
                                                                                            cls1835)
                                                                                     ((lambda (*id.sym1838
                                                                                               *id.marks1837)
                                                                                        (if (help-bound-id=?432
                                                                                              *id.sym1838
                                                                                              *id.marks1837
                                                                                              id.sym1832
                                                                                              id.marks1831)
                                                                                            (cons
                                                                                              *id1836
                                                                                              cls1835)
                                                                                            cls1835))
                                                                                       ((lambda (x1839)
                                                                                          ((lambda (e1840)
                                                                                             (if (annotation?132
                                                                                                   e1840)
                                                                                                 (annotation-expression
                                                                                                   e1840)
                                                                                                 e1840))
                                                                                            (if (syntax-object?64
                                                                                                  x1839)
                                                                                                (syntax-object-expression65
                                                                                                  x1839)
                                                                                                x1839)))
                                                                                         *id1836)
                                                                                       (join-marks418
                                                                                         iface.new-marks1827
                                                                                         (id-marks316
                                                                                           *id1836))))
                                                                                   cls1826)))
                                                                            (interface-token450
                                                                              iface1828)))
                                                                         ((lambda (x1841)
                                                                            ((lambda (e1842)
                                                                               (if (annotation?132
                                                                                     e1842)
                                                                                   (annotation-expression
                                                                                     e1842)
                                                                                   e1842))
                                                                              (if (syntax-object?64
                                                                                    x1841)
                                                                                  (syntax-object-expression65
                                                                                    x1841)
                                                                                  x1841)))
                                                                           id1830)
                                                                         (join-marks418
                                                                           id.new-marks1829
                                                                           (id-marks316
                                                                             id1830))))))
                                      (if (not (null? ls1813))
                                          ((letrec ((lp1818 (lambda (x1821
                                                                     ls1820
                                                                     cls1819)
                                                              (if (null?
                                                                    ls1820)
                                                                  (if (not (null?
                                                                             cls1819))
                                                                      ((lambda (cls1822)
                                                                         (syntax-error
                                                                           source-exp1814
                                                                           '"duplicate definition for "
                                                                           (symbol->string
                                                                             (car cls1822))
                                                                           '" in"))
                                                                        (syntax-object->datum
                                                                          cls1819))
                                                                      (void))
                                                                  ((letrec ((lp21823 (lambda (ls21825
                                                                                              cls1824)
                                                                                       (if (null?
                                                                                             ls21825)
                                                                                           (lp1818
                                                                                             (car ls1820)
                                                                                             (cdr ls1820)
                                                                                             cls1824)
                                                                                           (lp21823
                                                                                             (cdr ls21825)
                                                                                             (conflicts1816
                                                                                               x1821
                                                                                               (car ls21825)
                                                                                               cls1824))))))
                                                                     lp21823)
                                                                    ls1820
                                                                    cls1819)))))
                                             lp1818)
                                            (car ls1813)
                                            (cdr ls1813)
                                            '())
                                          (void)))))
            (chi-external481 (lambda (ribcage1706 source-exp1705
                                      body1704 r1703 mr1702 ctem1701
                                      exports1700 fexports1699
                                      meta-residualize!1698)
                               (letrec ((return1707 (lambda (r1812 mr1811
                                                             bindings1810
                                                             ids1809
                                                             inits1808)
                                                      (begin
                                                        (check-defined-ids480
                                                          source-exp1705
                                                          ids1809)
                                                        (check-module-exports479
                                                          source-exp1705
                                                          fexports1699
                                                          ids1809)
                                                        (values
                                                          r1812
                                                          mr1811
                                                          bindings1810
                                                          inits1808))))
                                        (get-implicit-exports1708 (lambda (id1805)
                                                                    ((letrec ((f1806 (lambda (exports1807)
                                                                                       (if (null?
                                                                                             exports1807)
                                                                                           '()
                                                                                           (if (if (pair?
                                                                                                     (car exports1807))
                                                                                                   (bound-id=?433
                                                                                                     id1805
                                                                                                     (caar
                                                                                                       exports1807))
                                                                                                   '#f)
                                                                                               (flatten-exports445
                                                                                                 (cdar
                                                                                                   exports1807))
                                                                                               (f1806
                                                                                                 (cdr exports1807)))))))
                                                                       f1806)
                                                                      exports1700)))
                                        (update-imp-exports1709 (lambda (bindings1800
                                                                         exports1799)
                                                                  ((lambda (exports1801)
                                                                     (map (lambda (b1802)
                                                                            ((lambda (id1803)
                                                                               (if (not (bound-id-member?437
                                                                                          id1803
                                                                                          exports1801))
                                                                                   b1802
                                                                                   (create-module-binding470
                                                                                     (module-binding-type458
                                                                                       b1802)
                                                                                     id1803
                                                                                     (module-binding-label460
                                                                                       b1802)
                                                                                     (append
                                                                                       (get-implicit-exports1708
                                                                                         id1803)
                                                                                       (module-binding-imps461
                                                                                         b1802))
                                                                                     (module-binding-val462
                                                                                       b1802))))
                                                                              (module-binding-id459
                                                                                b1802)))
                                                                          bindings1800))
                                                                    (map (lambda (x1804)
                                                                           (if (pair?
                                                                                 x1804)
                                                                               (car x1804)
                                                                               x1804))
                                                                         exports1799)))))
                                 ((letrec ((parse1710 (lambda (body1717
                                                               r1716 mr1715
                                                               ids1714
                                                               bindings1713
                                                               inits1712
                                                               meta-seen?1711)
                                                        (if (null?
                                                              body1717)
                                                            (return1707
                                                              r1716 mr1715
                                                              bindings1713
                                                              ids1714
                                                              inits1712)
                                                            ((lambda (fr1718)
                                                               ((lambda (e1719)
                                                                  ((lambda (meta?1720)
                                                                     ((lambda ()
                                                                        (call-with-values
                                                                          (lambda ()
                                                                            (syntax-type441
                                                                              e1719
                                                                              r1716
                                                                              '(())
                                                                              '#f
                                                                              ribcage1706))
                                                                          (lambda (type1725
                                                                                   value1724
                                                                                   e1723
                                                                                   w1722
                                                                                   ae1721)
                                                                            ((lambda (t1726)
                                                                               (if (memv
                                                                                     t1726
                                                                                     '(define-form))
                                                                                   (call-with-values
                                                                                     (lambda ()
                                                                                       (parse-define505
                                                                                         e1723
                                                                                         w1722
                                                                                         ae1721))
                                                                                     (lambda (id1729
                                                                                              rhs1728
                                                                                              w1727)
                                                                                       ((lambda (id1730)
                                                                                          ((lambda (label1731)
                                                                                             ((lambda (sym1732)
                                                                                                ((lambda (imps1733)
                                                                                                   ((lambda ()
                                                                                                      (begin
                                                                                                        (extend-ribcage!405
                                                                                                          ribcage1706
                                                                                                          id1730
                                                                                                          label1731)
                                                                                                        (if meta?1720
                                                                                                            ((lambda (sym1734)
                                                                                                               ((lambda (b1735)
                                                                                                                  ((lambda ()
                                                                                                                     ((lambda (mr1736)
                                                                                                                        ((lambda (exp1737)
                                                                                                                           (begin
                                                                                                                             (define-top-level-value-hook135
                                                                                                                               sym1734
                                                                                                                               (top-level-eval-hook133
                                                                                                                                 exp1737))
                                                                                                                             (meta-residualize!1698
                                                                                                                               (ct-eval/residualize3489
                                                                                                                                 ctem1701
                                                                                                                                 void
                                                                                                                                 (lambda ()
                                                                                                                                   (list
                                                                                                                                     'define
                                                                                                                                     sym1734
                                                                                                                                     exp1737))))
                                                                                                                             (parse1710
                                                                                                                               (cdr body1717)
                                                                                                                               r1716
                                                                                                                               mr1736
                                                                                                                               (cons
                                                                                                                                 id1730
                                                                                                                                 ids1714)
                                                                                                                               (cons
                                                                                                                                 (create-module-binding470
                                                                                                                                   'ctdefine-form
                                                                                                                                   id1730
                                                                                                                                   label1731
                                                                                                                                   imps1733
                                                                                                                                   b1735)
                                                                                                                                 bindings1713)
                                                                                                                               inits1712
                                                                                                                               '#f)))
                                                                                                                          (chi493
                                                                                                                            rhs1728
                                                                                                                            mr1736
                                                                                                                            mr1736
                                                                                                                            w1727
                                                                                                                            '#t)))
                                                                                                                       (extend-env299
                                                                                                                         (get-indirect-label355
                                                                                                                           label1731)
                                                                                                                         b1735
                                                                                                                         mr1715)))))
                                                                                                                 (cons
                                                                                                                   'meta-variable
                                                                                                                   sym1734)))
                                                                                                              (generate-id147
                                                                                                                ((lambda (x1738)
                                                                                                                   ((lambda (e1739)
                                                                                                                      (if (annotation?132
                                                                                                                            e1739)
                                                                                                                          (annotation-expression
                                                                                                                            e1739)
                                                                                                                          e1739))
                                                                                                                     (if (syntax-object?64
                                                                                                                           x1738)
                                                                                                                         (syntax-object-expression65
                                                                                                                           x1738)
                                                                                                                         x1738)))
                                                                                                                  id1730)))
                                                                                                            (parse1710
                                                                                                              (cdr body1717)
                                                                                                              r1716
                                                                                                              mr1715
                                                                                                              (cons
                                                                                                                id1730
                                                                                                                ids1714)
                                                                                                              (cons
                                                                                                                (create-module-binding470
                                                                                                                  type1725
                                                                                                                  id1730
                                                                                                                  label1731
                                                                                                                  imps1733
                                                                                                                  (make-frob471
                                                                                                                    (wrap438
                                                                                                                      rhs1728
                                                                                                                      w1727)
                                                                                                                    meta?1720))
                                                                                                                bindings1713)
                                                                                                              inits1712
                                                                                                              '#f))))))
                                                                                                  (get-implicit-exports1708
                                                                                                    id1730)))
                                                                                               (generate-id147
                                                                                                 ((lambda (x1740)
                                                                                                    ((lambda (e1741)
                                                                                                       (if (annotation?132
                                                                                                             e1741)
                                                                                                           (annotation-expression
                                                                                                             e1741)
                                                                                                           e1741))
                                                                                                      (if (syntax-object?64
                                                                                                            x1740)
                                                                                                          (syntax-object-expression65
                                                                                                            x1740)
                                                                                                          x1740)))
                                                                                                   id1730))))
                                                                                            (gen-indirect-label354)))
                                                                                         (wrap438
                                                                                           id1729
                                                                                           w1727))))
                                                                                   (if (memv
                                                                                         t1726
                                                                                         '(define-syntax-form))
                                                                                       (call-with-values
                                                                                         (lambda ()
                                                                                           (parse-define-syntax506
                                                                                             e1723
                                                                                             w1722
                                                                                             ae1721))
                                                                                         (lambda (id1744
                                                                                                  rhs1743
                                                                                                  w1742)
                                                                                           ((lambda (id1745)
                                                                                              ((lambda (label1746)
                                                                                                 ((lambda (imps1747)
                                                                                                    ((lambda (exp1748)
                                                                                                       ((lambda ()
                                                                                                          (begin
                                                                                                            (extend-ribcage!405
                                                                                                              ribcage1706
                                                                                                              id1745
                                                                                                              label1746)
                                                                                                            ((lambda (l1750
                                                                                                                      b1749)
                                                                                                               (parse1710
                                                                                                                 (cdr body1717)
                                                                                                                 (extend-env299
                                                                                                                   l1750
                                                                                                                   b1749
                                                                                                                   r1716)
                                                                                                                 (extend-env299
                                                                                                                   l1750
                                                                                                                   b1749
                                                                                                                   mr1715)
                                                                                                                 (cons
                                                                                                                   id1745
                                                                                                                   ids1714)
                                                                                                                 (cons
                                                                                                                   (create-module-binding470
                                                                                                                     type1725
                                                                                                                     id1745
                                                                                                                     label1746
                                                                                                                     imps1747
                                                                                                                     (cons
                                                                                                                       b1749
                                                                                                                       exp1748))
                                                                                                                   bindings1713)
                                                                                                                 inits1712
                                                                                                                 '#f))
                                                                                                              (get-indirect-label355
                                                                                                                label1746)
                                                                                                              (defer-or-eval-transformer307
                                                                                                                top-level-eval-hook133
                                                                                                                exp1748))))))
                                                                                                      (chi493
                                                                                                        rhs1743
                                                                                                        mr1715
                                                                                                        mr1715
                                                                                                        w1742
                                                                                                        '#t)))
                                                                                                   (get-implicit-exports1708
                                                                                                     id1745)))
                                                                                                (gen-indirect-label354)))
                                                                                             (wrap438
                                                                                               id1744
                                                                                               w1742))))
                                                                                       (if (memv
                                                                                             t1726
                                                                                             '($module-form))
                                                                                           ((lambda (*ribcage1751)
                                                                                              ((lambda (*w1752)
                                                                                                 ((lambda ()
                                                                                                    (call-with-values
                                                                                                      (lambda ()
                                                                                                        (parse-module503
                                                                                                          e1723
                                                                                                          w1722
                                                                                                          ae1721
                                                                                                          *w1752))
                                                                                                      (lambda (orig1756
                                                                                                               id1755
                                                                                                               *exports1754
                                                                                                               forms1753)
                                                                                                        (call-with-values
                                                                                                          (lambda ()
                                                                                                            (chi-external481
                                                                                                              *ribcage1751
                                                                                                              orig1756
                                                                                                              (map (lambda (d1768)
                                                                                                                     (make-frob471
                                                                                                                       d1768
                                                                                                                       meta?1720))
                                                                                                                   forms1753)
                                                                                                              r1716
                                                                                                              mr1715
                                                                                                              ctem1701
                                                                                                              *exports1754
                                                                                                              (flatten-exports445
                                                                                                                *exports1754)
                                                                                                              meta-residualize!1698))
                                                                                                          (lambda (r1760
                                                                                                                   mr1759
                                                                                                                   *bindings1758
                                                                                                                   *inits1757)
                                                                                                            ((lambda (iface1765
                                                                                                                      bindings1764
                                                                                                                      inits1763
                                                                                                                      label1762
                                                                                                                      imps1761)
                                                                                                               (begin
                                                                                                                 (extend-ribcage!405
                                                                                                                   ribcage1706
                                                                                                                   id1755
                                                                                                                   label1762)
                                                                                                                 ((lambda (l1767
                                                                                                                           b1766)
                                                                                                                    (parse1710
                                                                                                                      (cdr body1717)
                                                                                                                      (extend-env299
                                                                                                                        l1767
                                                                                                                        b1766
                                                                                                                        r1760)
                                                                                                                      (extend-env299
                                                                                                                        l1767
                                                                                                                        b1766
                                                                                                                        mr1759)
                                                                                                                      (cons
                                                                                                                        id1755
                                                                                                                        ids1714)
                                                                                                                      (cons
                                                                                                                        (create-module-binding470
                                                                                                                          type1725
                                                                                                                          id1755
                                                                                                                          label1762
                                                                                                                          imps1761
                                                                                                                          *exports1754)
                                                                                                                        bindings1764)
                                                                                                                      inits1763
                                                                                                                      '#f))
                                                                                                                   (get-indirect-label355
                                                                                                                     label1762)
                                                                                                                   (cons
                                                                                                                     '$module
                                                                                                                     iface1765))))
                                                                                                              (make-unresolved-interface454
                                                                                                                id1755
                                                                                                                *exports1754)
                                                                                                              (append
                                                                                                                *bindings1758
                                                                                                                bindings1713)
                                                                                                              (append
                                                                                                                inits1712
                                                                                                                *inits1757)
                                                                                                              (gen-indirect-label354)
                                                                                                              (get-implicit-exports1708
                                                                                                                id1755)))))))))
                                                                                                (make-wrap319
                                                                                                  (wrap-marks320
                                                                                                    w1722)
                                                                                                  (cons
                                                                                                    *ribcage1751
                                                                                                    (wrap-subst321
                                                                                                      w1722)))))
                                                                                             (make-ribcage360
                                                                                               '()
                                                                                               '()
                                                                                               '()))
                                                                                           (if (memv
                                                                                                 t1726
                                                                                                 '($import-form))
                                                                                               (call-with-values
                                                                                                 (lambda ()
                                                                                                   (parse-import504
                                                                                                     e1723
                                                                                                     w1722
                                                                                                     ae1721))
                                                                                                 (lambda (orig1771
                                                                                                          only?1770
                                                                                                          mid1769)
                                                                                                   ((lambda (mlabel1772)
                                                                                                      ((lambda (binding1773)
                                                                                                         ((lambda (t1774)
                                                                                                            (if (memv
                                                                                                                  t1774
                                                                                                                  '($module))
                                                                                                                ((lambda (iface1775)
                                                                                                                   ((lambda (import-iface1776)
                                                                                                                      ((lambda ()
                                                                                                                         (begin
                                                                                                                           (if only?1770
                                                                                                                               (extend-ribcage-barrier!407
                                                                                                                                 ribcage1706
                                                                                                                                 mid1769)
                                                                                                                               (void))
                                                                                                                           (do-import!502
                                                                                                                             import-iface1776
                                                                                                                             ribcage1706)
                                                                                                                           (parse1710
                                                                                                                             (cdr body1717)
                                                                                                                             r1716
                                                                                                                             mr1715
                                                                                                                             (cons
                                                                                                                               import-iface1776
                                                                                                                               ids1714)
                                                                                                                             (update-imp-exports1709
                                                                                                                               bindings1713
                                                                                                                               (vector->list
                                                                                                                                 (interface-exports449
                                                                                                                                   iface1775)))
                                                                                                                             inits1712
                                                                                                                             '#f)))))
                                                                                                                     (make-import-interface374
                                                                                                                       iface1775
                                                                                                                       (import-mark-delta500
                                                                                                                         mid1769
                                                                                                                         iface1775))))
                                                                                                                  (binding-value286
                                                                                                                    binding1773))
                                                                                                                (if (memv
                                                                                                                      t1774
                                                                                                                      '(displaced-lexical))
                                                                                                                    (displaced-lexical-error303
                                                                                                                      mid1769)
                                                                                                                    (syntax-error
                                                                                                                      mid1769
                                                                                                                      '"unknown module"))))
                                                                                                           (binding-type285
                                                                                                             binding1773)))
                                                                                                        (lookup305
                                                                                                          mlabel1772
                                                                                                          r1716)))
                                                                                                     (id-var-name429
                                                                                                       mid1769
                                                                                                       '(())))))
                                                                                               (if (memv
                                                                                                     t1726
                                                                                                     '(alias-form))
                                                                                                   (call-with-values
                                                                                                     (lambda ()
                                                                                                       (parse-alias509
                                                                                                         e1723
                                                                                                         w1722
                                                                                                         ae1721))
                                                                                                     (lambda (new-id1778
                                                                                                              old-id1777)
                                                                                                       ((lambda (new-id1779)
                                                                                                          ((lambda (label1780)
                                                                                                             ((lambda (imps1781)
                                                                                                                ((lambda ()
                                                                                                                   (begin
                                                                                                                     (extend-ribcage!405
                                                                                                                       ribcage1706
                                                                                                                       new-id1779
                                                                                                                       label1780)
                                                                                                                     (parse1710
                                                                                                                       (cdr body1717)
                                                                                                                       r1716
                                                                                                                       mr1715
                                                                                                                       (cons
                                                                                                                         new-id1779
                                                                                                                         ids1714)
                                                                                                                       (cons
                                                                                                                         (create-module-binding470
                                                                                                                           type1725
                                                                                                                           new-id1779
                                                                                                                           label1780
                                                                                                                           imps1781
                                                                                                                           '#f)
                                                                                                                         bindings1713)
                                                                                                                       inits1712
                                                                                                                       '#f)))))
                                                                                                               (get-implicit-exports1708
                                                                                                                 new-id1779)))
                                                                                                            (id-var-name-loc428
                                                                                                              old-id1777
                                                                                                              w1722)))
                                                                                                         (wrap438
                                                                                                           new-id1778
                                                                                                           w1722))))
                                                                                                   (if (memv
                                                                                                         t1726
                                                                                                         '(begin-form))
                                                                                                       (parse1710
                                                                                                         ((letrec ((f1782 (lambda (forms1783)
                                                                                                                            (if (null?
                                                                                                                                  forms1783)
                                                                                                                                (cdr body1717)
                                                                                                                                (cons
                                                                                                                                  (make-frob471
                                                                                                                                    (wrap438
                                                                                                                                      (car forms1783)
                                                                                                                                      w1722)
                                                                                                                                    meta?1720)
                                                                                                                                  (f1782
                                                                                                                                    (cdr forms1783)))))))
                                                                                                            f1782)
                                                                                                           (parse-begin510
                                                                                                             e1723
                                                                                                             w1722
                                                                                                             ae1721
                                                                                                             '#t))
                                                                                                         r1716
                                                                                                         mr1715
                                                                                                         ids1714
                                                                                                         bindings1713
                                                                                                         inits1712
                                                                                                         '#f)
                                                                                                       (if (memv
                                                                                                             t1726
                                                                                                             '(eval-when-form))
                                                                                                           (call-with-values
                                                                                                             (lambda ()
                                                                                                               (parse-eval-when508
                                                                                                                 e1723
                                                                                                                 w1722
                                                                                                                 ae1721))
                                                                                                             (lambda (when-list1785
                                                                                                                      forms1784)
                                                                                                               (parse1710
                                                                                                                 (if (memq
                                                                                                                       'eval
                                                                                                                       when-list1785)
                                                                                                                     ((letrec ((f1786 (lambda (forms1787)
                                                                                                                                        (if (null?
                                                                                                                                              forms1787)
                                                                                                                                            (cdr body1717)
                                                                                                                                            (cons
                                                                                                                                              (make-frob471
                                                                                                                                                (wrap438
                                                                                                                                                  (car forms1787)
                                                                                                                                                  w1722)
                                                                                                                                                meta?1720)
                                                                                                                                              (f1786
                                                                                                                                                (cdr forms1787)))))))
                                                                                                                        f1786)
                                                                                                                       forms1784)
                                                                                                                     (cdr body1717))
                                                                                                                 r1716
                                                                                                                 mr1715
                                                                                                                 ids1714
                                                                                                                 bindings1713
                                                                                                                 inits1712
                                                                                                                 '#f)))
                                                                                                           (if (memv
                                                                                                                 t1726
                                                                                                                 '(meta-form))
                                                                                                               (parse1710
                                                                                                                 (cons
                                                                                                                   (make-frob471
                                                                                                                     (wrap438
                                                                                                                       (parse-meta507
                                                                                                                         e1723
                                                                                                                         w1722
                                                                                                                         ae1721)
                                                                                                                       w1722)
                                                                                                                     '#t)
                                                                                                                   (cdr body1717))
                                                                                                                 r1716
                                                                                                                 mr1715
                                                                                                                 ids1714
                                                                                                                 bindings1713
                                                                                                                 inits1712
                                                                                                                 '#t)
                                                                                                               (if (memv
                                                                                                                     t1726
                                                                                                                     '(local-syntax-form))
                                                                                                                   (call-with-values
                                                                                                                     (lambda ()
                                                                                                                       (chi-local-syntax512
                                                                                                                         value1724
                                                                                                                         e1723
                                                                                                                         r1716
                                                                                                                         mr1715
                                                                                                                         w1722
                                                                                                                         ae1721))
                                                                                                                     (lambda (forms1792
                                                                                                                              r1791
                                                                                                                              mr1790
                                                                                                                              w1789
                                                                                                                              ae1788)
                                                                                                                       (parse1710
                                                                                                                         ((letrec ((f1793 (lambda (forms1794)
                                                                                                                                            (if (null?
                                                                                                                                                  forms1794)
                                                                                                                                                (cdr body1717)
                                                                                                                                                (cons
                                                                                                                                                  (make-frob471
                                                                                                                                                    (wrap438
                                                                                                                                                      (car forms1794)
                                                                                                                                                      w1789)
                                                                                                                                                    meta?1720)
                                                                                                                                                  (f1793
                                                                                                                                                    (cdr forms1794)))))))
                                                                                                                            f1793)
                                                                                                                           forms1792)
                                                                                                                         r1791
                                                                                                                         mr1790
                                                                                                                         ids1714
                                                                                                                         bindings1713
                                                                                                                         inits1712
                                                                                                                         '#f)))
                                                                                                                   (begin
                                                                                                                     (if meta-seen?1711
                                                                                                                         (syntax-error
                                                                                                                           (source-wrap439
                                                                                                                             e1723
                                                                                                                             w1722
                                                                                                                             ae1721)
                                                                                                                           '"invalid meta definition")
                                                                                                                         (void))
                                                                                                                     ((letrec ((f1795 (lambda (body1796)
                                                                                                                                        (if ((lambda (t1797)
                                                                                                                                               (if t1797
                                                                                                                                                   t1797
                                                                                                                                                   (not (frob-meta?474
                                                                                                                                                          (car body1796)))))
                                                                                                                                              (null?
                                                                                                                                                body1796))
                                                                                                                                            (return1707
                                                                                                                                              r1716
                                                                                                                                              mr1715
                                                                                                                                              bindings1713
                                                                                                                                              ids1714
                                                                                                                                              (append
                                                                                                                                                inits1712
                                                                                                                                                body1796))
                                                                                                                                            (begin
                                                                                                                                              ((lambda (x1798)
                                                                                                                                                 (begin
                                                                                                                                                   (top-level-eval-hook133
                                                                                                                                                     x1798)
                                                                                                                                                   (meta-residualize!1698
                                                                                                                                                     (ct-eval/residualize3489
                                                                                                                                                       ctem1701
                                                                                                                                                       void
                                                                                                                                                       (lambda ()
                                                                                                                                                         x1798)))))
                                                                                                                                                (chi-meta-frob491
                                                                                                                                                  (car body1796)
                                                                                                                                                  mr1715))
                                                                                                                                              (f1795
                                                                                                                                                (cdr body1796)))))))
                                                                                                                        f1795)
                                                                                                                       (cons
                                                                                                                         (make-frob471
                                                                                                                           (source-wrap439
                                                                                                                             e1723
                                                                                                                             w1722
                                                                                                                             ae1721)
                                                                                                                           meta?1720)
                                                                                                                         (cdr body1717))))))))))))))
                                                                              type1725))))))
                                                                    (frob-meta?474
                                                                      fr1718)))
                                                                 (frob-e473
                                                                   fr1718)))
                                                              (car body1717))))))
                                    parse1710) body1704 r1703 mr1702 '()
                                   '() '() '#f))))
            (vmap482 (lambda (fn1694 v1693)
                       ((letrec ((do1695 (lambda (i1697 ls1696)
                                           (if (< i1697 '0)
                                               ls1696
                                               (do1695
                                                 (- i1697 '1)
                                                 (cons
                                                   (fn1694
                                                     (vector-ref
                                                       v1693
                                                       i1697))
                                                   ls1696))))))
                          do1695)
                         (- (vector-length v1693) '1)
                         '())))
            (vfor-each483 (lambda (fn1689 v1688)
                            ((lambda (len1690)
                               ((letrec ((do1691 (lambda (i1692)
                                                   (if (not (= i1692
                                                               len1690))
                                                       (begin
                                                         (fn1689
                                                           (vector-ref
                                                             v1688
                                                             i1692))
                                                         (do1691
                                                           (+ i1692 '1)))
                                                       (void)))))
                                  do1691)
                                 '0))
                              (vector-length v1688))))
            (do-top-import484 (lambda (import-only?1687 top-ribcage1686
                                       mid1685 token1684)
                                (list
                                  '$sc-put-cte
                                  (list 'quote mid1685)
                                  (list 'quote (cons 'do-import token1684))
                                  (list
                                    'quote
                                    (top-ribcage-key370
                                      top-ribcage1686)))))
            (update-mode-set485 ((lambda (table1675)
                                   (lambda (when-list1677 mode-set1676)
                                     (letrec ((remq1678 (lambda (x1683
                                                                 ls1682)
                                                          (if (null?
                                                                ls1682)
                                                              '()
                                                              (if (eq? (car ls1682)
                                                                       x1683)
                                                                  (remq1678
                                                                    x1683
                                                                    (cdr ls1682))
                                                                  (cons
                                                                    (car ls1682)
                                                                    (remq1678
                                                                      x1683
                                                                      (cdr ls1682))))))))
                                       (remq1678
                                         '-
                                         (apply
                                           append
                                           (map (lambda (m1679)
                                                  ((lambda (row1680)
                                                     (map (lambda (s1681)
                                                            (cdr (assq
                                                                   s1681
                                                                   row1680)))
                                                          when-list1677))
                                                    (cdr (assq
                                                           m1679
                                                           table1675))))
                                                mode-set1676))))))
                                  '((l (load . l) (compile . c) (visit . v)
                                       (revisit . r) (eval . -))
                                     (c (load . -) (compile . -)
                                        (visit . -) (revisit . -)
                                        (eval . c))
                                     (v (load . v) (compile . c)
                                        (visit . v) (revisit . -)
                                        (eval . -))
                                     (r (load . r) (compile . c)
                                        (visit . -) (revisit . r)
                                        (eval . -))
                                     (e (load . -) (compile . -)
                                        (visit . -) (revisit . -)
                                        (eval . e)))))
            (initial-mode-set486 (lambda (when-list1671
                                          compiling-a-file1670)
                                   (apply
                                     append
                                     (map (lambda (s1672)
                                            (if compiling-a-file1670
                                                ((lambda (t1673)
                                                   (if (memv
                                                         t1673
                                                         '(compile))
                                                       '(c)
                                                       (if (memv
                                                             t1673
                                                             '(load))
                                                           '(l)
                                                           (if (memv
                                                                 t1673
                                                                 '(visit))
                                                               '(v)
                                                               (if (memv
                                                                     t1673
                                                                     '(revisit))
                                                                   '(r)
                                                                   '())))))
                                                  s1672)
                                                ((lambda (t1674)
                                                   (if (memv t1674 '(eval))
                                                       '(e)
                                                       '()))
                                                  s1672)))
                                          when-list1671))))
            (rt-eval/residualize487 (lambda (rtem1665 thunk1664)
                                      (if (memq 'e rtem1665)
                                          (thunk1664)
                                          ((lambda (thunk1666)
                                             (if (memq 'v rtem1665)
                                                 (if ((lambda (t1667)
                                                        (if t1667
                                                            t1667
                                                            (memq
                                                              'r
                                                              rtem1665)))
                                                       (memq 'l rtem1665))
                                                     (thunk1666)
                                                     (thunk1666))
                                                 (if ((lambda (t1668)
                                                        (if t1668
                                                            t1668
                                                            (memq
                                                              'r
                                                              rtem1665)))
                                                       (memq 'l rtem1665))
                                                     (thunk1666)
                                                     (chi-void513))))
                                            (if (memq 'c rtem1665)
                                                ((lambda (x1669)
                                                   (begin
                                                     (top-level-eval-hook133
                                                       x1669)
                                                     (lambda () x1669)))
                                                  (thunk1664))
                                                thunk1664)))))
            (ct-eval/residualize2488 (lambda (ctem1661 thunk1660)
                                       ((lambda (t1662)
                                          (ct-eval/residualize3489
                                            ctem1661
                                            (lambda ()
                                              (begin
                                                (if (not t1662)
                                                    (set! t1662
                                                      (thunk1660))
                                                    (void))
                                                (top-level-eval-hook133
                                                  t1662)))
                                            (lambda ()
                                              ((lambda (t1663)
                                                 (if t1663
                                                     t1663
                                                     (thunk1660)))
                                                t1662))))
                                         '#f)))
            (ct-eval/residualize3489 (lambda (ctem1657 eval-thunk1656
                                              residualize-thunk1655)
                                       (if (memq 'e ctem1657)
                                           (begin
                                             (eval-thunk1656)
                                             (chi-void513))
                                           (begin
                                             (if (memq 'c ctem1657)
                                                 (eval-thunk1656)
                                                 (void))
                                             (if (memq 'r ctem1657)
                                                 (if ((lambda (t1658)
                                                        (if t1658
                                                            t1658
                                                            (memq
                                                              'v
                                                              ctem1657)))
                                                       (memq 'l ctem1657))
                                                     (residualize-thunk1655)
                                                     (residualize-thunk1655))
                                                 (if ((lambda (t1659)
                                                        (if t1659
                                                            t1659
                                                            (memq
                                                              'v
                                                              ctem1657)))
                                                       (memq 'l ctem1657))
                                                     (residualize-thunk1655)
                                                     (chi-void513)))))))
            (chi-frobs490 (lambda (frob*1653 r1652 mr1651 m?1650)
                            (map (lambda (x1654)
                                   (chi493 (frob-e473 x1654) r1652 mr1651
                                     '(()) m?1650))
                                 frob*1653)))
            (chi-meta-frob491 (lambda (x1649 mr1648)
                                (chi493 (frob-e473 x1649) mr1648 mr1648
                                  '(()) '#t)))
            (chi-sequence492 (lambda (body1644 r1643 mr1642 w1641 ae1640
                                      m?1639)
                               (build-sequence239
                                 ae1640
                                 ((letrec ((dobody1645 (lambda (body1646)
                                                         (if (null?
                                                               body1646)
                                                             '()
                                                             ((lambda (first1647)
                                                                (cons
                                                                  first1647
                                                                  (dobody1645
                                                                    (cdr body1646))))
                                                               (chi493
                                                                 (car body1646)
                                                                 r1643
                                                                 mr1642
                                                                 w1641
                                                                 m?1639))))))
                                    dobody1645)
                                   body1644))))
            (chi493 (lambda (e1633 r1632 mr1631 w1630 m?1629)
                      (call-with-values
                        (lambda ()
                          (syntax-type441 e1633 r1632 w1630 '#f '#f))
                        (lambda (type1638 value1637 e1636 w1635 ae1634)
                          (chi-expr494 type1638 value1637 e1636 r1632
                            mr1631 w1635 ae1634 m?1629)))))
            (chi-expr494 (lambda (type1613 value1612 e1611 r1610 mr1609
                                  w1608 ae1607 m?1606)
                           ((lambda (t1614)
                              (if (memv t1614 '(lexical))
                                  value1612
                                  (if (memv t1614 '(core))
                                      (value1612 e1611 r1610 mr1609 w1608
                                        ae1607 m?1606)
                                      (if (memv t1614 '(lexical-call))
                                          (chi-application495 value1612
                                            e1611 r1610 mr1609 w1608 ae1607
                                            m?1606)
                                          (if (memv t1614 '(constant))
                                              (list
                                                'quote
                                                (strip517
                                                  (source-wrap439
                                                    e1611
                                                    w1608
                                                    ae1607)
                                                  '(())))
                                              (if (memv t1614 '(global))
                                                  value1612
                                                  (if (memv
                                                        t1614
                                                        '(meta-variable))
                                                      (if m?1606
                                                          value1612
                                                          (displaced-lexical-error303
                                                            (source-wrap439
                                                              e1611
                                                              w1608
                                                              ae1607)))
                                                      (if (memv
                                                            t1614
                                                            '(call))
                                                          (chi-application495
                                                            (chi493
                                                              (car e1611)
                                                              r1610 mr1609
                                                              w1608 m?1606)
                                                            e1611 r1610
                                                            mr1609 w1608
                                                            ae1607 m?1606)
                                                          (if (memv
                                                                t1614
                                                                '(begin-form))
                                                              (chi-sequence492
                                                                (parse-begin510
                                                                  e1611
                                                                  w1608
                                                                  ae1607
                                                                  '#f)
                                                                r1610
                                                                mr1609
                                                                w1608
                                                                ae1607
                                                                m?1606)
                                                              (if (memv
                                                                    t1614
                                                                    '(local-syntax-form))
                                                                  (call-with-values
                                                                    (lambda ()
                                                                      (chi-local-syntax512
                                                                        value1612
                                                                        e1611
                                                                        r1610
                                                                        mr1609
                                                                        w1608
                                                                        ae1607))
                                                                    (lambda (forms1619
                                                                             r1618
                                                                             mr1617
                                                                             w1616
                                                                             ae1615)
                                                                      (chi-sequence492
                                                                        forms1619
                                                                        r1618
                                                                        mr1617
                                                                        w1616
                                                                        ae1615
                                                                        m?1606)))
                                                                  (if (memv
                                                                        t1614
                                                                        '(eval-when-form))
                                                                      (call-with-values
                                                                        (lambda ()
                                                                          (parse-eval-when508
                                                                            e1611
                                                                            w1608
                                                                            ae1607))
                                                                        (lambda (when-list1621
                                                                                 forms1620)
                                                                          (if (memq
                                                                                'eval
                                                                                when-list1621)
                                                                              (chi-sequence492
                                                                                forms1620
                                                                                r1610
                                                                                mr1609
                                                                                w1608
                                                                                ae1607
                                                                                m?1606)
                                                                              (chi-void513))))
                                                                      (if (memv
                                                                            t1614
                                                                            '(meta-form))
                                                                          (syntax-error
                                                                            (source-wrap439
                                                                              e1611
                                                                              w1608
                                                                              ae1607)
                                                                            '"invalid context for meta definition")
                                                                          (if (memv
                                                                                t1614
                                                                                '(define-form))
                                                                              (begin
                                                                                (parse-define505
                                                                                  e1611
                                                                                  w1608
                                                                                  ae1607)
                                                                                (syntax-error
                                                                                  (source-wrap439
                                                                                    e1611
                                                                                    w1608
                                                                                    ae1607)
                                                                                  '"invalid context for definition"))
                                                                              (if (memv
                                                                                    t1614
                                                                                    '(define-syntax-form))
                                                                                  (begin
                                                                                    (parse-define-syntax506
                                                                                      e1611
                                                                                      w1608
                                                                                      ae1607)
                                                                                    (syntax-error
                                                                                      (source-wrap439
                                                                                        e1611
                                                                                        w1608
                                                                                        ae1607)
                                                                                      '"invalid context for definition"))
                                                                                  (if (memv
                                                                                        t1614
                                                                                        '($module-form))
                                                                                      (call-with-values
                                                                                        (lambda ()
                                                                                          (parse-module503
                                                                                            e1611
                                                                                            w1608
                                                                                            ae1607
                                                                                            w1608))
                                                                                        (lambda (orig1625
                                                                                                 id1624
                                                                                                 exports1623
                                                                                                 forms1622)
                                                                                          (syntax-error
                                                                                            orig1625
                                                                                            '"invalid context for definition")))
                                                                                      (if (memv
                                                                                            t1614
                                                                                            '($import-form))
                                                                                          (call-with-values
                                                                                            (lambda ()
                                                                                              (parse-import504
                                                                                                e1611
                                                                                                w1608
                                                                                                ae1607))
                                                                                            (lambda (orig1628
                                                                                                     only?1627
                                                                                                     mid1626)
                                                                                              (syntax-error
                                                                                                orig1628
                                                                                                '"invalid context for definition")))
                                                                                          (if (memv
                                                                                                t1614
                                                                                                '(alias-form))
                                                                                              (begin
                                                                                                (parse-alias509
                                                                                                  e1611
                                                                                                  w1608
                                                                                                  ae1607)
                                                                                                (syntax-error
                                                                                                  (source-wrap439
                                                                                                    e1611
                                                                                                    w1608
                                                                                                    ae1607)
                                                                                                  '"invalid context for definition"))
                                                                                              (if (memv
                                                                                                    t1614
                                                                                                    '(syntax))
                                                                                                  (syntax-error
                                                                                                    (source-wrap439
                                                                                                      e1611
                                                                                                      w1608
                                                                                                      ae1607)
                                                                                                    '"reference to pattern variable outside syntax form")
                                                                                                  (if (memv
                                                                                                        t1614
                                                                                                        '(displaced-lexical))
                                                                                                      (displaced-lexical-error303
                                                                                                        (source-wrap439
                                                                                                          e1611
                                                                                                          w1608
                                                                                                          ae1607))
                                                                                                      (syntax-error
                                                                                                        (source-wrap439
                                                                                                          e1611
                                                                                                          w1608
                                                                                                          ae1607)))))))))))))))))))))
                             type1613)))
            (chi-application495 (lambda (x1598 e1597 r1596 mr1595 w1594
                                         ae1593 m?1592)
                                  ((lambda (tmp1599)
                                     ((lambda (tmp1600)
                                        (if tmp1600
                                            (apply
                                              (lambda (e01602 e11601)
                                                (cons
                                                  x1598
                                                  (map (lambda (e1604)
                                                         (chi493 e1604
                                                           r1596 mr1595
                                                           w1594 m?1592))
                                                       e11601)))
                                              tmp1600)
                                            ((lambda (_1605)
                                               (syntax-error
                                                 (source-wrap439
                                                   e1597
                                                   w1594
                                                   ae1593)))
                                              tmp1599)))
                                       ($syntax-dispatch
                                         tmp1599
                                         '(any . each-any))))
                                    e1597)))
            (chi-set!496 (lambda (e1566 r1565 w1564 ae1563 rib1562)
                           ((lambda (tmp1567)
                              ((lambda (tmp1568)
                                 (if (if tmp1568
                                         (apply
                                           (lambda (_1571 id1570 val1569)
                                             (id?310 id1570))
                                           tmp1568)
                                         '#f)
                                     (apply
                                       (lambda (_1574 id1573 val1572)
                                         ((lambda (n1575)
                                            ((lambda (b1576)
                                               ((lambda (t1577)
                                                  (if (memv
                                                        t1577
                                                        '(macro!))
                                                      ((lambda (id1579
                                                                val1578)
                                                         (syntax-type441
                                                           (chi-macro497
                                                             (binding-value286
                                                               b1576)
                                                             (list
                                                               '#(syntax-object set! ((top) #(ribcage () () ()) #(ribcage #(id val) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage #(b) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(n) #((top)) #("i")) #(ribcage #(_ id val) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e r w ae rib) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                               id1579
                                                               val1578)
                                                             r1565 '(())
                                                             '#f rib1562)
                                                           r1565 '(()) '#f
                                                           rib1562))
                                                        (wrap438
                                                          id1573
                                                          w1564)
                                                        (wrap438
                                                          val1572
                                                          w1564))
                                                      (values 'core
                                                        (lambda (e1585
                                                                 r1584
                                                                 mr1583
                                                                 w1582
                                                                 ae1581
                                                                 m?1580)
                                                          ((lambda (val1587
                                                                    n1586)
                                                             ((lambda (b1588)
                                                                ((lambda (t1589)
                                                                   (if (memv
                                                                         t1589
                                                                         '(lexical))
                                                                       (list
                                                                         'set!
                                                                         (binding-value286
                                                                           b1588)
                                                                         val1587)
                                                                       (if (memv
                                                                             t1589
                                                                             '(global))
                                                                           ((lambda (sym1590)
                                                                              (begin
                                                                                (if (read-only-binding?144
                                                                                      n1586)
                                                                                    (syntax-error
                                                                                      (source-wrap439
                                                                                        e1585
                                                                                        w1582
                                                                                        ae1581)
                                                                                      '"invalid assignment to read-only variable")
                                                                                    (void))
                                                                                (list
                                                                                  'set!
                                                                                  sym1590
                                                                                  val1587)))
                                                                             (binding-value286
                                                                               b1588))
                                                                           (if (memv
                                                                                 t1589
                                                                                 '(meta-variable))
                                                                               (if m?1580
                                                                                   (list
                                                                                     'set!
                                                                                     (binding-value286
                                                                                       b1588)
                                                                                     val1587)
                                                                                   (displaced-lexical-error303
                                                                                     (wrap438
                                                                                       id1573
                                                                                       w1582)))
                                                                               (if (memv
                                                                                     t1589
                                                                                     '(displaced-lexical))
                                                                                   (displaced-lexical-error303
                                                                                     (wrap438
                                                                                       id1573
                                                                                       w1582))
                                                                                   (syntax-error
                                                                                     (source-wrap439
                                                                                       e1585
                                                                                       w1582
                                                                                       ae1581)))))))
                                                                  (binding-type285
                                                                    b1588)))
                                                               (lookup305
                                                                 n1586
                                                                 r1584)))
                                                            (chi493 val1572
                                                              r1584 mr1583
                                                              w1582 m?1580)
                                                            (id-var-name429
                                                              id1573
                                                              w1582)))
                                                        e1566 w1564
                                                        ae1563)))
                                                 (binding-type285 b1576)))
                                              (lookup305 n1575 r1565)))
                                           (id-var-name429 id1573 w1564)))
                                       tmp1568)
                                     ((lambda (_1591)
                                        (syntax-error
                                          (source-wrap439
                                            e1566
                                            w1564
                                            ae1563)))
                                       tmp1567)))
                                ($syntax-dispatch tmp1567 '(any any any))))
                             e1566)))
            (chi-macro497 (lambda (p1549 e1548 r1547 w1546 ae1545
                                   rib1544)
                            (letrec ((rebuild-macro-output1550 (lambda (x1554
                                                                        m1553)
                                                                 (if (pair?
                                                                       x1554)
                                                                     (cons
                                                                       (rebuild-macro-output1550
                                                                         (car x1554)
                                                                         m1553)
                                                                       (rebuild-macro-output1550
                                                                         (cdr x1554)
                                                                         m1553))
                                                                     (if (syntax-object?64
                                                                           x1554)
                                                                         ((lambda (w1555)
                                                                            ((lambda (ms1557
                                                                                      s1556)
                                                                               (make-syntax-object63
                                                                                 (syntax-object-expression65
                                                                                   x1554)
                                                                                 (if (if (pair?
                                                                                           ms1557)
                                                                                         (eq? (car ms1557)
                                                                                              '#f)
                                                                                         '#f)
                                                                                     (make-wrap319
                                                                                       (cdr ms1557)
                                                                                       (cdr s1556))
                                                                                     (make-wrap319
                                                                                       (cons
                                                                                         m1553
                                                                                         ms1557)
                                                                                       (if rib1544
                                                                                           (cons
                                                                                             rib1544
                                                                                             (cons
                                                                                               'shift
                                                                                               s1556))
                                                                                           (cons
                                                                                             'shift
                                                                                             s1556))))))
                                                                              (wrap-marks320
                                                                                w1555)
                                                                              (wrap-subst321
                                                                                w1555)))
                                                                           (syntax-object-wrap66
                                                                             x1554))
                                                                         (if (vector?
                                                                               x1554)
                                                                             ((lambda (n1558)
                                                                                ((lambda (v1559)
                                                                                   ((lambda ()
                                                                                      ((letrec ((do1560 (lambda (i1561)
                                                                                                          (if (= i1561
                                                                                                                 n1558)
                                                                                                              v1559
                                                                                                              (begin
                                                                                                                (vector-set!
                                                                                                                  v1559
                                                                                                                  i1561
                                                                                                                  (rebuild-macro-output1550
                                                                                                                    (vector-ref
                                                                                                                      x1554
                                                                                                                      i1561)
                                                                                                                    m1553))
                                                                                                                (do1560
                                                                                                                  (+ i1561
                                                                                                                     '1)))))))
                                                                                         do1560)
                                                                                        '0))))
                                                                                  (make-vector
                                                                                    n1558)))
                                                                               (vector-length
                                                                                 x1554))
                                                                             (if (symbol?
                                                                                   x1554)
                                                                                 (syntax-error
                                                                                   (source-wrap439
                                                                                     e1548
                                                                                     w1546
                                                                                     ae1545)
                                                                                   '"encountered raw symbol "
                                                                                   (symbol->string
                                                                                     x1554)
                                                                                   '" in output of macro")
                                                                                 x1554)))))))
                              (rebuild-macro-output1550
                                ((lambda (out1551)
                                   (if (procedure? out1551)
                                       (out1551
                                         (lambda (id1552)
                                           (begin
                                             (if (not (identifier? id1552))
                                                 (syntax-error
                                                   id1552
                                                   '"environment argument is not an identifier")
                                                 (void))
                                             (lookup305
                                               (id-var-name429
                                                 id1552
                                                 '(()))
                                               r1547))))
                                       out1551))
                                  (p1549
                                    (source-wrap439
                                      e1548
                                      (anti-mark395 w1546)
                                      ae1545)))
                                (string '#\m)))))
            (chi-body498 (lambda (body1532 outer-form1531 r1530 mr1529
                                  w1528 m?1527)
                           ((lambda (ribcage1533)
                              ((lambda (w1534)
                                 ((lambda (body1535)
                                    ((lambda ()
                                       (call-with-values
                                         (lambda ()
                                           (chi-internal499 ribcage1533
                                             outer-form1531 body1535 r1530
                                             mr1529 m?1527))
                                         (lambda (r1542 mr1541 exprs1540
                                                  ids1539 vars1538 vals1537
                                                  inits1536)
                                           (begin
                                             (if (null? exprs1540)
                                                 (syntax-error
                                                   outer-form1531
                                                   '"no expressions in body")
                                                 (void))
                                             (build-body241
                                               '#f
                                               (reverse vars1538)
                                               (chi-frobs490
                                                 (reverse vals1537)
                                                 r1542
                                                 mr1541
                                                 m?1527)
                                               (build-sequence239
                                                 '#f
                                                 (chi-frobs490
                                                   (append
                                                     inits1536
                                                     exprs1540)
                                                   r1542
                                                   mr1541
                                                   m?1527)))))))))
                                   (map (lambda (x1543)
                                          (make-frob471
                                            (wrap438 x1543 w1534)
                                            '#f))
                                        body1532)))
                                (make-wrap319
                                  (wrap-marks320 w1528)
                                  (cons
                                    ribcage1533
                                    (wrap-subst321 w1528)))))
                             (make-ribcage360 '() '() '()))))
            (chi-internal499 (lambda (ribcage1436 source-exp1435
                                      body1434 r1433 mr1432 m?1431)
                               (letrec ((return1437 (lambda (r1526 mr1525
                                                             exprs1524
                                                             ids1523
                                                             vars1522
                                                             vals1521
                                                             inits1520)
                                                      (begin
                                                        (check-defined-ids480
                                                          source-exp1435
                                                          ids1523)
                                                        (values r1526
                                                          mr1525 exprs1524
                                                          ids1523 vars1522
                                                          vals1521
                                                          inits1520)))))
                                 ((letrec ((parse1438 (lambda (body1446
                                                               r1445 mr1444
                                                               ids1443
                                                               vars1442
                                                               vals1441
                                                               inits1440
                                                               meta-seen?1439)
                                                        (if (null?
                                                              body1446)
                                                            (return1437
                                                              r1445 mr1444
                                                              body1446
                                                              ids1443
                                                              vars1442
                                                              vals1441
                                                              inits1440)
                                                            ((lambda (fr1447)
                                                               ((lambda (e1448)
                                                                  ((lambda (meta?1449)
                                                                     ((lambda ()
                                                                        (call-with-values
                                                                          (lambda ()
                                                                            (syntax-type441
                                                                              e1448
                                                                              r1445
                                                                              '(())
                                                                              '#f
                                                                              ribcage1436))
                                                                          (lambda (type1454
                                                                                   value1453
                                                                                   e1452
                                                                                   w1451
                                                                                   ae1450)
                                                                            ((lambda (t1455)
                                                                               (if (memv
                                                                                     t1455
                                                                                     '(define-form))
                                                                                   (call-with-values
                                                                                     (lambda ()
                                                                                       (parse-define505
                                                                                         e1452
                                                                                         w1451
                                                                                         ae1450))
                                                                                     (lambda (id1458
                                                                                              rhs1457
                                                                                              w1456)
                                                                                       ((lambda (id1460
                                                                                                 label1459)
                                                                                          (if meta?1449
                                                                                              ((lambda (sym1461)
                                                                                                 (begin
                                                                                                   (extend-ribcage!405
                                                                                                     ribcage1436
                                                                                                     id1460
                                                                                                     label1459)
                                                                                                   ((lambda (mr1462)
                                                                                                      (begin
                                                                                                        (define-top-level-value-hook135
                                                                                                          sym1461
                                                                                                          (top-level-eval-hook133
                                                                                                            (chi493
                                                                                                              rhs1457
                                                                                                              mr1462
                                                                                                              mr1462
                                                                                                              w1456
                                                                                                              '#t)))
                                                                                                        (parse1438
                                                                                                          (cdr body1446)
                                                                                                          r1445
                                                                                                          mr1462
                                                                                                          (cons
                                                                                                            id1460
                                                                                                            ids1443)
                                                                                                          vars1442
                                                                                                          vals1441
                                                                                                          inits1440
                                                                                                          '#f)))
                                                                                                     (extend-env299
                                                                                                       label1459
                                                                                                       (cons
                                                                                                         'meta-variable
                                                                                                         sym1461)
                                                                                                       mr1444))))
                                                                                                (generate-id147
                                                                                                  ((lambda (x1463)
                                                                                                     ((lambda (e1464)
                                                                                                        (if (annotation?132
                                                                                                              e1464)
                                                                                                            (annotation-expression
                                                                                                              e1464)
                                                                                                            e1464))
                                                                                                       (if (syntax-object?64
                                                                                                             x1463)
                                                                                                           (syntax-object-expression65
                                                                                                             x1463)
                                                                                                           x1463)))
                                                                                                    id1460)))
                                                                                              ((lambda (var1465)
                                                                                                 (begin
                                                                                                   (extend-ribcage!405
                                                                                                     ribcage1436
                                                                                                     id1460
                                                                                                     label1459)
                                                                                                   (parse1438
                                                                                                     (cdr body1446)
                                                                                                     (extend-env299
                                                                                                       label1459
                                                                                                       (cons
                                                                                                         'lexical
                                                                                                         var1465)
                                                                                                       r1445)
                                                                                                     mr1444
                                                                                                     (cons
                                                                                                       id1460
                                                                                                       ids1443)
                                                                                                     (cons
                                                                                                       var1465
                                                                                                       vars1442)
                                                                                                     (cons
                                                                                                       (make-frob471
                                                                                                         (wrap438
                                                                                                           rhs1457
                                                                                                           w1456)
                                                                                                         meta?1449)
                                                                                                       vals1441)
                                                                                                     inits1440
                                                                                                     '#f)))
                                                                                                (gen-var518
                                                                                                  id1460))))
                                                                                         (wrap438
                                                                                           id1458
                                                                                           w1456)
                                                                                         (gen-label357))))
                                                                                   (if (memv
                                                                                         t1455
                                                                                         '(define-syntax-form))
                                                                                       (call-with-values
                                                                                         (lambda ()
                                                                                           (parse-define-syntax506
                                                                                             e1452
                                                                                             w1451
                                                                                             ae1450))
                                                                                         (lambda (id1468
                                                                                                  rhs1467
                                                                                                  w1466)
                                                                                           ((lambda (id1471
                                                                                                     label1470
                                                                                                     exp1469)
                                                                                              (begin
                                                                                                (extend-ribcage!405
                                                                                                  ribcage1436
                                                                                                  id1471
                                                                                                  label1470)
                                                                                                ((lambda (b1472)
                                                                                                   (parse1438
                                                                                                     (cdr body1446)
                                                                                                     (extend-env299
                                                                                                       label1470
                                                                                                       b1472
                                                                                                       r1445)
                                                                                                     (extend-env299
                                                                                                       label1470
                                                                                                       b1472
                                                                                                       mr1444)
                                                                                                     (cons
                                                                                                       id1471
                                                                                                       ids1443)
                                                                                                     vars1442
                                                                                                     vals1441
                                                                                                     inits1440
                                                                                                     '#f))
                                                                                                  (defer-or-eval-transformer307
                                                                                                    local-eval-hook134
                                                                                                    exp1469))))
                                                                                             (wrap438
                                                                                               id1468
                                                                                               w1466)
                                                                                             (gen-label357)
                                                                                             (chi493
                                                                                               rhs1467
                                                                                               mr1444
                                                                                               mr1444
                                                                                               w1466
                                                                                               '#t))))
                                                                                       (if (memv
                                                                                             t1455
                                                                                             '($module-form))
                                                                                           ((lambda (*ribcage1473)
                                                                                              ((lambda (*w1474)
                                                                                                 ((lambda ()
                                                                                                    (call-with-values
                                                                                                      (lambda ()
                                                                                                        (parse-module503
                                                                                                          e1452
                                                                                                          w1451
                                                                                                          ae1450
                                                                                                          *w1474))
                                                                                                      (lambda (orig1478
                                                                                                               id1477
                                                                                                               exports1476
                                                                                                               forms1475)
                                                                                                        (call-with-values
                                                                                                          (lambda ()
                                                                                                            (chi-internal499
                                                                                                              *ribcage1473
                                                                                                              orig1478
                                                                                                              (map (lambda (d1492)
                                                                                                                     (make-frob471
                                                                                                                       d1492
                                                                                                                       meta?1449))
                                                                                                                   forms1475)
                                                                                                              r1445
                                                                                                              mr1444
                                                                                                              m?1431))
                                                                                                          (lambda (r1485
                                                                                                                   mr1484
                                                                                                                   *body1483
                                                                                                                   *ids1482
                                                                                                                   *vars1481
                                                                                                                   *vals1480
                                                                                                                   *inits1479)
                                                                                                            (begin
                                                                                                              (check-module-exports479
                                                                                                                source-exp1435
                                                                                                                (flatten-exports445
                                                                                                                  exports1476)
                                                                                                                *ids1482)
                                                                                                              ((lambda (iface1490
                                                                                                                        vars1489
                                                                                                                        vals1488
                                                                                                                        inits1487
                                                                                                                        label1486)
                                                                                                                 (begin
                                                                                                                   (extend-ribcage!405
                                                                                                                     ribcage1436
                                                                                                                     id1477
                                                                                                                     label1486)
                                                                                                                   ((lambda (b1491)
                                                                                                                      (parse1438
                                                                                                                        (cdr body1446)
                                                                                                                        (extend-env299
                                                                                                                          label1486
                                                                                                                          b1491
                                                                                                                          r1485)
                                                                                                                        (extend-env299
                                                                                                                          label1486
                                                                                                                          b1491
                                                                                                                          mr1484)
                                                                                                                        (cons
                                                                                                                          id1477
                                                                                                                          ids1443)
                                                                                                                        vars1489
                                                                                                                        vals1488
                                                                                                                        inits1487
                                                                                                                        '#f))
                                                                                                                     (cons
                                                                                                                       '$module
                                                                                                                       iface1490))))
                                                                                                                (make-resolved-interface455
                                                                                                                  id1477
                                                                                                                  exports1476
                                                                                                                  '#f)
                                                                                                                (append
                                                                                                                  *vars1481
                                                                                                                  vars1442)
                                                                                                                (append
                                                                                                                  *vals1480
                                                                                                                  vals1441)
                                                                                                                (append
                                                                                                                  inits1440
                                                                                                                  *inits1479
                                                                                                                  *body1483)
                                                                                                                (gen-label357))))))))))
                                                                                                (make-wrap319
                                                                                                  (wrap-marks320
                                                                                                    w1451)
                                                                                                  (cons
                                                                                                    *ribcage1473
                                                                                                    (wrap-subst321
                                                                                                      w1451)))))
                                                                                             (make-ribcage360
                                                                                               '()
                                                                                               '()
                                                                                               '()))
                                                                                           (if (memv
                                                                                                 t1455
                                                                                                 '($import-form))
                                                                                               (call-with-values
                                                                                                 (lambda ()
                                                                                                   (parse-import504
                                                                                                     e1452
                                                                                                     w1451
                                                                                                     ae1450))
                                                                                                 (lambda (orig1495
                                                                                                          only?1494
                                                                                                          mid1493)
                                                                                                   ((lambda (mlabel1496)
                                                                                                      ((lambda (binding1497)
                                                                                                         ((lambda (t1498)
                                                                                                            (if (memv
                                                                                                                  t1498
                                                                                                                  '($module))
                                                                                                                ((lambda (iface1499)
                                                                                                                   ((lambda (import-iface1500)
                                                                                                                      ((lambda ()
                                                                                                                         (begin
                                                                                                                           (if only?1494
                                                                                                                               (extend-ribcage-barrier!407
                                                                                                                                 ribcage1436
                                                                                                                                 mid1493)
                                                                                                                               (void))
                                                                                                                           (do-import!502
                                                                                                                             import-iface1500
                                                                                                                             ribcage1436)
                                                                                                                           (parse1438
                                                                                                                             (cdr body1446)
                                                                                                                             r1445
                                                                                                                             mr1444
                                                                                                                             (cons
                                                                                                                               import-iface1500
                                                                                                                               ids1443)
                                                                                                                             vars1442
                                                                                                                             vals1441
                                                                                                                             inits1440
                                                                                                                             '#f)))))
                                                                                                                     (make-import-interface374
                                                                                                                       iface1499
                                                                                                                       (import-mark-delta500
                                                                                                                         mid1493
                                                                                                                         iface1499))))
                                                                                                                  (binding-value286
                                                                                                                    binding1497))
                                                                                                                (if (memv
                                                                                                                      t1498
                                                                                                                      '(displaced-lexical))
                                                                                                                    (displaced-lexical-error303
                                                                                                                      mid1493)
                                                                                                                    (syntax-error
                                                                                                                      mid1493
                                                                                                                      '"unknown module"))))
                                                                                                           (binding-type285
                                                                                                             binding1497)))
                                                                                                        (lookup305
                                                                                                          mlabel1496
                                                                                                          r1445)))
                                                                                                     (id-var-name429
                                                                                                       mid1493
                                                                                                       '(())))))
                                                                                               (if (memv
                                                                                                     t1455
                                                                                                     '(alias-form))
                                                                                                   (call-with-values
                                                                                                     (lambda ()
                                                                                                       (parse-alias509
                                                                                                         e1452
                                                                                                         w1451
                                                                                                         ae1450))
                                                                                                     (lambda (new-id1502
                                                                                                              old-id1501)
                                                                                                       ((lambda (new-id1503)
                                                                                                          (begin
                                                                                                            (extend-ribcage!405
                                                                                                              ribcage1436
                                                                                                              new-id1503
                                                                                                              (id-var-name-loc428
                                                                                                                old-id1501
                                                                                                                w1451))
                                                                                                            (parse1438
                                                                                                              (cdr body1446)
                                                                                                              r1445
                                                                                                              mr1444
                                                                                                              (cons
                                                                                                                new-id1503
                                                                                                                ids1443)
                                                                                                              vars1442
                                                                                                              vals1441
                                                                                                              inits1440
                                                                                                              '#f)))
                                                                                                         (wrap438
                                                                                                           new-id1502
                                                                                                           w1451))))
                                                                                                   (if (memv
                                                                                                         t1455
                                                                                                         '(begin-form))
                                                                                                       (parse1438
                                                                                                         ((letrec ((f1504 (lambda (forms1505)
                                                                                                                            (if (null?
                                                                                                                                  forms1505)
                                                                                                                                (cdr body1446)
                                                                                                                                (cons
                                                                                                                                  (make-frob471
                                                                                                                                    (wrap438
                                                                                                                                      (car forms1505)
                                                                                                                                      w1451)
                                                                                                                                    meta?1449)
                                                                                                                                  (f1504
                                                                                                                                    (cdr forms1505)))))))
                                                                                                            f1504)
                                                                                                           (parse-begin510
                                                                                                             e1452
                                                                                                             w1451
                                                                                                             ae1450
                                                                                                             '#t))
                                                                                                         r1445
                                                                                                         mr1444
                                                                                                         ids1443
                                                                                                         vars1442
                                                                                                         vals1441
                                                                                                         inits1440
                                                                                                         '#f)
                                                                                                       (if (memv
                                                                                                             t1455
                                                                                                             '(eval-when-form))
                                                                                                           (call-with-values
                                                                                                             (lambda ()
                                                                                                               (parse-eval-when508
                                                                                                                 e1452
                                                                                                                 w1451
                                                                                                                 ae1450))
                                                                                                             (lambda (when-list1507
                                                                                                                      forms1506)
                                                                                                               (parse1438
                                                                                                                 (if (memq
                                                                                                                       'eval
                                                                                                                       when-list1507)
                                                                                                                     ((letrec ((f1508 (lambda (forms1509)
                                                                                                                                        (if (null?
                                                                                                                                              forms1509)
                                                                                                                                            (cdr body1446)
                                                                                                                                            (cons
                                                                                                                                              (make-frob471
                                                                                                                                                (wrap438
                                                                                                                                                  (car forms1509)
                                                                                                                                                  w1451)
                                                                                                                                                meta?1449)
                                                                                                                                              (f1508
                                                                                                                                                (cdr forms1509)))))))
                                                                                                                        f1508)
                                                                                                                       forms1506)
                                                                                                                     (cdr body1446))
                                                                                                                 r1445
                                                                                                                 mr1444
                                                                                                                 ids1443
                                                                                                                 vars1442
                                                                                                                 vals1441
                                                                                                                 inits1440
                                                                                                                 '#f)))
                                                                                                           (if (memv
                                                                                                                 t1455
                                                                                                                 '(meta-form))
                                                                                                               (parse1438
                                                                                                                 (cons
                                                                                                                   (make-frob471
                                                                                                                     (wrap438
                                                                                                                       (parse-meta507
                                                                                                                         e1452
                                                                                                                         w1451
                                                                                                                         ae1450)
                                                                                                                       w1451)
                                                                                                                     '#t)
                                                                                                                   (cdr body1446))
                                                                                                                 r1445
                                                                                                                 mr1444
                                                                                                                 ids1443
                                                                                                                 vars1442
                                                                                                                 vals1441
                                                                                                                 inits1440
                                                                                                                 '#t)
                                                                                                               (if (memv
                                                                                                                     t1455
                                                                                                                     '(local-syntax-form))
                                                                                                                   (call-with-values
                                                                                                                     (lambda ()
                                                                                                                       (chi-local-syntax512
                                                                                                                         value1453
                                                                                                                         e1452
                                                                                                                         r1445
                                                                                                                         mr1444
                                                                                                                         w1451
                                                                                                                         ae1450))
                                                                                                                     (lambda (forms1514
                                                                                                                              r1513
                                                                                                                              mr1512
                                                                                                                              w1511
                                                                                                                              ae1510)
                                                                                                                       (parse1438
                                                                                                                         ((letrec ((f1515 (lambda (forms1516)
                                                                                                                                            (if (null?
                                                                                                                                                  forms1516)
                                                                                                                                                (cdr body1446)
                                                                                                                                                (cons
                                                                                                                                                  (make-frob471
                                                                                                                                                    (wrap438
                                                                                                                                                      (car forms1516)
                                                                                                                                                      w1511)
                                                                                                                                                    meta?1449)
                                                                                                                                                  (f1515
                                                                                                                                                    (cdr forms1516)))))))
                                                                                                                            f1515)
                                                                                                                           forms1514)
                                                                                                                         r1513
                                                                                                                         mr1512
                                                                                                                         ids1443
                                                                                                                         vars1442
                                                                                                                         vals1441
                                                                                                                         inits1440
                                                                                                                         '#f)))
                                                                                                                   (begin
                                                                                                                     (if meta-seen?1439
                                                                                                                         (syntax-error
                                                                                                                           (source-wrap439
                                                                                                                             e1452
                                                                                                                             w1451
                                                                                                                             ae1450)
                                                                                                                           '"invalid meta definition")
                                                                                                                         (void))
                                                                                                                     ((letrec ((f1517 (lambda (body1518)
                                                                                                                                        (if ((lambda (t1519)
                                                                                                                                               (if t1519
                                                                                                                                                   t1519
                                                                                                                                                   (not (frob-meta?474
                                                                                                                                                          (car body1518)))))
                                                                                                                                              (null?
                                                                                                                                                body1518))
                                                                                                                                            (return1437
                                                                                                                                              r1445
                                                                                                                                              mr1444
                                                                                                                                              body1518
                                                                                                                                              ids1443
                                                                                                                                              vars1442
                                                                                                                                              vals1441
                                                                                                                                              inits1440)
                                                                                                                                            (begin
                                                                                                                                              (top-level-eval-hook133
                                                                                                                                                (chi-meta-frob491
                                                                                                                                                  (car body1518)
                                                                                                                                                  mr1444))
                                                                                                                                              (f1517
                                                                                                                                                (cdr body1518)))))))
                                                                                                                        f1517)
                                                                                                                       (cons
                                                                                                                         (make-frob471
                                                                                                                           (source-wrap439
                                                                                                                             e1452
                                                                                                                             w1451
                                                                                                                             ae1450)
                                                                                                                           meta?1449)
                                                                                                                         (cdr body1446))))))))))))))
                                                                              type1454))))))
                                                                    (frob-meta?474
                                                                      fr1447)))
                                                                 (frob-e473
                                                                   fr1447)))
                                                              (car body1446))))))
                                    parse1438) body1434 r1433 mr1432 '()
                                   '() '() '() '#f))))
            (import-mark-delta500 (lambda (mid1430 iface1429)
                                    (diff-marks421
                                      (id-marks316 mid1430)
                                      (interface-marks448 iface1429))))
            (lookup-import-label501 (lambda (id1427)
                                      ((lambda (label1428)
                                         (begin
                                           (if (not label1428)
                                               (syntax-error
                                                 id1427
                                                 '"exported identifier not visible")
                                               (void))
                                           label1428))
                                        (id-var-name-loc428
                                          id1427
                                          '(())))))
            (do-import!502 (lambda (import-iface1423 ribcage1422)
                             ((lambda (ie1424)
                                (if (<= (vector-length ie1424) '20)
                                    ((lambda (new-marks1425)
                                       (vfor-each483
                                         (lambda (id1426)
                                           (import-extend-ribcage!406
                                             ribcage1422
                                             new-marks1425
                                             id1426
                                             (lookup-import-label501
                                               id1426)))
                                         ie1424))
                                      (import-interface-new-marks377
                                        import-iface1423))
                                    (extend-ribcage-subst!409
                                      ribcage1422
                                      import-iface1423)))
                               (interface-exports449
                                 (import-interface-interface376
                                   import-iface1423)))))
            (parse-module503 (lambda (e1398 w1397 ae1396 *w1395)
                               (letrec ((listify1399 (lambda (exports1416)
                                                       (if (null?
                                                             exports1416)
                                                           '()
                                                           (cons
                                                             ((lambda (tmp1417)
                                                                ((lambda (tmp1418)
                                                                   (if tmp1418
                                                                       (apply
                                                                         (lambda (ex1419)
                                                                           (listify1399
                                                                             ex1419))
                                                                         tmp1418)
                                                                       ((lambda (x1421)
                                                                          (if (id?310
                                                                                x1421)
                                                                              (wrap438
                                                                                x1421
                                                                                *w1395)
                                                                              (syntax-error
                                                                                (source-wrap439
                                                                                  e1398
                                                                                  w1397
                                                                                  ae1396)
                                                                                '"invalid exports list in")))
                                                                         tmp1417)))
                                                                  ($syntax-dispatch
                                                                    tmp1417
                                                                    'each-any)))
                                                               (car exports1416))
                                                             (listify1399
                                                               (cdr exports1416)))))))
                                 ((lambda (tmp1400)
                                    ((lambda (tmp1401)
                                       (if (if tmp1401
                                               (apply
                                                 (lambda (_1406 orig1405
                                                          mid1404 ex1403
                                                          form1402)
                                                   (id?310 mid1404))
                                                 tmp1401)
                                               '#f)
                                           (apply
                                             (lambda (_1411 orig1410
                                                      mid1409 ex1408
                                                      form1407)
                                               (values
                                                 orig1410
                                                 (wrap438 mid1409 w1397)
                                                 (listify1399 ex1408)
                                                 (map (lambda (x1413)
                                                        (wrap438
                                                          x1413
                                                          *w1395))
                                                      form1407)))
                                             tmp1401)
                                           ((lambda (_1415)
                                              (syntax-error
                                                (source-wrap439
                                                  e1398
                                                  w1397
                                                  ae1396)))
                                             tmp1400)))
                                      ($syntax-dispatch
                                        tmp1400
                                        '(any any any each-any .
                                              each-any))))
                                   e1398))))
            (parse-import504 (lambda (e1378 w1377 ae1376)
                               ((lambda (tmp1379)
                                  ((lambda (tmp1380)
                                     (if (if tmp1380
                                             (apply
                                               (lambda (_1383 orig1382
                                                        mid1381)
                                                 (id?310 mid1381))
                                               tmp1380)
                                             '#f)
                                         (apply
                                           (lambda (_1386 orig1385 mid1384)
                                             (values
                                               orig1385
                                               '#t
                                               (wrap438 mid1384 w1377)))
                                           tmp1380)
                                         ((lambda (tmp1387)
                                            (if (if tmp1387
                                                    (apply
                                                      (lambda (_1390
                                                               orig1389
                                                               mid1388)
                                                        (id?310 mid1388))
                                                      tmp1387)
                                                    '#f)
                                                (apply
                                                  (lambda (_1393 orig1392
                                                           mid1391)
                                                    (values
                                                      orig1392
                                                      '#f
                                                      (wrap438
                                                        mid1391
                                                        w1377)))
                                                  tmp1387)
                                                ((lambda (_1394)
                                                   (syntax-error
                                                     (source-wrap439
                                                       e1378
                                                       w1377
                                                       ae1376)))
                                                  tmp1379)))
                                           ($syntax-dispatch
                                             tmp1379
                                             '(any any #(atom #f) any)))))
                                    ($syntax-dispatch
                                      tmp1379
                                      '(any any #(atom #t) any))))
                                 e1378)))
            (parse-define505 (lambda (e1349 w1348 ae1347)
                               ((lambda (tmp1350)
                                  ((lambda (tmp1351)
                                     (if (if tmp1351
                                             (apply
                                               (lambda (_1354 name1353
                                                        val1352)
                                                 (id?310 name1353))
                                               tmp1351)
                                             '#f)
                                         (apply
                                           (lambda (_1357 name1356 val1355)
                                             (values
                                               name1356
                                               val1355
                                               w1348))
                                           tmp1351)
                                         ((lambda (tmp1358)
                                            (if (if tmp1358
                                                    (apply
                                                      (lambda (_1363
                                                               name1362
                                                               args1361
                                                               e11360
                                                               e21359)
                                                        (if (id?310
                                                              name1362)
                                                            (valid-bound-ids?434
                                                              (lambda-var-list519
                                                                args1361))
                                                            '#f))
                                                      tmp1358)
                                                    '#f)
                                                (apply
                                                  (lambda (_1368 name1367
                                                           args1366 e11365
                                                           e21364)
                                                    (values
                                                      (wrap438
                                                        name1367
                                                        w1348)
                                                      (cons
                                                        '#(syntax-object lambda ((top) #(ribcage #(_ name args e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(e w ae) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                        (wrap438
                                                          (cons
                                                            args1366
                                                            (cons
                                                              e11365
                                                              e21364))
                                                          w1348))
                                                      '(())))
                                                  tmp1358)
                                                ((lambda (tmp1370)
                                                   (if (if tmp1370
                                                           (apply
                                                             (lambda (_1372
                                                                      name1371)
                                                               (id?310
                                                                 name1371))
                                                             tmp1370)
                                                           '#f)
                                                       (apply
                                                         (lambda (_1374
                                                                  name1373)
                                                           (values
                                                             (wrap438
                                                               name1373
                                                               w1348)
                                                             '#(syntax-object (void) ((top) #(ribcage #(_ name) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(e w ae) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                             '(())))
                                                         tmp1370)
                                                       ((lambda (_1375)
                                                          (syntax-error
                                                            (source-wrap439
                                                              e1349
                                                              w1348
                                                              ae1347)))
                                                         tmp1350)))
                                                  ($syntax-dispatch
                                                    tmp1350
                                                    '(any any)))))
                                           ($syntax-dispatch
                                             tmp1350
                                             '(any (any . any)
                                                   any
                                                   .
                                                   each-any)))))
                                    ($syntax-dispatch
                                      tmp1350
                                      '(any any any))))
                                 e1349)))
            (parse-define-syntax506 (lambda (e1325 w1324 ae1323)
                                      ((lambda (tmp1326)
                                         ((lambda (tmp1327)
                                            (if (if tmp1327
                                                    (apply
                                                      (lambda (_1332
                                                               name1331
                                                               id1330
                                                               e11329
                                                               e21328)
                                                        (if (id?310
                                                              name1331)
                                                            (id?310 id1330)
                                                            '#f))
                                                      tmp1327)
                                                    '#f)
                                                (apply
                                                  (lambda (_1337 name1336
                                                           id1335 e11334
                                                           e21333)
                                                    (values
                                                      (wrap438
                                                        name1336
                                                        w1324)
                                                      (cons
                                                        '#(syntax-object lambda ((top) #(ribcage #(_ name id e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(e w ae) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                        (cons
                                                          (wrap438
                                                            (list id1335)
                                                            w1324)
                                                          (wrap438
                                                            (cons
                                                              e11334
                                                              e21333)
                                                            w1324)))
                                                      '(())))
                                                  tmp1327)
                                                ((lambda (tmp1339)
                                                   (if (if tmp1339
                                                           (apply
                                                             (lambda (_1342
                                                                      name1341
                                                                      val1340)
                                                               (id?310
                                                                 name1341))
                                                             tmp1339)
                                                           '#f)
                                                       (apply
                                                         (lambda (_1345
                                                                  name1344
                                                                  val1343)
                                                           (values
                                                             name1344
                                                             val1343
                                                             w1324))
                                                         tmp1339)
                                                       ((lambda (_1346)
                                                          (syntax-error
                                                            (source-wrap439
                                                              e1325
                                                              w1324
                                                              ae1323)))
                                                         tmp1326)))
                                                  ($syntax-dispatch
                                                    tmp1326
                                                    '(any any any)))))
                                           ($syntax-dispatch
                                             tmp1326
                                             '(any (any any)
                                                   any
                                                   .
                                                   each-any))))
                                        e1325)))
            (parse-meta507 (lambda (e1317 w1316 ae1315)
                             ((lambda (tmp1318)
                                ((lambda (tmp1319)
                                   (if tmp1319
                                       (apply
                                         (lambda (_1321 form1320) form1320)
                                         tmp1319)
                                       ((lambda (_1322)
                                          (syntax-error
                                            (source-wrap439
                                              e1317
                                              w1316
                                              ae1315)))
                                         tmp1318)))
                                  ($syntax-dispatch tmp1318 '(any . any))))
                               e1317)))
            (parse-eval-when508 (lambda (e1305 w1304 ae1303)
                                  ((lambda (tmp1306)
                                     ((lambda (tmp1307)
                                        (if tmp1307
                                            (apply
                                              (lambda (_1311 x1310 e11309
                                                       e21308)
                                                (values
                                                  (chi-when-list440
                                                    x1310
                                                    w1304)
                                                  (cons e11309 e21308)))
                                              tmp1307)
                                            ((lambda (_1314)
                                               (syntax-error
                                                 (source-wrap439
                                                   e1305
                                                   w1304
                                                   ae1303)))
                                              tmp1306)))
                                       ($syntax-dispatch
                                         tmp1306
                                         '(any each-any any . each-any))))
                                    e1305)))
            (parse-alias509 (lambda (e1293 w1292 ae1291)
                              ((lambda (tmp1294)
                                 ((lambda (tmp1295)
                                    (if (if tmp1295
                                            (apply
                                              (lambda (_1298 new-id1297
                                                       old-id1296)
                                                (if (id?310 new-id1297)
                                                    (id?310 old-id1296)
                                                    '#f))
                                              tmp1295)
                                            '#f)
                                        (apply
                                          (lambda (_1301 new-id1300
                                                   old-id1299)
                                            (values new-id1300 old-id1299))
                                          tmp1295)
                                        ((lambda (_1302)
                                           (syntax-error
                                             (source-wrap439
                                               e1293
                                               w1292
                                               ae1291)))
                                          tmp1294)))
                                   ($syntax-dispatch
                                     tmp1294
                                     '(any any any))))
                                e1293)))
            (parse-begin510 (lambda (e1280 w1279 ae1278 empty-okay?1277)
                              ((lambda (tmp1281)
                                 ((lambda (tmp1282)
                                    (if (if tmp1282
                                            (apply
                                              (lambda (_1283)
                                                empty-okay?1277)
                                              tmp1282)
                                            '#f)
                                        (apply
                                          (lambda (_1284) '())
                                          tmp1282)
                                        ((lambda (tmp1285)
                                           (if tmp1285
                                               (apply
                                                 (lambda (_1288 e11287
                                                          e21286)
                                                   (cons e11287 e21286))
                                                 tmp1285)
                                               ((lambda (_1290)
                                                  (syntax-error
                                                    (source-wrap439
                                                      e1280
                                                      w1279
                                                      ae1278)))
                                                 tmp1281)))
                                          ($syntax-dispatch
                                            tmp1281
                                            '(any any . each-any)))))
                                   ($syntax-dispatch tmp1281 '(any))))
                                e1280)))
            (chi-lambda-clause511 (lambda (e1254 c1253 r1252 mr1251
                                           w1250 m?1249)
                                    ((lambda (tmp1255)
                                       ((lambda (tmp1256)
                                          (if tmp1256
                                              (apply
                                                (lambda (id1259 e11258
                                                         e21257)
                                                  ((lambda (ids1260)
                                                     (if (not (valid-bound-ids?434
                                                                ids1260))
                                                         (syntax-error
                                                           e1254
                                                           '"invalid parameter list in")
                                                         ((lambda (labels1262
                                                                   new-vars1261)
                                                            (values
                                                              new-vars1261
                                                              (chi-body498
                                                                (cons
                                                                  e11258
                                                                  e21257)
                                                                e1254
                                                                (extend-var-env*301
                                                                  labels1262
                                                                  new-vars1261
                                                                  r1252)
                                                                mr1251
                                                                (make-binding-wrap412
                                                                  ids1260
                                                                  labels1262
                                                                  w1250)
                                                                m?1249)))
                                                           (gen-labels359
                                                             ids1260)
                                                           (map gen-var518
                                                                ids1260))))
                                                    id1259))
                                                tmp1256)
                                              ((lambda (tmp1265)
                                                 (if tmp1265
                                                     (apply
                                                       (lambda (ids1268
                                                                e11267
                                                                e21266)
                                                         ((lambda (old-ids1269)
                                                            (if (not (valid-bound-ids?434
                                                                       old-ids1269))
                                                                (syntax-error
                                                                  e1254
                                                                  '"invalid parameter list in")
                                                                ((lambda (labels1271
                                                                          new-vars1270)
                                                                   (values
                                                                     ((letrec ((f1273 (lambda (ls11275
                                                                                               ls21274)
                                                                                        (if (null?
                                                                                              ls11275)
                                                                                            ls21274
                                                                                            (f1273
                                                                                              (cdr ls11275)
                                                                                              (cons
                                                                                                (car ls11275)
                                                                                                ls21274))))))
                                                                        f1273)
                                                                       (cdr new-vars1270)
                                                                       (car new-vars1270))
                                                                     (chi-body498
                                                                       (cons
                                                                         e11267
                                                                         e21266)
                                                                       e1254
                                                                       (extend-var-env*301
                                                                         labels1271
                                                                         new-vars1270
                                                                         r1252)
                                                                       mr1251
                                                                       (make-binding-wrap412
                                                                         old-ids1269
                                                                         labels1271
                                                                         w1250)
                                                                       m?1249)))
                                                                  (gen-labels359
                                                                    old-ids1269)
                                                                  (map gen-var518
                                                                       old-ids1269))))
                                                           (lambda-var-list519
                                                             ids1268)))
                                                       tmp1265)
                                                     ((lambda (_1276)
                                                        (syntax-error
                                                          e1254))
                                                       tmp1255)))
                                                ($syntax-dispatch
                                                  tmp1255
                                                  '(any any . each-any)))))
                                         ($syntax-dispatch
                                           tmp1255
                                           '(each-any any . each-any))))
                                      c1253)))
            (chi-local-syntax512 (lambda (rec?1230 e1229 r1228 mr1227
                                          w1226 ae1225)
                                   ((lambda (tmp1231)
                                      ((lambda (tmp1232)
                                         (if tmp1232
                                             (apply
                                               (lambda (_1237 id1236
                                                        val1235 e11234
                                                        e21233)
                                                 ((lambda (ids1238)
                                                    (if (not (valid-bound-ids?434
                                                               ids1238))
                                                        (invalid-ids-error436
                                                          (map (lambda (x1239)
                                                                 (wrap438
                                                                   x1239
                                                                   w1226))
                                                               ids1238)
                                                          (source-wrap439
                                                            e1229
                                                            w1226
                                                            ae1225)
                                                          '"keyword")
                                                        ((lambda (labels1240)
                                                           ((lambda (new-w1241)
                                                              ((lambda (b*1242)
                                                                 (values
                                                                   (cons
                                                                     e11234
                                                                     e21233)
                                                                   (extend-env*300
                                                                     labels1240
                                                                     b*1242
                                                                     r1228)
                                                                   (extend-env*300
                                                                     labels1240
                                                                     b*1242
                                                                     mr1227)
                                                                   new-w1241
                                                                   ae1225))
                                                                ((lambda (w1244)
                                                                   (map (lambda (x1246)
                                                                          (defer-or-eval-transformer307
                                                                            local-eval-hook134
                                                                            (chi493
                                                                              x1246
                                                                              mr1227
                                                                              mr1227
                                                                              w1244
                                                                              '#t)))
                                                                        val1235))
                                                                  (if rec?1230
                                                                      new-w1241
                                                                      w1226))))
                                                             (make-binding-wrap412
                                                               ids1238
                                                               labels1240
                                                               w1226)))
                                                          (gen-labels359
                                                            ids1238))))
                                                   id1236))
                                               tmp1232)
                                             ((lambda (_1248)
                                                (syntax-error
                                                  (source-wrap439
                                                    e1229
                                                    w1226
                                                    ae1225)))
                                               tmp1231)))
                                        ($syntax-dispatch
                                          tmp1231
                                          '(any #(each (any any))
                                                any
                                                .
                                                each-any))))
                                     e1229)))
            (chi-void513 (lambda () (list 'void)))
            (ellipsis?514 (lambda (x1224)
                            (if (nonsymbol-id?309 x1224)
                                (literal-id=?431
                                  x1224
                                  '#(syntax-object ... ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                '#f)))
            (strip-annotation515 (lambda (x1223)
                                   (if (pair? x1223)
                                       (cons
                                         (strip-annotation515 (car x1223))
                                         (strip-annotation515 (cdr x1223)))
                                       (if (annotation?132 x1223)
                                           (annotation-stripped x1223)
                                           x1223))))
            (strip*516 (lambda (x1216 w1215 fn1214)
                         (if (memq 'top (wrap-marks320 w1215))
                             (fn1214 x1216)
                             ((letrec ((f1217 (lambda (x1218)
                                                (if (syntax-object?64
                                                      x1218)
                                                    (strip*516
                                                      (syntax-object-expression65
                                                        x1218)
                                                      (syntax-object-wrap66
                                                        x1218)
                                                      fn1214)
                                                    (if (pair? x1218)
                                                        ((lambda (a1220
                                                                  d1219)
                                                           (if (if (eq? a1220
                                                                        (car x1218))
                                                                   (eq? d1219
                                                                        (cdr x1218))
                                                                   '#f)
                                                               x1218
                                                               (cons
                                                                 a1220
                                                                 d1219)))
                                                          (f1217
                                                            (car x1218))
                                                          (f1217
                                                            (cdr x1218)))
                                                        (if (vector? x1218)
                                                            ((lambda (old1221)
                                                               ((lambda (new1222)
                                                                  (if (andmap
                                                                        eq?
                                                                        old1221
                                                                        new1222)
                                                                      x1218
                                                                      (list->vector
                                                                        new1222)))
                                                                 (map f1217
                                                                      old1221)))
                                                              (vector->list
                                                                x1218))
                                                            x1218))))))
                                f1217)
                               x1216))))
            (strip517 (lambda (x1211 w1210)
                        (strip*516
                          x1211
                          w1210
                          (lambda (x1212)
                            (if ((lambda (t1213)
                                   (if t1213
                                       t1213
                                       (if (pair? x1212)
                                           (annotation?132 (car x1212))
                                           '#f)))
                                  (annotation?132 x1212))
                                (strip-annotation515 x1212)
                                x1212)))))
            (gen-var518 (lambda (id1208)
                          ((lambda (id1209)
                             (if (annotation?132 id1209)
                                 (gensym)
                                 (gensym)))
                            (if (syntax-object?64 id1208)
                                (syntax-object-expression65 id1208)
                                id1208))))
            (lambda-var-list519 (lambda (vars1203)
                                  ((letrec ((lvl1204 (lambda (vars1207
                                                              ls1206 w1205)
                                                       (if (pair? vars1207)
                                                           (lvl1204
                                                             (cdr vars1207)
                                                             (cons
                                                               (wrap438
                                                                 (car vars1207)
                                                                 w1205)
                                                               ls1206)
                                                             w1205)
                                                           (if (id?310
                                                                 vars1207)
                                                               (cons
                                                                 (wrap438
                                                                   vars1207
                                                                   w1205)
                                                                 ls1206)
                                                               (if (null?
                                                                     vars1207)
                                                                   ls1206
                                                                   (if (syntax-object?64
                                                                         vars1207)
                                                                       (lvl1204
                                                                         (syntax-object-expression65
                                                                           vars1207)
                                                                         ls1206
                                                                         (join-wraps417
                                                                           w1205
                                                                           (syntax-object-wrap66
                                                                             vars1207)))
                                                                       (if (annotation?132
                                                                             vars1207)
                                                                           (lvl1204
                                                                             (annotation-expression
                                                                               vars1207)
                                                                             ls1206
                                                                             w1205)
                                                                           (cons
                                                                             vars1207
                                                                             ls1206)))))))))
                                     lvl1204)
                                    vars1203
                                    '()
                                    '(())))))
     (begin
       (set! $sc-put-cte
         (lambda (id1184 b1183 top-token1182)
           (letrec ((sc-put-module1185 (lambda (exports1201 token1200
                                                new-marks1199)
                                         (vfor-each483
                                           (lambda (id1202)
                                             (store-import-binding411
                                               id1202
                                               token1200
                                               new-marks1199))
                                           exports1201)))
                    (put-cte1186 (lambda (id1197 binding1196 token1195)
                                   ((lambda (sym1198)
                                      (begin
                                        (store-import-binding411
                                          id1197
                                          token1195
                                          '())
                                        (put-global-definition-hook143
                                          sym1198
                                          (if (if (eq? (binding-type285
                                                         binding1196)
                                                       'global)
                                                  (eq? (binding-value286
                                                         binding1196)
                                                       sym1198)
                                                  '#f)
                                              '#f
                                              binding1196))))
                                     (if (symbol? id1197)
                                         id1197
                                         (id-var-name429 id1197 '(())))))))
             ((lambda (binding1187)
                ((lambda (t1188)
                   (if (memv t1188 '($module))
                       (begin
                         ((lambda (iface1189)
                            (sc-put-module1185
                              (interface-exports449 iface1189)
                              (interface-token450 iface1189)
                              '()))
                           (binding-value286 binding1187))
                         (put-cte1186 id1184 binding1187 top-token1182))
                       (if (memv t1188 '(do-alias))
                           (store-import-binding411
                             id1184
                             top-token1182
                             '())
                           (if (memv t1188 '(do-import))
                               ((lambda (token1190)
                                  ((lambda (b1191)
                                     ((lambda (t1192)
                                        (if (memv t1192 '($module))
                                            ((lambda (iface1193)
                                               ((lambda (exports1194)
                                                  ((lambda ()
                                                     (begin
                                                       (if (not (eq? (interface-token450
                                                                       iface1193)
                                                                     token1190))
                                                           (syntax-error
                                                             id1184
                                                             '"import mismatch for module")
                                                           (void))
                                                       (sc-put-module1185
                                                         (interface-exports449
                                                           iface1193)
                                                         top-token1182
                                                         (import-mark-delta500
                                                           id1184
                                                           iface1193))))))
                                                 (interface-exports449
                                                   iface1193)))
                                              (binding-value286 b1191))
                                            (syntax-error
                                              id1184
                                              '"unknown module")))
                                       (binding-type285 b1191)))
                                    (lookup305
                                      (id-var-name429 id1184 '(()))
                                      '())))
                                 (binding-value286 b1183))
                               (put-cte1186
                                 id1184
                                 binding1187
                                 top-token1182)))))
                  (binding-type285 binding1187)))
               (make-transformer-binding306 b1183)))))
       (global-extend308 'local-syntax 'letrec-syntax '#t)
       (global-extend308 'local-syntax 'let-syntax '#f)
       (global-extend308
         'core
         'fluid-let-syntax
         (lambda (e1156 r1155 mr1154 w1153 ae1152 m?1151)
           ((lambda (tmp1157)
              ((lambda (tmp1158)
                 (if (if tmp1158
                         (apply
                           (lambda (_1163 var1162 val1161 e11160 e21159)
                             (valid-bound-ids?434 var1162))
                           tmp1158)
                         '#f)
                     (apply
                       (lambda (_1169 var1168 val1167 e11166 e21165)
                         ((lambda (names1170)
                            (begin
                              (for-each
                                (lambda (id1177 n1176)
                                  ((lambda (t1178)
                                     (if (memv t1178 '(displaced-lexical))
                                         (displaced-lexical-error303
                                           (wrap438 id1177 w1153))
                                         (void)))
                                    (binding-type285
                                      (lookup305 n1176 r1155))))
                                var1168
                                names1170)
                              ((lambda (b*1171)
                                 (chi-body498 (cons e11166 e21165)
                                   (source-wrap439 e1156 w1153 ae1152)
                                   (extend-env*300 names1170 b*1171 r1155)
                                   (extend-env*300 names1170 b*1171 mr1154)
                                   w1153 m?1151))
                                (map (lambda (x1174)
                                       (defer-or-eval-transformer307
                                         local-eval-hook134
                                         (chi493 x1174 mr1154 mr1154 w1153
                                           '#t)))
                                     val1167))))
                           (map (lambda (x1180)
                                  (id-var-name429 x1180 w1153))
                                var1168)))
                       tmp1158)
                     ((lambda (_1181)
                        (syntax-error (source-wrap439 e1156 w1153 ae1152)))
                       tmp1157)))
                ($syntax-dispatch
                  tmp1157
                  '(any #(each (any any)) any . each-any))))
             e1156)))
       (global-extend308
         'core
         'quote
         (lambda (e1145 r1144 mr1143 w1142 ae1141 m?1140)
           ((lambda (tmp1146)
              ((lambda (tmp1147)
                 (if tmp1147
                     (apply
                       (lambda (_1149 e1148)
                         (list 'quote (strip517 e1148 w1142)))
                       tmp1147)
                     ((lambda (_1150)
                        (syntax-error (source-wrap439 e1145 w1142 ae1141)))
                       tmp1146)))
                ($syntax-dispatch tmp1146 '(any any))))
             e1145)))
       (global-extend308
         'core
         'syntax
         ((lambda ()
            (letrec ((gen-syntax1025 (lambda (src1085 e1084 r1083
                                              maps1082 ellipsis?1081)
                                       (if (id?310 e1084)
                                           ((lambda (label1086)
                                              ((lambda (b1087)
                                                 (if (eq? (binding-type285
                                                            b1087)
                                                          'syntax)
                                                     (call-with-values
                                                       (lambda ()
                                                         ((lambda (var.lev1090)
                                                            (gen-ref1026
                                                              src1085
                                                              (car var.lev1090)
                                                              (cdr var.lev1090)
                                                              maps1082))
                                                           (binding-value286
                                                             b1087)))
                                                       (lambda (var1089
                                                                maps1088)
                                                         (values
                                                           (list
                                                             'ref
                                                             var1089)
                                                           maps1088)))
                                                     (if (ellipsis?1081
                                                           e1084)
                                                         (syntax-error
                                                           src1085
                                                           '"misplaced ellipsis in syntax form")
                                                         (values
                                                           (list
                                                             'quote
                                                             e1084)
                                                           maps1082))))
                                                (lookup305
                                                  label1086
                                                  r1083)))
                                             (id-var-name429 e1084 '(())))
                                           ((lambda (tmp1091)
                                              ((lambda (tmp1092)
                                                 (if (if tmp1092
                                                         (apply
                                                           (lambda (dots1094
                                                                    e1093)
                                                             (ellipsis?1081
                                                               dots1094))
                                                           tmp1092)
                                                         '#f)
                                                     (apply
                                                       (lambda (dots1096
                                                                e1095)
                                                         (gen-syntax1025
                                                           src1085 e1095
                                                           r1083 maps1082
                                                           (lambda (x1097)
                                                             '#f)))
                                                       tmp1092)
                                                     ((lambda (tmp1098)
                                                        (if (if tmp1098
                                                                (apply
                                                                  (lambda (x1101
                                                                           dots1100
                                                                           y1099)
                                                                    (ellipsis?1081
                                                                      dots1100))
                                                                  tmp1098)
                                                                '#f)
                                                            (apply
                                                              (lambda (x1104
                                                                       dots1103
                                                                       y1102)
                                                                ((letrec ((f1105 (lambda (y1107
                                                                                          k1106)
                                                                                   ((lambda (tmp1108)
                                                                                      ((lambda (tmp1109)
                                                                                         (if (if tmp1109
                                                                                                 (apply
                                                                                                   (lambda (dots1111
                                                                                                            y1110)
                                                                                                     (ellipsis?1081
                                                                                                       dots1111))
                                                                                                   tmp1109)
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (lambda (dots1113
                                                                                                        y1112)
                                                                                                 (f1105
                                                                                                   y1112
                                                                                                   (lambda (maps1114)
                                                                                                     (call-with-values
                                                                                                       (lambda ()
                                                                                                         (k1106
                                                                                                           (cons
                                                                                                             '()
                                                                                                             maps1114)))
                                                                                                       (lambda (x1116
                                                                                                                maps1115)
                                                                                                         (if (null?
                                                                                                               (car maps1115))
                                                                                                             (syntax-error
                                                                                                               src1085
                                                                                                               '"extra ellipsis in syntax form")
                                                                                                             (values
                                                                                                               (gen-mappend1028
                                                                                                                 x1116
                                                                                                                 (car maps1115))
                                                                                                               (cdr maps1115))))))))
                                                                                               tmp1109)
                                                                                             ((lambda (_1117)
                                                                                                (call-with-values
                                                                                                  (lambda ()
                                                                                                    (gen-syntax1025
                                                                                                      src1085
                                                                                                      y1107
                                                                                                      r1083
                                                                                                      maps1082
                                                                                                      ellipsis?1081))
                                                                                                  (lambda (y1119
                                                                                                           maps1118)
                                                                                                    (call-with-values
                                                                                                      (lambda ()
                                                                                                        (k1106
                                                                                                          maps1118))
                                                                                                      (lambda (x1121
                                                                                                               maps1120)
                                                                                                        (values
                                                                                                          (gen-append1027
                                                                                                            x1121
                                                                                                            y1119)
                                                                                                          maps1120))))))
                                                                                               tmp1108)))
                                                                                        ($syntax-dispatch
                                                                                          tmp1108
                                                                                          '(any .
                                                                                                any))))
                                                                                     y1107))))
                                                                   f1105)
                                                                  y1102
                                                                  (lambda (maps1122)
                                                                    (call-with-values
                                                                      (lambda ()
                                                                        (gen-syntax1025
                                                                          src1085
                                                                          x1104
                                                                          r1083
                                                                          (cons
                                                                            '()
                                                                            maps1122)
                                                                          ellipsis?1081))
                                                                      (lambda (x1124
                                                                               maps1123)
                                                                        (if (null?
                                                                              (car maps1123))
                                                                            (syntax-error
                                                                              src1085
                                                                              '"extra ellipsis in syntax form")
                                                                            (values
                                                                              (gen-map1029
                                                                                x1124
                                                                                (car maps1123))
                                                                              (cdr maps1123))))))))
                                                              tmp1098)
                                                            ((lambda (tmp1125)
                                                               (if tmp1125
                                                                   (apply
                                                                     (lambda (x1127
                                                                              y1126)
                                                                       (call-with-values
                                                                         (lambda ()
                                                                           (gen-syntax1025
                                                                             src1085
                                                                             x1127
                                                                             r1083
                                                                             maps1082
                                                                             ellipsis?1081))
                                                                         (lambda (xnew1129
                                                                                  maps1128)
                                                                           (call-with-values
                                                                             (lambda ()
                                                                               (gen-syntax1025
                                                                                 src1085
                                                                                 y1126
                                                                                 r1083
                                                                                 maps1128
                                                                                 ellipsis?1081))
                                                                             (lambda (ynew1131
                                                                                      maps1130)
                                                                               (values
                                                                                 (gen-cons1030
                                                                                   e1084
                                                                                   x1127
                                                                                   y1126
                                                                                   xnew1129
                                                                                   ynew1131)
                                                                                 maps1130))))))
                                                                     tmp1125)
                                                                   ((lambda (tmp1132)
                                                                      (if tmp1132
                                                                          (apply
                                                                            (lambda (x11134
                                                                                     x21133)
                                                                              ((lambda (ls1135)
                                                                                 (call-with-values
                                                                                   (lambda ()
                                                                                     (gen-syntax1025
                                                                                       src1085
                                                                                       ls1135
                                                                                       r1083
                                                                                       maps1082
                                                                                       ellipsis?1081))
                                                                                   (lambda (lsnew1137
                                                                                            maps1136)
                                                                                     (values
                                                                                       (gen-vector1031
                                                                                         e1084
                                                                                         ls1135
                                                                                         lsnew1137)
                                                                                       maps1136))))
                                                                                (cons
                                                                                  x11134
                                                                                  x21133)))
                                                                            tmp1132)
                                                                          ((lambda (_1139)
                                                                             (values
                                                                               (list
                                                                                 'quote
                                                                                 e1084)
                                                                               maps1082))
                                                                            tmp1091)))
                                                                     ($syntax-dispatch
                                                                       tmp1091
                                                                       '#(vector
                                                                          (any .
                                                                               each-any))))))
                                                              ($syntax-dispatch
                                                                tmp1091
                                                                '(any .
                                                                      any)))))
                                                       ($syntax-dispatch
                                                         tmp1091
                                                         '(any any
                                                               .
                                                               any)))))
                                                ($syntax-dispatch
                                                  tmp1091
                                                  '(any any))))
                                             e1084))))
                     (gen-ref1026 (lambda (src1076 var1075 level1074
                                           maps1073)
                                    (if (= level1074 '0)
                                        (values var1075 maps1073)
                                        (if (null? maps1073)
                                            (syntax-error
                                              src1076
                                              '"missing ellipsis in syntax form")
                                            (call-with-values
                                              (lambda ()
                                                (gen-ref1026
                                                  src1076
                                                  var1075
                                                  (- level1074 '1)
                                                  (cdr maps1073)))
                                              (lambda (outer-var1078
                                                       outer-maps1077)
                                                ((lambda (b1079)
                                                   (if b1079
                                                       (values
                                                         (cdr b1079)
                                                         maps1073)
                                                       ((lambda (inner-var1080)
                                                          (values
                                                            inner-var1080
                                                            (cons
                                                              (cons
                                                                (cons
                                                                  outer-var1078
                                                                  inner-var1080)
                                                                (car maps1073))
                                                              outer-maps1077)))
                                                         (gen-var518
                                                           'tmp))))
                                                  (assq
                                                    outer-var1078
                                                    (car maps1073)))))))))
                     (gen-append1027 (lambda (x1072 y1071)
                                       (if (equal? y1071 ''())
                                           x1072
                                           (list 'append x1072 y1071))))
                     (gen-mappend1028 (lambda (e1070 map-env1069)
                                        (list
                                          'apply
                                          '(primitive append)
                                          (gen-map1029
                                            e1070
                                            map-env1069))))
                     (gen-map1029 (lambda (e1062 map-env1061)
                                    ((lambda (formals1064 actuals1063)
                                       (if (eq? (car e1062) 'ref)
                                           (car actuals1063)
                                           (if (andmap
                                                 (lambda (x1065)
                                                   (if (eq? (car x1065)
                                                            'ref)
                                                       (memq
                                                         (cadr x1065)
                                                         formals1064)
                                                       '#f))
                                                 (cdr e1062))
                                               (cons
                                                 'map
                                                 (cons
                                                   (list
                                                     'primitive
                                                     (car e1062))
                                                   (map ((lambda (r1066)
                                                           (lambda (x1067)
                                                             (cdr (assq
                                                                    (cadr
                                                                      x1067)
                                                                    r1066))))
                                                          (map cons
                                                               formals1064
                                                               actuals1063))
                                                        (cdr e1062))))
                                               (cons
                                                 'map
                                                 (cons
                                                   (list
                                                     'lambda
                                                     formals1064
                                                     e1062)
                                                   actuals1063)))))
                                      (map cdr map-env1061)
                                      (map (lambda (x1068)
                                             (list 'ref (car x1068)))
                                           map-env1061))))
                     (gen-cons1030 (lambda (e1057 x1056 y1055 xnew1054
                                            ynew1053)
                                     ((lambda (t1058)
                                        (if (memv t1058 '(quote))
                                            (if (eq? (car xnew1054) 'quote)
                                                ((lambda (xnew1060
                                                          ynew1059)
                                                   (if (if (eq? xnew1060
                                                                x1056)
                                                           (eq? ynew1059
                                                                y1055)
                                                           '#f)
                                                       (list 'quote e1057)
                                                       (list
                                                         'quote
                                                         (cons
                                                           xnew1060
                                                           ynew1059))))
                                                  (cadr xnew1054)
                                                  (cadr ynew1053))
                                                (if (eq? (cadr ynew1053)
                                                         '())
                                                    (list 'list xnew1054)
                                                    (list
                                                      'cons
                                                      xnew1054
                                                      ynew1053)))
                                            (if (memv t1058 '(list))
                                                (cons
                                                  'list
                                                  (cons
                                                    xnew1054
                                                    (cdr ynew1053)))
                                                (list
                                                  'cons
                                                  xnew1054
                                                  ynew1053))))
                                       (car ynew1053))))
                     (gen-vector1031 (lambda (e1052 ls1051 lsnew1050)
                                       (if (eq? (car lsnew1050) 'quote)
                                           (if (eq? (cadr lsnew1050)
                                                    ls1051)
                                               (list 'quote e1052)
                                               (list
                                                 'quote
                                                 (list->vector
                                                   (cadr lsnew1050))))
                                           (if (eq? (car lsnew1050) 'list)
                                               (cons
                                                 'vector
                                                 (cdr lsnew1050))
                                               (list
                                                 'list->vector
                                                 lsnew1050)))))
                     (regen1032 (lambda (x1047)
                                  ((lambda (t1048)
                                     (if (memv t1048 '(ref))
                                         (cadr x1047)
                                         (if (memv t1048 '(primitive))
                                             (cadr x1047)
                                             (if (memv t1048 '(quote))
                                                 (list 'quote (cadr x1047))
                                                 (if (memv t1048 '(lambda))
                                                     (list
                                                       'lambda
                                                       (cadr x1047)
                                                       (regen1032
                                                         (caddr x1047)))
                                                     (if (memv
                                                           t1048
                                                           '(map))
                                                         ((lambda (ls1049)
                                                            (cons
                                                              (if (= (length
                                                                       ls1049)
                                                                     '2)
                                                                  'map
                                                                  'map)
                                                              ls1049))
                                                           (map regen1032
                                                                (cdr x1047)))
                                                         (cons
                                                           (car x1047)
                                                           (map regen1032
                                                                (cdr x1047)))))))))
                                    (car x1047)))))
              (lambda (e1038 r1037 mr1036 w1035 ae1034 m?1033)
                ((lambda (e1039)
                   ((lambda (tmp1040)
                      ((lambda (tmp1041)
                         (if tmp1041
                             (apply
                               (lambda (_1043 x1042)
                                 (call-with-values
                                   (lambda ()
                                     (gen-syntax1025 e1039 x1042 r1037 '()
                                       ellipsis?514))
                                   (lambda (e1045 maps1044)
                                     (regen1032 e1045))))
                               tmp1041)
                             ((lambda (_1046) (syntax-error e1039))
                               tmp1040)))
                        ($syntax-dispatch tmp1040 '(any any))))
                     e1039))
                  (source-wrap439 e1038 w1035 ae1034)))))))
       (global-extend308
         'core
         'lambda
         (lambda (e1018 r1017 mr1016 w1015 ae1014 m?1013)
           ((lambda (tmp1019)
              ((lambda (tmp1020)
                 (if tmp1020
                     (apply
                       (lambda (_1022 c1021)
                         (call-with-values
                           (lambda ()
                             (chi-lambda-clause511
                               (source-wrap439 e1018 w1015 ae1014) c1021
                               r1017 mr1016 w1015 m?1013))
                           (lambda (vars1024 body1023)
                             (list 'lambda vars1024 body1023))))
                       tmp1020)
                     (syntax-error tmp1019)))
                ($syntax-dispatch tmp1019 '(any . any))))
             e1018)))
       (global-extend308
         'core
         'letrec
         (lambda (e994 r993 mr992 w991 ae990 m?989)
           ((lambda (tmp995)
              ((lambda (tmp996)
                 (if tmp996
                     (apply
                       (lambda (_1001 id1000 val999 e1998 e2997)
                         ((lambda (ids1002)
                            (if (not (valid-bound-ids?434 ids1002))
                                (invalid-ids-error436
                                  (map (lambda (x1003)
                                         (wrap438 x1003 w991))
                                       ids1002)
                                  (source-wrap439 e994 w991 ae990)
                                  '"bound variable")
                                ((lambda (labels1005 new-vars1004)
                                   ((lambda (w1007 r1006)
                                      (build-letrec240
                                        ae990
                                        new-vars1004
                                        (map (lambda (x1010)
                                               (chi493 x1010 r1006 mr992
                                                 w1007 m?989))
                                             val999)
                                        (chi-body498 (cons e1998 e2997)
                                          (source-wrap439 e994 w1007 ae990)
                                          r1006 mr992 w1007 m?989)))
                                     (make-binding-wrap412
                                       ids1002
                                       labels1005
                                       w991)
                                     (extend-var-env*301
                                       labels1005
                                       new-vars1004
                                       r993)))
                                  (gen-labels359 ids1002)
                                  (map gen-var518 ids1002))))
                           id1000))
                       tmp996)
                     ((lambda (_1012)
                        (syntax-error (source-wrap439 e994 w991 ae990)))
                       tmp995)))
                ($syntax-dispatch
                  tmp995
                  '(any #(each (any any)) any . each-any))))
             e994)))
       (global-extend308
         'core
         'if
         (lambda (e977 r976 mr975 w974 ae973 m?972)
           ((lambda (tmp978)
              ((lambda (tmp979)
                 (if tmp979
                     (apply
                       (lambda (_982 test981 then980)
                         (list
                           'if
                           (chi493 test981 r976 mr975 w974 m?972)
                           (chi493 then980 r976 mr975 w974 m?972)
                           (chi-void513)))
                       tmp979)
                     ((lambda (tmp983)
                        (if tmp983
                            (apply
                              (lambda (_987 test986 then985 else984)
                                (list
                                  'if
                                  (chi493 test986 r976 mr975 w974 m?972)
                                  (chi493 then985 r976 mr975 w974 m?972)
                                  (chi493 else984 r976 mr975 w974 m?972)))
                              tmp983)
                            ((lambda (_988)
                               (syntax-error
                                 (source-wrap439 e977 w974 ae973)))
                              tmp978)))
                       ($syntax-dispatch tmp978 '(any any any any)))))
                ($syntax-dispatch tmp978 '(any any any))))
             e977)))
       (global-extend308 'set! 'set! '())
       (global-extend308 'alias 'alias '())
       (global-extend308 'begin 'begin '())
       (global-extend308 '$module-key '$module '())
       (global-extend308 '$import '$import '())
       (global-extend308 'define 'define '())
       (global-extend308 'define-syntax 'define-syntax '())
       (global-extend308 'eval-when 'eval-when '())
       (global-extend308 'meta 'meta '())
       (global-extend308
         'core
         'syntax-case
         ((lambda ()
            (letrec ((convert-pattern844 (lambda (pattern921 keys920)
                                           (letrec ((cvt*922 (lambda (p*967
                                                                      n966
                                                                      ids965)
                                                               (if (null?
                                                                     p*967)
                                                                   (values
                                                                     '()
                                                                     ids965)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (cvt*922
                                                                         (cdr p*967)
                                                                         n966
                                                                         ids965))
                                                                     (lambda (y969
                                                                              ids968)
                                                                       (call-with-values
                                                                         (lambda ()
                                                                           (cvt923
                                                                             (car p*967)
                                                                             n966
                                                                             ids968))
                                                                         (lambda (x971
                                                                                  ids970)
                                                                           (values
                                                                             (cons
                                                                               x971
                                                                               y969)
                                                                             ids970))))))))
                                                    (cvt923 (lambda (p926
                                                                     n925
                                                                     ids924)
                                                              (if (id?310
                                                                    p926)
                                                                  (if (bound-id-member?437
                                                                        p926
                                                                        keys920)
                                                                      (values
                                                                        (vector
                                                                          'free-id
                                                                          p926)
                                                                        ids924)
                                                                      (values
                                                                        'any
                                                                        (cons
                                                                          (cons
                                                                            p926
                                                                            n925)
                                                                          ids924)))
                                                                  ((lambda (tmp927)
                                                                     ((lambda (tmp928)
                                                                        (if (if tmp928
                                                                                (apply
                                                                                  (lambda (x930
                                                                                           dots929)
                                                                                    (ellipsis?514
                                                                                      dots929))
                                                                                  tmp928)
                                                                                '#f)
                                                                            (apply
                                                                              (lambda (x932
                                                                                       dots931)
                                                                                (call-with-values
                                                                                  (lambda ()
                                                                                    (cvt923
                                                                                      x932
                                                                                      (+ n925
                                                                                         '1)
                                                                                      ids924))
                                                                                  (lambda (p934
                                                                                           ids933)
                                                                                    (values
                                                                                      (if (eq? p934
                                                                                               'any)
                                                                                          'each-any
                                                                                          (vector
                                                                                            'each
                                                                                            p934))
                                                                                      ids933))))
                                                                              tmp928)
                                                                            ((lambda (tmp935)
                                                                               (if (if tmp935
                                                                                       (apply
                                                                                         (lambda (x939
                                                                                                  dots938
                                                                                                  y937
                                                                                                  z936)
                                                                                           (ellipsis?514
                                                                                             dots938))
                                                                                         tmp935)
                                                                                       '#f)
                                                                                   (apply
                                                                                     (lambda (x943
                                                                                              dots942
                                                                                              y941
                                                                                              z940)
                                                                                       (call-with-values
                                                                                         (lambda ()
                                                                                           (cvt923
                                                                                             z940
                                                                                             n925
                                                                                             ids924))
                                                                                         (lambda (z945
                                                                                                  ids944)
                                                                                           (call-with-values
                                                                                             (lambda ()
                                                                                               (cvt*922
                                                                                                 y941
                                                                                                 n925
                                                                                                 ids944))
                                                                                             (lambda (y947
                                                                                                      ids946)
                                                                                               (call-with-values
                                                                                                 (lambda ()
                                                                                                   (cvt923
                                                                                                     x943
                                                                                                     (+ n925
                                                                                                        '1)
                                                                                                     ids946))
                                                                                                 (lambda (x949
                                                                                                          ids948)
                                                                                                   (values
                                                                                                     (vector
                                                                                                       'each+
                                                                                                       x949
                                                                                                       (reverse
                                                                                                         y947)
                                                                                                       z945)
                                                                                                     ids948))))))))
                                                                                     tmp935)
                                                                                   ((lambda (tmp951)
                                                                                      (if tmp951
                                                                                          (apply
                                                                                            (lambda (x953
                                                                                                     y952)
                                                                                              (call-with-values
                                                                                                (lambda ()
                                                                                                  (cvt923
                                                                                                    y952
                                                                                                    n925
                                                                                                    ids924))
                                                                                                (lambda (y955
                                                                                                         ids954)
                                                                                                  (call-with-values
                                                                                                    (lambda ()
                                                                                                      (cvt923
                                                                                                        x953
                                                                                                        n925
                                                                                                        ids954))
                                                                                                    (lambda (x957
                                                                                                             ids956)
                                                                                                      (values
                                                                                                        (cons
                                                                                                          x957
                                                                                                          y955)
                                                                                                        ids956))))))
                                                                                            tmp951)
                                                                                          ((lambda (tmp958)
                                                                                             (if tmp958
                                                                                                 (apply
                                                                                                   (lambda ()
                                                                                                     (values
                                                                                                       '()
                                                                                                       ids924))
                                                                                                   tmp958)
                                                                                                 ((lambda (tmp959)
                                                                                                    (if tmp959
                                                                                                        (apply
                                                                                                          (lambda (x960)
                                                                                                            (call-with-values
                                                                                                              (lambda ()
                                                                                                                (cvt923
                                                                                                                  x960
                                                                                                                  n925
                                                                                                                  ids924))
                                                                                                              (lambda (p962
                                                                                                                       ids961)
                                                                                                                (values
                                                                                                                  (vector
                                                                                                                    'vector
                                                                                                                    p962)
                                                                                                                  ids961))))
                                                                                                          tmp959)
                                                                                                        ((lambda (x964)
                                                                                                           (values
                                                                                                             (vector
                                                                                                               'atom
                                                                                                               (strip517
                                                                                                                 p926
                                                                                                                 '(())))
                                                                                                             ids924))
                                                                                                          tmp927)))
                                                                                                   ($syntax-dispatch
                                                                                                     tmp927
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                            ($syntax-dispatch
                                                                                              tmp927
                                                                                              '()))))
                                                                                     ($syntax-dispatch
                                                                                       tmp927
                                                                                       '(any .
                                                                                             any)))))
                                                                              ($syntax-dispatch
                                                                                tmp927
                                                                                '(any any
                                                                                      .
                                                                                      #(each+
                                                                                        any
                                                                                        ()
                                                                                        any))))))
                                                                       ($syntax-dispatch
                                                                         tmp927
                                                                         '(any any))))
                                                                    p926)))))
                                             (cvt923 pattern921 '0 '()))))
                     (build-dispatch-call845 (lambda (pvars913 exp912 y911
                                                      r910 mr909 m?908)
                                               ((lambda (ids915 levels914)
                                                  ((lambda (labels917
                                                            new-vars916)
                                                     (list
                                                       'apply
                                                       (list
                                                         'lambda
                                                         new-vars916
                                                         (chi493 exp912
                                                           (extend-env*300
                                                             labels917
                                                             (map (lambda (var919
                                                                           level918)
                                                                    (cons
                                                                      'syntax
                                                                      (cons
                                                                        var919
                                                                        level918)))
                                                                  new-vars916
                                                                  (map cdr
                                                                       pvars913))
                                                             r910)
                                                           mr909
                                                           (make-binding-wrap412
                                                             ids915
                                                             labels917
                                                             '(()))
                                                           m?908))
                                                       y911))
                                                    (gen-labels359 ids915)
                                                    (map gen-var518
                                                         ids915)))
                                                 (map car pvars913)
                                                 (map cdr pvars913))))
                     (gen-clause846 (lambda (x891 keys890 clauses889 r888
                                             mr887 m?886 pat885 fender884
                                             exp883)
                                      (call-with-values
                                        (lambda ()
                                          (convert-pattern844
                                            pat885
                                            keys890))
                                        (lambda (p893 pvars892)
                                          (if (not (distinct-bound-ids?435
                                                     (map car pvars892)))
                                              (invalid-ids-error436
                                                (map car pvars892)
                                                pat885
                                                '"pattern variable")
                                              (if (not (andmap
                                                         (lambda (x894)
                                                           (not (ellipsis?514
                                                                  (car x894))))
                                                         pvars892))
                                                  (syntax-error
                                                    pat885
                                                    '"misplaced ellipsis in syntax-case pattern")
                                                  ((lambda (y895)
                                                     (list
                                                       (list
                                                         'lambda
                                                         (list y895)
                                                         (list
                                                           'if
                                                           ((lambda (tmp905)
                                                              ((lambda (tmp906)
                                                                 (if tmp906
                                                                     (apply
                                                                       (lambda ()
                                                                         y895)
                                                                       tmp906)
                                                                     ((lambda (_907)
                                                                        (list
                                                                          'if
                                                                          y895
                                                                          (build-dispatch-call845
                                                                            pvars892
                                                                            fender884
                                                                            y895
                                                                            r888
                                                                            mr887
                                                                            m?886)
                                                                          (list
                                                                            'quote
                                                                            '#f)))
                                                                       tmp905)))
                                                                ($syntax-dispatch
                                                                  tmp905
                                                                  '#(atom
                                                                     #t))))
                                                             fender884)
                                                           (build-dispatch-call845
                                                             pvars892
                                                             exp883 y895
                                                             r888 mr887
                                                             m?886)
                                                           (gen-syntax-case847
                                                             x891 keys890
                                                             clauses889
                                                             r888 mr887
                                                             m?886)))
                                                       (if (eq? p893 'any)
                                                           (list
                                                             'list
                                                             x891)
                                                           (list
                                                             '$syntax-dispatch
                                                             x891
                                                             (list
                                                               'quote
                                                               p893)))))
                                                    (gen-var518
                                                      'tmp))))))))
                     (gen-syntax-case847 (lambda (x871 keys870 clauses869
                                                  r868 mr867 m?866)
                                           (if (null? clauses869)
                                               (list 'syntax-error x871)
                                               ((lambda (tmp872)
                                                  ((lambda (tmp873)
                                                     (if tmp873
                                                         (apply
                                                           (lambda (pat875
                                                                    exp874)
                                                             (if (if (id?310
                                                                       pat875)
                                                                     (if (not (bound-id-member?437
                                                                                pat875
                                                                                keys870))
                                                                         (not (ellipsis?514
                                                                                pat875))
                                                                         '#f)
                                                                     '#f)
                                                                 ((lambda (label877
                                                                           var876)
                                                                    (list
                                                                      (list
                                                                        'lambda
                                                                        (list
                                                                          var876)
                                                                        (chi493
                                                                          exp874
                                                                          (extend-env299
                                                                            label877
                                                                            (cons
                                                                              'syntax
                                                                              (cons
                                                                                var876
                                                                                '0))
                                                                            r868)
                                                                          mr867
                                                                          (make-binding-wrap412
                                                                            (list
                                                                              pat875)
                                                                            (list
                                                                              label877)
                                                                            '(()))
                                                                          m?866))
                                                                      x871))
                                                                   (gen-label357)
                                                                   (gen-var518
                                                                     pat875))
                                                                 (gen-clause846
                                                                   x871
                                                                   keys870
                                                                   (cdr clauses869)
                                                                   r868
                                                                   mr867
                                                                   m?866
                                                                   pat875
                                                                   '#t
                                                                   exp874)))
                                                           tmp873)
                                                         ((lambda (tmp878)
                                                            (if tmp878
                                                                (apply
                                                                  (lambda (pat881
                                                                           fender880
                                                                           exp879)
                                                                    (gen-clause846
                                                                      x871
                                                                      keys870
                                                                      (cdr clauses869)
                                                                      r868
                                                                      mr867
                                                                      m?866
                                                                      pat881
                                                                      fender880
                                                                      exp879))
                                                                  tmp878)
                                                                ((lambda (_882)
                                                                   (syntax-error
                                                                     (car clauses869)
                                                                     '"invalid syntax-case clause"))
                                                                  tmp872)))
                                                           ($syntax-dispatch
                                                             tmp872
                                                             '(any any
                                                                   any)))))
                                                    ($syntax-dispatch
                                                      tmp872
                                                      '(any any))))
                                                 (car clauses869))))))
              (lambda (e853 r852 mr851 w850 ae849 m?848)
                ((lambda (e854)
                   ((lambda (tmp855)
                      ((lambda (tmp856)
                         (if tmp856
                             (apply
                               (lambda (_860 val859 key858 m857)
                                 (if (andmap
                                       (lambda (x862)
                                         (if (id?310 x862)
                                             (not (ellipsis?514 x862))
                                             '#f))
                                       key858)
                                     ((lambda (x863)
                                        (list
                                          (list
                                            'lambda
                                            (list x863)
                                            (gen-syntax-case847 x863 key858
                                              m857 r852 mr851 m?848))
                                          (chi493 val859 r852 mr851 '(())
                                            m?848)))
                                       (gen-var518 'tmp))
                                     (syntax-error
                                       e854
                                       '"invalid literals list in")))
                               tmp856)
                             (syntax-error tmp855)))
                        ($syntax-dispatch
                          tmp855
                          '(any any each-any . each-any))))
                     e854))
                  (source-wrap439 e853 w850 ae849)))))))
       (put-cte-hook141
         'module
         (lambda (x813)
           (letrec ((proper-export?814 (lambda (e837)
                                         ((lambda (tmp838)
                                            ((lambda (tmp839)
                                               (if tmp839
                                                   (apply
                                                     (lambda (id841 e840)
                                                       (if (identifier?
                                                             id841)
                                                           (andmap
                                                             proper-export?814
                                                             e840)
                                                           '#f))
                                                     tmp839)
                                                   ((lambda (id843)
                                                      (identifier? id843))
                                                     tmp838)))
                                              ($syntax-dispatch
                                                tmp838
                                                '(any . each-any))))
                                           e837))))
             ((lambda (tmp815)
                ((lambda (orig816)
                   ((lambda (tmp817)
                      ((lambda (tmp818)
                         (if tmp818
                             (apply
                               (lambda (_821 e820 d819)
                                 (if (andmap proper-export?814 e820)
                                     (list
                                       '#(syntax-object begin ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                       (cons
                                         '#(syntax-object $module ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                         (cons
                                           orig816
                                           (cons
                                             '#(syntax-object anon ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                             (cons e820 d819))))
                                       (cons
                                         '#(syntax-object $import ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                         (cons
                                           orig816
                                           '#(syntax-object (#f anon) ((top) #(ribcage #(_ e d) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))))
                                     (syntax-error
                                       x813
                                       '"invalid exports list in")))
                               tmp818)
                             ((lambda (tmp825)
                                (if (if tmp825
                                        (apply
                                          (lambda (_829 m828 e827 d826)
                                            (identifier? m828))
                                          tmp825)
                                        '#f)
                                    (apply
                                      (lambda (_833 m832 e831 d830)
                                        (if (andmap proper-export?814 e831)
                                            (cons
                                              '#(syntax-object $module ((top) #(ribcage #(_ m e d) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage #(orig) #((top)) #("i")) #(ribcage (proper-export?) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                              (cons
                                                orig816
                                                (cons
                                                  m832
                                                  (cons e831 d830))))
                                            (syntax-error
                                              x813
                                              '"invalid exports list in")))
                                      tmp825)
                                    (syntax-error tmp817)))
                               ($syntax-dispatch
                                 tmp817
                                 '(any any each-any . each-any)))))
                        ($syntax-dispatch
                          tmp817
                          '(any each-any . each-any))))
                     x813))
                  tmp815))
               x813))))
       ((lambda ()
          (letrec (($module-exports616 (lambda (m805 r804)
                                         ((lambda (b806)
                                            ((lambda (t807)
                                               (if (memv t807 '($module))
                                                   ((lambda (interface808)
                                                      ((lambda (new-marks809)
                                                         ((lambda ()
                                                            (vmap482
                                                              (lambda (x810)
                                                                ((lambda (id811)
                                                                   (make-syntax-object63
                                                                     (syntax-object->datum
                                                                       id811)
                                                                     ((lambda (marks812)
                                                                        (make-wrap319
                                                                          marks812
                                                                          (if (eq? (car marks812)
                                                                                   '#f)
                                                                              (cons
                                                                                'shift
                                                                                (wrap-subst321
                                                                                  '((top))))
                                                                              (wrap-subst321
                                                                                '((top))))))
                                                                       (join-marks418
                                                                         new-marks809
                                                                         (wrap-marks320
                                                                           (syntax-object-wrap66
                                                                             id811))))))
                                                                  (if (pair?
                                                                        x810)
                                                                      (car x810)
                                                                      x810)))
                                                              (interface-exports449
                                                                interface808)))))
                                                        (import-mark-delta500
                                                          m805
                                                          interface808)))
                                                     (binding-value286
                                                       b806))
                                                   (if (memv
                                                         t807
                                                         '(displaced-lexical))
                                                       (displaced-lexical-error303
                                                         m805)
                                                       (syntax-error
                                                         m805
                                                         '"unknown module"))))
                                              (binding-type285 b806)))
                                           (r804 m805))))
                   ($import-help617 (lambda (orig621 import-only?620)
                                      (lambda (r622)
                                        (letrec ((difference623 (lambda (ls1803
                                                                         ls2802)
                                                                  (if (null?
                                                                        ls1803)
                                                                      ls1803
                                                                      (if (bound-id-member?437
                                                                            (car ls1803)
                                                                            ls2802)
                                                                          (difference623
                                                                            (cdr ls1803)
                                                                            ls2802)
                                                                          (cons
                                                                            (car ls1803)
                                                                            (difference623
                                                                              (cdr ls1803)
                                                                              ls2802))))))
                                                 (prefix-add624 (lambda (prefix-id799)
                                                                  ((lambda (prefix800)
                                                                     (lambda (id801)
                                                                       (datum->syntax-object
                                                                         id801
                                                                         (string->symbol
                                                                           (string-append
                                                                             prefix800
                                                                             (symbol->string
                                                                               (syntax-object->datum
                                                                                 id801)))))))
                                                                    (symbol->string
                                                                      (syntax-object->datum
                                                                        prefix-id799)))))
                                                 (prefix-drop625 (lambda (prefix-id793)
                                                                   ((lambda (prefix794)
                                                                      (lambda (id795)
                                                                        ((lambda (s796)
                                                                           ((lambda (np798
                                                                                     ns797)
                                                                              (begin
                                                                                (if (not (if (>= ns797
                                                                                                 np798)
                                                                                             (string=?
                                                                                               (substring
                                                                                                 s796
                                                                                                 '0
                                                                                                 np798)
                                                                                               prefix794)
                                                                                             '#f))
                                                                                    (syntax-error
                                                                                      id795
                                                                                      (string-append
                                                                                        '"missing expected prefix "
                                                                                        prefix794))
                                                                                    (void))
                                                                                (datum->syntax-object
                                                                                  id795
                                                                                  (string->symbol
                                                                                    (substring
                                                                                      s796
                                                                                      np798
                                                                                      ns797)))))
                                                                             (string-length
                                                                               prefix794)
                                                                             (string-length
                                                                               s796)))
                                                                          (symbol->string
                                                                            (syntax-object->datum
                                                                              id795)))))
                                                                     (symbol->string
                                                                       (syntax-object->datum
                                                                         prefix-id793)))))
                                                 (gen-mid626 (lambda (mid792)
                                                               (datum->syntax-object
                                                                 mid792
                                                                 (gensym))))
                                                 (modspec627 (lambda (m643
                                                                      exports?642)
                                                               ((lambda (tmp644)
                                                                  ((lambda (tmp645)
                                                                     (if tmp645
                                                                         (apply
                                                                           (lambda (orig647
                                                                                    import-only?646)
                                                                             ((lambda (tmp648)
                                                                                ((lambda (tmp649)
                                                                                   (if (if tmp649
                                                                                           (apply
                                                                                             (lambda (m651
                                                                                                      id650)
                                                                                               (andmap
                                                                                                 identifier?
                                                                                                 id650))
                                                                                             tmp649)
                                                                                           '#f)
                                                                                       (apply
                                                                                         (lambda (m654
                                                                                                  id653)
                                                                                           (call-with-values
                                                                                             (lambda ()
                                                                                               (modspec627
                                                                                                 m654
                                                                                                 '#f))
                                                                                             (lambda (mid657
                                                                                                      d656
                                                                                                      exports655)
                                                                                               ((lambda (tmp658)
                                                                                                  ((lambda (tmp659)
                                                                                                     (if tmp659
                                                                                                         (apply
                                                                                                           (lambda (d661
                                                                                                                    tmid660)
                                                                                                             (values
                                                                                                               mid657
                                                                                                               (list
                                                                                                                 '#(syntax-object begin ((top) #(ribcage #(d tmid) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                 (list
                                                                                                                   '#(syntax-object $module ((top) #(ribcage #(d tmid) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                   orig647
                                                                                                                   tmid660
                                                                                                                   id653
                                                                                                                   d661)
                                                                                                                 (list
                                                                                                                   '#(syntax-object $import ((top) #(ribcage #(d tmid) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                   orig647
                                                                                                                   import-only?646
                                                                                                                   tmid660))
                                                                                                               (if exports?642
                                                                                                                   id653
                                                                                                                   '#f)))
                                                                                                           tmp659)
                                                                                                         (syntax-error
                                                                                                           tmp658)))
                                                                                                    ($syntax-dispatch
                                                                                                      tmp658
                                                                                                      '(any any))))
                                                                                                 (list
                                                                                                   d656
                                                                                                   (gen-mid626
                                                                                                     mid657))))))
                                                                                         tmp649)
                                                                                       ((lambda (tmp664)
                                                                                          (if (if tmp664
                                                                                                  (apply
                                                                                                    (lambda (m666
                                                                                                             id665)
                                                                                                      (andmap
                                                                                                        identifier?
                                                                                                        id665))
                                                                                                    tmp664)
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (lambda (m669
                                                                                                         id668)
                                                                                                  (call-with-values
                                                                                                    (lambda ()
                                                                                                      (modspec627
                                                                                                        m669
                                                                                                        '#t))
                                                                                                    (lambda (mid672
                                                                                                             d671
                                                                                                             exports670)
                                                                                                      ((lambda (tmp673)
                                                                                                         ((lambda (tmp675)
                                                                                                            (if tmp675
                                                                                                                (apply
                                                                                                                  (lambda (d678
                                                                                                                           tmid677
                                                                                                                           id676)
                                                                                                                    (values
                                                                                                                      mid672
                                                                                                                      (list
                                                                                                                        '#(syntax-object begin ((top) #(ribcage #(d tmid id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                        (list
                                                                                                                          '#(syntax-object $module ((top) #(ribcage #(d tmid id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                          orig647
                                                                                                                          tmid677
                                                                                                                          id676
                                                                                                                          d678)
                                                                                                                        (list
                                                                                                                          '#(syntax-object $import ((top) #(ribcage #(d tmid id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                          orig647
                                                                                                                          import-only?646
                                                                                                                          tmid677))
                                                                                                                      (if exports?642
                                                                                                                          id676
                                                                                                                          '#f)))
                                                                                                                  tmp675)
                                                                                                                (syntax-error
                                                                                                                  tmp673)))
                                                                                                           ($syntax-dispatch
                                                                                                             tmp673
                                                                                                             '(any any
                                                                                                                   each-any))))
                                                                                                        (list
                                                                                                          d671
                                                                                                          (gen-mid626
                                                                                                            mid672)
                                                                                                          (difference623
                                                                                                            exports670
                                                                                                            id668))))))
                                                                                                tmp664)
                                                                                              ((lambda (tmp681)
                                                                                                 (if (if tmp681
                                                                                                         (apply
                                                                                                           (lambda (m683
                                                                                                                    prefix-id682)
                                                                                                             (identifier?
                                                                                                               prefix-id682))
                                                                                                           tmp681)
                                                                                                         '#f)
                                                                                                     (apply
                                                                                                       (lambda (m685
                                                                                                                prefix-id684)
                                                                                                         (call-with-values
                                                                                                           (lambda ()
                                                                                                             (modspec627
                                                                                                               m685
                                                                                                               '#t))
                                                                                                           (lambda (mid688
                                                                                                                    d687
                                                                                                                    exports686)
                                                                                                             ((lambda (tmp689)
                                                                                                                ((lambda (tmp690)
                                                                                                                   (if tmp690
                                                                                                                       (apply
                                                                                                                         (lambda (d695
                                                                                                                                  tmid694
                                                                                                                                  old-id693
                                                                                                                                  tmp692
                                                                                                                                  id691)
                                                                                                                           (values
                                                                                                                             mid688
                                                                                                                             (list
                                                                                                                               '#(syntax-object begin ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                               (cons
                                                                                                                                 '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                 (cons
                                                                                                                                   orig647
                                                                                                                                   (cons
                                                                                                                                     tmid694
                                                                                                                                     (cons
                                                                                                                                       (map list
                                                                                                                                            id691
                                                                                                                                            tmp692)
                                                                                                                                       (cons
                                                                                                                                         (cons
                                                                                                                                           '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                           (cons
                                                                                                                                             orig647
                                                                                                                                             (cons
                                                                                                                                               tmid694
                                                                                                                                               (cons
                                                                                                                                                 (map list
                                                                                                                                                      tmp692
                                                                                                                                                      old-id693)
                                                                                                                                                 (cons
                                                                                                                                                   d695
                                                                                                                                                   (map (lambda (tmp702
                                                                                                                                                                 tmp701)
                                                                                                                                                          (list
                                                                                                                                                            '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                            tmp701
                                                                                                                                                            tmp702))
                                                                                                                                                        old-id693
                                                                                                                                                        tmp692))))))
                                                                                                                                         (cons
                                                                                                                                           (list
                                                                                                                                             '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                             orig647
                                                                                                                                             import-only?646
                                                                                                                                             tmid694)
                                                                                                                                           (map (lambda (tmp704
                                                                                                                                                         tmp703)
                                                                                                                                                  (list
                                                                                                                                                    '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                    tmp703
                                                                                                                                                    tmp704))
                                                                                                                                                tmp692
                                                                                                                                                id691)))))))
                                                                                                                               (list
                                                                                                                                 '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                 orig647
                                                                                                                                 import-only?646
                                                                                                                                 tmid694))
                                                                                                                             (if exports?642
                                                                                                                                 id691
                                                                                                                                 '#f)))
                                                                                                                         tmp690)
                                                                                                                       (syntax-error
                                                                                                                         tmp689)))
                                                                                                                  ($syntax-dispatch
                                                                                                                    tmp689
                                                                                                                    '(any any
                                                                                                                          each-any
                                                                                                                          each-any
                                                                                                                          each-any))))
                                                                                                               (list
                                                                                                                 d687
                                                                                                                 (gen-mid626
                                                                                                                   mid688)
                                                                                                                 exports686
                                                                                                                 (generate-temporaries
                                                                                                                   exports686)
                                                                                                                 (map (prefix-add624
                                                                                                                        prefix-id684)
                                                                                                                      exports686))))))
                                                                                                       tmp681)
                                                                                                     ((lambda (tmp705)
                                                                                                        (if (if tmp705
                                                                                                                (apply
                                                                                                                  (lambda (m707
                                                                                                                           prefix-id706)
                                                                                                                    (identifier?
                                                                                                                      prefix-id706))
                                                                                                                  tmp705)
                                                                                                                '#f)
                                                                                                            (apply
                                                                                                              (lambda (m709
                                                                                                                       prefix-id708)
                                                                                                                (call-with-values
                                                                                                                  (lambda ()
                                                                                                                    (modspec627
                                                                                                                      m709
                                                                                                                      '#t))
                                                                                                                  (lambda (mid712
                                                                                                                           d711
                                                                                                                           exports710)
                                                                                                                    ((lambda (tmp713)
                                                                                                                       ((lambda (tmp714)
                                                                                                                          (if tmp714
                                                                                                                              (apply
                                                                                                                                (lambda (d719
                                                                                                                                         tmid718
                                                                                                                                         old-id717
                                                                                                                                         tmp716
                                                                                                                                         id715)
                                                                                                                                  (values
                                                                                                                                    mid712
                                                                                                                                    (list
                                                                                                                                      '#(syntax-object begin ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                      (cons
                                                                                                                                        '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                        (cons
                                                                                                                                          orig647
                                                                                                                                          (cons
                                                                                                                                            tmid718
                                                                                                                                            (cons
                                                                                                                                              (map list
                                                                                                                                                   id715
                                                                                                                                                   tmp716)
                                                                                                                                              (cons
                                                                                                                                                (cons
                                                                                                                                                  '#(syntax-object $module ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                  (cons
                                                                                                                                                    orig647
                                                                                                                                                    (cons
                                                                                                                                                      tmid718
                                                                                                                                                      (cons
                                                                                                                                                        (map list
                                                                                                                                                             tmp716
                                                                                                                                                             old-id717)
                                                                                                                                                        (cons
                                                                                                                                                          d719
                                                                                                                                                          (map (lambda (tmp726
                                                                                                                                                                        tmp725)
                                                                                                                                                                 (list
                                                                                                                                                                   '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                   tmp725
                                                                                                                                                                   tmp726))
                                                                                                                                                               old-id717
                                                                                                                                                               tmp716))))))
                                                                                                                                                (cons
                                                                                                                                                  (list
                                                                                                                                                    '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                    orig647
                                                                                                                                                    import-only?646
                                                                                                                                                    tmid718)
                                                                                                                                                  (map (lambda (tmp728
                                                                                                                                                                tmp727)
                                                                                                                                                         (list
                                                                                                                                                           '#(syntax-object alias ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                           tmp727
                                                                                                                                                           tmp728))
                                                                                                                                                       tmp716
                                                                                                                                                       id715)))))))
                                                                                                                                      (list
                                                                                                                                        '#(syntax-object $import ((top) #(ribcage #(d tmid old-id tmp id) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m prefix-id) #((top) (top)) #("i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                        orig647
                                                                                                                                        import-only?646
                                                                                                                                        tmid718))
                                                                                                                                    (if exports?642
                                                                                                                                        id715
                                                                                                                                        '#f)))
                                                                                                                                tmp714)
                                                                                                                              (syntax-error
                                                                                                                                tmp713)))
                                                                                                                         ($syntax-dispatch
                                                                                                                           tmp713
                                                                                                                           '(any any
                                                                                                                                 each-any
                                                                                                                                 each-any
                                                                                                                                 each-any))))
                                                                                                                      (list
                                                                                                                        d711
                                                                                                                        (gen-mid626
                                                                                                                          mid712)
                                                                                                                        exports710
                                                                                                                        (generate-temporaries
                                                                                                                          exports710)
                                                                                                                        (map (prefix-drop625
                                                                                                                               prefix-id708)
                                                                                                                             exports710))))))
                                                                                                              tmp705)
                                                                                                            ((lambda (tmp729)
                                                                                                               (if (if tmp729
                                                                                                                       (apply
                                                                                                                         (lambda (m732
                                                                                                                                  new-id731
                                                                                                                                  old-id730)
                                                                                                                           (if (andmap
                                                                                                                                 identifier?
                                                                                                                                 new-id731)
                                                                                                                               (andmap
                                                                                                                                 identifier?
                                                                                                                                 old-id730)
                                                                                                                               '#f))
                                                                                                                         tmp729)
                                                                                                                       '#f)
                                                                                                                   (apply
                                                                                                                     (lambda (m737
                                                                                                                              new-id736
                                                                                                                              old-id735)
                                                                                                                       (call-with-values
                                                                                                                         (lambda ()
                                                                                                                           (modspec627
                                                                                                                             m737
                                                                                                                             '#t))
                                                                                                                         (lambda (mid740
                                                                                                                                  d739
                                                                                                                                  exports738)
                                                                                                                           ((lambda (tmp741)
                                                                                                                              ((lambda (tmp744)
                                                                                                                                 (if tmp744
                                                                                                                                     (apply
                                                                                                                                       (lambda (d748
                                                                                                                                                tmid747
                                                                                                                                                tmp746
                                                                                                                                                other-id745)
                                                                                                                                         (values
                                                                                                                                           mid740
                                                                                                                                           (list
                                                                                                                                             '#(syntax-object begin ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                             (cons
                                                                                                                                               '#(syntax-object $module ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                               (cons
                                                                                                                                                 orig647
                                                                                                                                                 (cons
                                                                                                                                                   tmid747
                                                                                                                                                   (cons
                                                                                                                                                     (append
                                                                                                                                                       (map list
                                                                                                                                                            new-id736
                                                                                                                                                            tmp746)
                                                                                                                                                       other-id745)
                                                                                                                                                     (cons
                                                                                                                                                       (cons
                                                                                                                                                         '#(syntax-object $module ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                         (cons
                                                                                                                                                           orig647
                                                                                                                                                           (cons
                                                                                                                                                             tmid747
                                                                                                                                                             (cons
                                                                                                                                                               (append
                                                                                                                                                                 other-id745
                                                                                                                                                                 (map list
                                                                                                                                                                      tmp746
                                                                                                                                                                      old-id735))
                                                                                                                                                               (cons
                                                                                                                                                                 d748
                                                                                                                                                                 (map (lambda (tmp758
                                                                                                                                                                               tmp757)
                                                                                                                                                                        (list
                                                                                                                                                                          '#(syntax-object alias ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                          tmp757
                                                                                                                                                                          tmp758))
                                                                                                                                                                      old-id735
                                                                                                                                                                      tmp746))))))
                                                                                                                                                       (cons
                                                                                                                                                         (list
                                                                                                                                                           '#(syntax-object $import ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                           orig647
                                                                                                                                                           import-only?646
                                                                                                                                                           tmid747)
                                                                                                                                                         (map (lambda (tmp760
                                                                                                                                                                       tmp759)
                                                                                                                                                                (list
                                                                                                                                                                  '#(syntax-object alias ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                  tmp759
                                                                                                                                                                  tmp760))
                                                                                                                                                              tmp746
                                                                                                                                                              new-id736)))))))
                                                                                                                                             (list
                                                                                                                                               '#(syntax-object $import ((top) #(ribcage #(d tmid tmp other-id) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                               orig647
                                                                                                                                               import-only?646
                                                                                                                                               tmid747))
                                                                                                                                           (if exports?642
                                                                                                                                               (append
                                                                                                                                                 new-id736
                                                                                                                                                 other-id745)
                                                                                                                                               '#f)))
                                                                                                                                       tmp744)
                                                                                                                                     (syntax-error
                                                                                                                                       tmp741)))
                                                                                                                                ($syntax-dispatch
                                                                                                                                  tmp741
                                                                                                                                  '(any any
                                                                                                                                        each-any
                                                                                                                                        each-any))))
                                                                                                                             (list
                                                                                                                               d739
                                                                                                                               (gen-mid626
                                                                                                                                 mid740)
                                                                                                                               (generate-temporaries
                                                                                                                                 old-id735)
                                                                                                                               (difference623
                                                                                                                                 exports738
                                                                                                                                 old-id735))))))
                                                                                                                     tmp729)
                                                                                                                   ((lambda (tmp761)
                                                                                                                      (if (if tmp761
                                                                                                                              (apply
                                                                                                                                (lambda (m764
                                                                                                                                         new-id763
                                                                                                                                         old-id762)
                                                                                                                                  (if (andmap
                                                                                                                                        identifier?
                                                                                                                                        new-id763)
                                                                                                                                      (andmap
                                                                                                                                        identifier?
                                                                                                                                        old-id762)
                                                                                                                                      '#f))
                                                                                                                                tmp761)
                                                                                                                              '#f)
                                                                                                                          (apply
                                                                                                                            (lambda (m769
                                                                                                                                     new-id768
                                                                                                                                     old-id767)
                                                                                                                              (call-with-values
                                                                                                                                (lambda ()
                                                                                                                                  (modspec627
                                                                                                                                    m769
                                                                                                                                    '#t))
                                                                                                                                (lambda (mid772
                                                                                                                                         d771
                                                                                                                                         exports770)
                                                                                                                                  ((lambda (tmp773)
                                                                                                                                     ((lambda (tmp774)
                                                                                                                                        (if tmp774
                                                                                                                                            (apply
                                                                                                                                              (lambda (d777
                                                                                                                                                       tmid776
                                                                                                                                                       other-id775)
                                                                                                                                                (values
                                                                                                                                                  mid772
                                                                                                                                                  (list
                                                                                                                                                    '#(syntax-object begin ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                    (cons
                                                                                                                                                      '#(syntax-object $module ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                      (cons
                                                                                                                                                        orig647
                                                                                                                                                        (cons
                                                                                                                                                          tmid776
                                                                                                                                                          (cons
                                                                                                                                                            (append
                                                                                                                                                              (map list
                                                                                                                                                                   new-id768
                                                                                                                                                                   old-id767)
                                                                                                                                                              other-id775)
                                                                                                                                                            (cons
                                                                                                                                                              d777
                                                                                                                                                              (map (lambda (tmp784
                                                                                                                                                                            tmp783)
                                                                                                                                                                     (list
                                                                                                                                                                       '#(syntax-object alias ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                                       tmp783
                                                                                                                                                                       tmp784))
                                                                                                                                                                   old-id767
                                                                                                                                                                   new-id768))))))
                                                                                                                                                    (list
                                                                                                                                                      '#(syntax-object $import ((top) #(ribcage #(d tmid other-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(mid d exports) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(m new-id old-id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                      orig647
                                                                                                                                                      import-only?646
                                                                                                                                                      tmid776))
                                                                                                                                                  (if exports?642
                                                                                                                                                      (append
                                                                                                                                                        new-id768
                                                                                                                                                        other-id775)
                                                                                                                                                      '#f)))
                                                                                                                                              tmp774)
                                                                                                                                            (syntax-error
                                                                                                                                              tmp773)))
                                                                                                                                       ($syntax-dispatch
                                                                                                                                         tmp773
                                                                                                                                         '(any any
                                                                                                                                               each-any))))
                                                                                                                                    (list
                                                                                                                                      d771
                                                                                                                                      (gen-mid626
                                                                                                                                        mid772)
                                                                                                                                      exports770)))))
                                                                                                                            tmp761)
                                                                                                                          ((lambda (tmp785)
                                                                                                                             (if (if tmp785
                                                                                                                                     (apply
                                                                                                                                       (lambda (mid786)
                                                                                                                                         (identifier?
                                                                                                                                           mid786))
                                                                                                                                       tmp785)
                                                                                                                                     '#f)
                                                                                                                                 (apply
                                                                                                                                   (lambda (mid787)
                                                                                                                                     (values
                                                                                                                                       mid787
                                                                                                                                       (list
                                                                                                                                         '#(syntax-object $import ((top) #(ribcage #(mid) #((top)) #("i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                         orig647
                                                                                                                                         import-only?646
                                                                                                                                         mid787)
                                                                                                                                       (if exports?642
                                                                                                                                           ($module-exports616
                                                                                                                                             mid787
                                                                                                                                             r622)
                                                                                                                                           '#f)))
                                                                                                                                   tmp785)
                                                                                                                                 ((lambda (tmp788)
                                                                                                                                    (if (if tmp788
                                                                                                                                            (apply
                                                                                                                                              (lambda (mid789)
                                                                                                                                                (identifier?
                                                                                                                                                  mid789))
                                                                                                                                              tmp788)
                                                                                                                                            '#f)
                                                                                                                                        (apply
                                                                                                                                          (lambda (mid790)
                                                                                                                                            (values
                                                                                                                                              mid790
                                                                                                                                              (list
                                                                                                                                                '#(syntax-object $import ((top) #(ribcage #(mid) #((top)) #("i")) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                                                                orig647
                                                                                                                                                import-only?646
                                                                                                                                                mid790)
                                                                                                                                              (if exports?642
                                                                                                                                                  ($module-exports616
                                                                                                                                                    mid790
                                                                                                                                                    r622)
                                                                                                                                                  '#f)))
                                                                                                                                          tmp788)
                                                                                                                                        ((lambda (_791)
                                                                                                                                           (syntax-error
                                                                                                                                             m643
                                                                                                                                             '"invalid module specifier"))
                                                                                                                                          tmp648)))
                                                                                                                                   ($syntax-dispatch
                                                                                                                                     tmp648
                                                                                                                                     '(any)))))
                                                                                                                            (list
                                                                                                                              tmp648))))
                                                                                                                     ($syntax-dispatch
                                                                                                                       tmp648
                                                                                                                       '(#(free-id
                                                                                                                           #(syntax-object alias ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                                          any
                                                                                                                          .
                                                                                                                          #(each
                                                                                                                            (any any)))))))
                                                                                                              ($syntax-dispatch
                                                                                                                tmp648
                                                                                                                '(#(free-id
                                                                                                                    #(syntax-object rename ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                                   any
                                                                                                                   .
                                                                                                                   #(each
                                                                                                                     (any any)))))))
                                                                                                       ($syntax-dispatch
                                                                                                         tmp648
                                                                                                         '(#(free-id
                                                                                                             #(syntax-object drop-prefix ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                            any
                                                                                                            any)))))
                                                                                                ($syntax-dispatch
                                                                                                  tmp648
                                                                                                  '(#(free-id
                                                                                                      #(syntax-object add-prefix ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                                     any
                                                                                                     any)))))
                                                                                         ($syntax-dispatch
                                                                                           tmp648
                                                                                           '(#(free-id
                                                                                               #(syntax-object except ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                              any
                                                                                              .
                                                                                              each-any)))))
                                                                                  ($syntax-dispatch
                                                                                    tmp648
                                                                                    '(#(free-id
                                                                                        #(syntax-object only ((top) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(m exports?) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                                                       any
                                                                                       .
                                                                                       each-any))))
                                                                               m643))
                                                                           tmp645)
                                                                         (syntax-error
                                                                           tmp644)))
                                                                    ($syntax-dispatch
                                                                      tmp644
                                                                      '(any any))))
                                                                 (list
                                                                   orig621
                                                                   import-only?620))))
                                                 (modspec*628 (lambda (m638)
                                                                (call-with-values
                                                                  (lambda ()
                                                                    (modspec627
                                                                      m638
                                                                      '#f))
                                                                  (lambda (mid641
                                                                           d640
                                                                           exports639)
                                                                    d640)))))
                                          ((lambda (tmp629)
                                             ((lambda (tmp630)
                                                (if tmp630
                                                    (apply
                                                      (lambda (_632 m631)
                                                        ((lambda (tmp633)
                                                           ((lambda (tmp635)
                                                              (if tmp635
                                                                  (apply
                                                                    (lambda (d636)
                                                                      (cons
                                                                        '#(syntax-object begin ((top) #(ribcage #(d) #((top)) #("i")) #(ribcage #(_ m) #((top) (top)) #("i" "i")) #(ribcage (modspec* modspec gen-mid prefix-drop prefix-add difference) ((top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i")) #(ribcage #(r) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(orig import-only?) #((top) (top)) #("i" "i")) #(ribcage ($import-help $module-exports) ((top) (top)) ("i" "i")) #(ribcage (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module set-frob-meta?! set-frob-e! frob-meta? frob-e frob? make-frob create-module-binding set-module-binding-exported! set-module-binding-val! set-module-binding-imps! set-module-binding-label! set-module-binding-id! set-module-binding-type! module-binding-exported module-binding-val module-binding-imps module-binding-label module-binding-id module-binding-type module-binding? make-module-binding make-resolved-interface make-unresolved-interface set-interface-token! set-interface-exports! set-interface-marks! interface-token interface-exports interface-marks interface? make-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark set-env-wrap! set-env-top-ribcage! env-wrap env-top-ribcage env? make-env set-import-interface-new-marks! set-import-interface-interface! import-interface-new-marks import-interface-interface import-interface? make-import-interface set-top-ribcage-mutable?! set-top-ribcage-key! top-ribcage-mutable? top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application generate-id put-import-binding get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook gensym-hook error-hook define-top-level-value-hook local-eval-hook top-level-eval-hook annotation? fx>= fx<= fx> fx< fx= fx- fx+ set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object noexpand let-values define-structure unless when) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) ("m" top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                        d636))
                                                                    tmp635)
                                                                  (syntax-error
                                                                    tmp633)))
                                                             ($syntax-dispatch
                                                               tmp633
                                                               'each-any)))
                                                          (map modspec*628
                                                               m631)))
                                                      tmp630)
                                                    (syntax-error tmp629)))
                                               ($syntax-dispatch
                                                 tmp629
                                                 '(any . each-any))))
                                            orig621))))))
            (begin
              (put-cte-hook141
                'import
                (lambda (orig619) ($import-help617 orig619 '#f)))
              (put-cte-hook141
                'import-only
                (lambda (orig618) ($import-help617 orig618 '#t)))))))
       (set! sc-expand
         ((lambda (ctem613 rtem612)
            (lambda (x614)
              ((lambda (env615)
                 (if (if (pair? x614) (equal? (car x614) noexpand62) '#f)
                     (cadr x614)
                     (chi-top*442 x614 '() (env-wrap383 env615) ctem613
                       rtem612 '#f (env-top-ribcage382 env615))))
                (interaction-environment))))
           '(e)
           '(e)))
       (set! $make-environment
         (lambda (token610 mutable?609)
           ((lambda (top-ribcage611)
              (make-env380
                top-ribcage611
                (make-wrap319
                  (wrap-marks320 '((top)))
                  (cons top-ribcage611 (wrap-subst321 '((top)))))))
             (make-top-ribcage368 token610 mutable?609))))
       (set! environment? (lambda (x608) (env?381 x608)))
       (set! interaction-environment
         ((lambda (e607) (lambda () e607))
           ($make-environment '*top* '#t)))
       (set! identifier? (lambda (x606) (nonsymbol-id?309 x606)))
       (set! datum->syntax-object
         (lambda (id604 datum603)
           (begin
             ((lambda (x605)
                (if (not (nonsymbol-id?309 x605))
                    (error-hook136
                      'datum->syntax-object
                      '"invalid argument"
                      x605)
                    (void)))
               id604)
             (make-syntax-object63
               datum603
               (syntax-object-wrap66 id604)))))
       (set! syntax->list
         (lambda (orig-ls594)
           ((letrec ((f595 (lambda (ls596)
                             ((lambda (tmp597)
                                ((lambda (tmp598)
                                   (if tmp598
                                       (apply (lambda () '()) tmp598)
                                       ((lambda (tmp599)
                                          (if tmp599
                                              (apply
                                                (lambda (x601 r600)
                                                  (cons x601 (f595 r600)))
                                                tmp599)
                                              ((lambda (_602)
                                                 (error 'syntax->list
                                                   '"invalid argument ~s"
                                                   orig-ls594))
                                                tmp597)))
                                         ($syntax-dispatch
                                           tmp597
                                           '(any . any)))))
                                  ($syntax-dispatch tmp597 '())))
                               ls596))))
              f595)
             orig-ls594)))
       (set! syntax-object->datum
         (lambda (x593) (strip517 x593 '(()))))
       (set! generate-temporaries
         (lambda (ls590)
           (begin
             ((lambda (x592)
                (if (not (list? x592))
                    (error-hook136
                      'generate-temporaries
                      '"invalid argument"
                      x592)
                    (void)))
               ls590)
             (map (lambda (x591) (wrap438 (gensym) '((top)))) ls590))))
       (set! free-identifier=?
         (lambda (x587 y586)
           (begin
             ((lambda (x589)
                (if (not (nonsymbol-id?309 x589))
                    (error-hook136
                      'free-identifier=?
                      '"invalid argument"
                      x589)
                    (void)))
               x587)
             ((lambda (x588)
                (if (not (nonsymbol-id?309 x588))
                    (error-hook136
                      'free-identifier=?
                      '"invalid argument"
                      x588)
                    (void)))
               y586)
             (free-id=?430 x587 y586))))
       (set! bound-identifier=?
         (lambda (x583 y582)
           (begin
             ((lambda (x585)
                (if (not (nonsymbol-id?309 x585))
                    (error-hook136
                      'bound-identifier=?
                      '"invalid argument"
                      x585)
                    (void)))
               x583)
             ((lambda (x584)
                (if (not (nonsymbol-id?309 x584))
                    (error-hook136
                      'bound-identifier=?
                      '"invalid argument"
                      x584)
                    (void)))
               y582)
             (bound-id=?433 x583 y582))))
       (set! literal-identifier=?
         (lambda (x579 y578)
           (begin
             ((lambda (x581)
                (if (not (nonsymbol-id?309 x581))
                    (error-hook136
                      'literal-identifier=?
                      '"invalid argument"
                      x581)
                    (void)))
               x579)
             ((lambda (x580)
                (if (not (nonsymbol-id?309 x580))
                    (error-hook136
                      'literal-identifier=?
                      '"invalid argument"
                      x580)
                    (void)))
               y578)
             (literal-id=?431 x579 y578))))
       (set! syntax-error
         (lambda (object573 . messages574)
           (begin
             (for-each
               (lambda (x576)
                 ((lambda (x577)
                    (if (not (string? x577))
                        (error-hook136
                          'syntax-error
                          '"invalid argument"
                          x577)
                        (void)))
                   x576))
               messages574)
             ((lambda (message575)
                (error-hook136 '#f message575 (strip517 object573 '(()))))
               (if (null? messages574)
                   '"invalid syntax"
                   (apply string-append messages574))))))
       ((lambda ()
          (letrec ((match-each520 (lambda (e570 p569 w568)
                                    (if (annotation?132 e570)
                                        (match-each520
                                          (annotation-expression e570)
                                          p569
                                          w568)
                                        (if (pair? e570)
                                            ((lambda (first571)
                                               (if first571
                                                   ((lambda (rest572)
                                                      (if rest572
                                                          (cons
                                                            first571
                                                            rest572)
                                                          '#f))
                                                     (match-each520
                                                       (cdr e570)
                                                       p569
                                                       w568))
                                                   '#f))
                                              (match526
                                                (car e570)
                                                p569
                                                w568
                                                '()))
                                            (if (null? e570)
                                                '()
                                                (if (syntax-object?64 e570)
                                                    (match-each520
                                                      (syntax-object-expression65
                                                        e570)
                                                      p569
                                                      (join-wraps417
                                                        w568
                                                        (syntax-object-wrap66
                                                          e570)))
                                                    '#f))))))
                   (match-each+521 (lambda (e560 x-pat559 y-pat558 z-pat557
                                            w556 r555)
                                     ((letrec ((f561 (lambda (e563 w562)
                                                       (if (pair? e563)
                                                           (call-with-values
                                                             (lambda ()
                                                               (f561
                                                                 (cdr e563)
                                                                 w562))
                                                             (lambda (xr*566
                                                                      y-pat565
                                                                      r564)
                                                               (if r564
                                                                   (if (null?
                                                                         y-pat565)
                                                                       ((lambda (xr567)
                                                                          (if xr567
                                                                              (values
                                                                                (cons
                                                                                  xr567
                                                                                  xr*566)
                                                                                y-pat565
                                                                                r564)
                                                                              (values
                                                                                '#f
                                                                                '#f
                                                                                '#f)))
                                                                         (match526
                                                                           (car e563)
                                                                           x-pat559
                                                                           w562
                                                                           '()))
                                                                       (values
                                                                         '()
                                                                         (cdr y-pat565)
                                                                         (match526
                                                                           (car e563)
                                                                           (car y-pat565)
                                                                           w562
                                                                           r564)))
                                                                   (values
                                                                     '#f
                                                                     '#f
                                                                     '#f))))
                                                           (if (annotation?132
                                                                 e563)
                                                               (f561
                                                                 (annotation-expression
                                                                   e563)
                                                                 w562)
                                                               (if (syntax-object?64
                                                                     e563)
                                                                   (f561
                                                                     (syntax-object-expression65
                                                                       e563)
                                                                     (join-wraps417
                                                                       w562
                                                                       (syntax-object-wrap66
                                                                         e563)))
                                                                   (values
                                                                     '()
                                                                     y-pat558
                                                                     (match526
                                                                       e563
                                                                       z-pat557
                                                                       w562
                                                                       r555))))))))
                                        f561)
                                       e560
                                       w556)))
                   (match-each-any522 (lambda (e553 w552)
                                        (if (annotation?132 e553)
                                            (match-each-any522
                                              (annotation-expression e553)
                                              w552)
                                            (if (pair? e553)
                                                ((lambda (l554)
                                                   (if l554
                                                       (cons
                                                         (wrap438
                                                           (car e553)
                                                           w552)
                                                         l554)
                                                       '#f))
                                                  (match-each-any522
                                                    (cdr e553)
                                                    w552))
                                                (if (null? e553)
                                                    '()
                                                    (if (syntax-object?64
                                                          e553)
                                                        (match-each-any522
                                                          (syntax-object-expression65
                                                            e553)
                                                          (join-wraps417
                                                            w552
                                                            (syntax-object-wrap66
                                                              e553)))
                                                        '#f))))))
                   (match-empty523 (lambda (p550 r549)
                                     (if (null? p550)
                                         r549
                                         (if (eq? p550 'any)
                                             (cons '() r549)
                                             (if (pair? p550)
                                                 (match-empty523
                                                   (car p550)
                                                   (match-empty523
                                                     (cdr p550)
                                                     r549))
                                                 (if (eq? p550 'each-any)
                                                     (cons '() r549)
                                                     ((lambda (t551)
                                                        (if (memv
                                                              t551
                                                              '(each))
                                                            (match-empty523
                                                              (vector-ref
                                                                p550
                                                                '1)
                                                              r549)
                                                            (if (memv
                                                                  t551
                                                                  '(each+))
                                                                (match-empty523
                                                                  (vector-ref
                                                                    p550
                                                                    '1)
                                                                  (match-empty523
                                                                    (reverse
                                                                      (vector-ref
                                                                        p550
                                                                        '2))
                                                                    (match-empty523
                                                                      (vector-ref
                                                                        p550
                                                                        '3)
                                                                      r549)))
                                                                (if (memv
                                                                      t551
                                                                      '(free-id
                                                                         atom))
                                                                    r549
                                                                    (if (memv
                                                                          t551
                                                                          '(vector))
                                                                        (match-empty523
                                                                          (vector-ref
                                                                            p550
                                                                            '1)
                                                                          r549)
                                                                        (void))))))
                                                       (vector-ref
                                                         p550
                                                         '0))))))))
                   (combine524 (lambda (r*548 r547)
                                 (if (null? (car r*548))
                                     r547
                                     (cons
                                       (map car r*548)
                                       (combine524
                                         (map cdr r*548)
                                         r547)))))
                   (match*525 (lambda (e540 p539 w538 r537)
                                (if (null? p539)
                                    (if (null? e540) r537 '#f)
                                    (if (pair? p539)
                                        (if (pair? e540)
                                            (match526
                                              (car e540)
                                              (car p539)
                                              w538
                                              (match526
                                                (cdr e540)
                                                (cdr p539)
                                                w538
                                                r537))
                                            '#f)
                                        (if (eq? p539 'each-any)
                                            ((lambda (l541)
                                               (if l541
                                                   (cons l541 r537)
                                                   '#f))
                                              (match-each-any522
                                                e540
                                                w538))
                                            ((lambda (t542)
                                               (if (memv t542 '(each))
                                                   (if (null? e540)
                                                       (match-empty523
                                                         (vector-ref
                                                           p539
                                                           '1)
                                                         r537)
                                                       ((lambda (r*543)
                                                          (if r*543
                                                              (combine524
                                                                r*543
                                                                r537)
                                                              '#f))
                                                         (match-each520
                                                           e540
                                                           (vector-ref
                                                             p539
                                                             '1)
                                                           w538)))
                                                   (if (memv
                                                         t542
                                                         '(free-id))
                                                       (if (id?310 e540)
                                                           (if (literal-id=?431
                                                                 (wrap438
                                                                   e540
                                                                   w538)
                                                                 (vector-ref
                                                                   p539
                                                                   '1))
                                                               r537
                                                               '#f)
                                                           '#f)
                                                       (if (memv
                                                             t542
                                                             '(each+))
                                                           (call-with-values
                                                             (lambda ()
                                                               (match-each+521
                                                                 e540
                                                                 (vector-ref
                                                                   p539
                                                                   '1)
                                                                 (vector-ref
                                                                   p539
                                                                   '2)
                                                                 (vector-ref
                                                                   p539
                                                                   '3)
                                                                 w538
                                                                 r537))
                                                             (lambda (xr*546
                                                                      y-pat545
                                                                      r544)
                                                               (if r544
                                                                   (if (null?
                                                                         y-pat545)
                                                                       (if (null?
                                                                             xr*546)
                                                                           (match-empty523
                                                                             (vector-ref
                                                                               p539
                                                                               '1)
                                                                             r544)
                                                                           (combine524
                                                                             xr*546
                                                                             r544))
                                                                       '#f)
                                                                   '#f)))
                                                           (if (memv
                                                                 t542
                                                                 '(atom))
                                                               (if (equal?
                                                                     (vector-ref
                                                                       p539
                                                                       '1)
                                                                     (strip517
                                                                       e540
                                                                       w538))
                                                                   r537
                                                                   '#f)
                                                               (if (memv
                                                                     t542
                                                                     '(vector))
                                                                   (if (vector?
                                                                         e540)
                                                                       (match526
                                                                         (vector->list
                                                                           e540)
                                                                         (vector-ref
                                                                           p539
                                                                           '1)
                                                                         w538
                                                                         r537)
                                                                       '#f)
                                                                   (void)))))))
                                              (vector-ref p539 '0)))))))
                   (match526 (lambda (e534 p533 w532 r531)
                               (if (not r531)
                                   '#f
                                   (if (eq? p533 'any)
                                       (cons (wrap438 e534 w532) r531)
                                       (if (syntax-object?64 e534)
                                           (match*525
                                             ((lambda (e535)
                                                (if (annotation?132 e535)
                                                    (annotation-expression
                                                      e535)
                                                    e535))
                                               (syntax-object-expression65
                                                 e534))
                                             p533
                                             (join-wraps417
                                               w532
                                               (syntax-object-wrap66 e534))
                                             r531)
                                           (match*525
                                             ((lambda (e536)
                                                (if (annotation?132 e536)
                                                    (annotation-expression
                                                      e536)
                                                    e536))
                                               e534)
                                             p533
                                             w532
                                             r531)))))))
            (set! $syntax-dispatch
              (lambda (e528 p527)
                (if (eq? p527 'any)
                    (list e528)
                    (if (syntax-object?64 e528)
                        (match*525
                          ((lambda (e529)
                             (if (annotation?132 e529)
                                 (annotation-expression e529)
                                 e529))
                            (syntax-object-expression65 e528))
                          p527
                          (syntax-object-wrap66 e528)
                          '())
                        (match*525
                          ((lambda (e530)
                             (if (annotation?132 e530)
                                 (annotation-expression e530)
                                 e530))
                            e528)
                          p527
                          '(())
                          '()))))))))))))
($sc-put-cte
  '#(syntax-object with-syntax ((top) #(ribcage #(with-syntax) #((top)) #(with-syntax))))
  (lambda (x2517)
    ((lambda (tmp2518)
       ((lambda (tmp2519)
          (if tmp2519
              (apply
                (lambda (_2522 e12521 e22520)
                  (cons
                    '#(syntax-object begin ((top) #(ribcage #(_ e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                    (cons e12521 e22520)))
                tmp2519)
              ((lambda (tmp2524)
                 (if tmp2524
                     (apply
                       (lambda (_2529 out2528 in2527 e12526 e22525)
                         (list
                           '#(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                           in2527
                           '()
                           (list
                             out2528
                             (cons
                               '#(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                               (cons e12526 e22525)))))
                       tmp2524)
                     ((lambda (tmp2531)
                        (if tmp2531
                            (apply
                              (lambda (_2536 out2535 in2534 e12533 e22532)
                                (list
                                  '#(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                  (cons
                                    '#(syntax-object list ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    in2534)
                                  '()
                                  (list
                                    out2535
                                    (cons
                                      '#(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      (cons e12533 e22532)))))
                              tmp2531)
                            (syntax-error tmp2518)))
                       ($syntax-dispatch
                         tmp2518
                         '(any #(each (any any)) any . each-any)))))
                ($syntax-dispatch
                  tmp2518
                  '(any ((any any)) any . each-any)))))
         ($syntax-dispatch tmp2518 '(any () any . each-any))))
      x2517))
  '*top*)
($sc-put-cte
  '#(syntax-object with-implicit ((top) #(ribcage #(with-implicit) #((top)) #(with-implicit))))
  (lambda (x2540)
    ((lambda (tmp2541)
       ((lambda (tmp2542)
          (if (if tmp2542
                  (apply
                    (lambda (dummy2547 tid2546 id2545 e12544 e22543)
                      (andmap identifier? (cons tid2546 id2545)))
                    tmp2542)
                  '#f)
              (apply
                (lambda (dummy2553 tid2552 id2551 e12550 e22549)
                  (list
                    '#(syntax-object begin ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    (list
                      '#(syntax-object unless ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      (list
                        '#(syntax-object identifier? ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        (list
                          '#(syntax-object syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                          tid2552))
                      (cons
                        '#(syntax-object syntax-error ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        (cons
                          (list
                            '#(syntax-object syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                            tid2552)
                          '#(syntax-object ("non-identifier with-implicit template") ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))))
                    (cons
                      '#(syntax-object with-syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      (cons
                        (map (lambda (tmp2554)
                               (list
                                 tmp2554
                                 (list
                                   '#(syntax-object datum->syntax-object ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   (list
                                     '#(syntax-object syntax ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                     tid2552)
                                   (list
                                     '#(syntax-object quote ((top) #(ribcage #(dummy tid id e1 e2) #(("m" top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                     tmp2554))))
                             id2551)
                        (cons e12550 e22549)))))
                tmp2542)
              (syntax-error tmp2541)))
         ($syntax-dispatch
           tmp2541
           '(any (any . each-any) any . each-any))))
      x2540))
  '*top*)
($sc-put-cte
  '#(syntax-object datum ((top) #(ribcage #(datum) #((top)) #(datum))))
  (lambda (x2556)
    ((lambda (tmp2557)
       ((lambda (tmp2558)
          (if tmp2558
              (apply
                (lambda (dummy2560 x2559)
                  (list
                    '#(syntax-object syntax-object->datum ((top) #(ribcage #(dummy x) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    (list
                      '#(syntax-object syntax ((top) #(ribcage #(dummy x) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      x2559)))
                tmp2558)
              (syntax-error tmp2557)))
         ($syntax-dispatch tmp2557 '(any any))))
      x2556))
  '*top*)
($sc-put-cte
  '#(syntax-object syntax-rules ((top) #(ribcage #(syntax-rules) #((top)) #(syntax-rules))))
  (lambda (x2561)
    (letrec ((clause2562 (lambda (y2578)
                           ((lambda (tmp2579)
                              ((lambda (tmp2580)
                                 (if tmp2580
                                     (apply
                                       (lambda (keyword2583 pattern2582
                                                template2581)
                                         (list
                                           (cons
                                             '#(syntax-object dummy ((top) #(ribcage #(keyword pattern template) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                             pattern2582)
                                           (list
                                             '#(syntax-object syntax ((top) #(ribcage #(keyword pattern template) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                             template2581)))
                                       tmp2580)
                                     ((lambda (tmp2584)
                                        (if tmp2584
                                            (apply
                                              (lambda (keyword2588
                                                       pattern2587
                                                       fender2586
                                                       template2585)
                                                (list
                                                  (cons
                                                    '#(syntax-object dummy ((top) #(ribcage #(keyword pattern fender template) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    pattern2587)
                                                  fender2586
                                                  (list
                                                    '#(syntax-object syntax ((top) #(ribcage #(keyword pattern fender template) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(y) #((top)) #("i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    template2585)))
                                              tmp2584)
                                            ((lambda (_2589)
                                               (syntax-error x2561))
                                              tmp2579)))
                                       ($syntax-dispatch
                                         tmp2579
                                         '((any . any) any any)))))
                                ($syntax-dispatch
                                  tmp2579
                                  '((any . any) any))))
                             y2578))))
      ((lambda (tmp2563)
         ((lambda (tmp2564)
            (if (if tmp2564
                    (apply
                      (lambda (_2567 k2566 cl2565)
                        (andmap identifier? k2566))
                      tmp2564)
                    '#f)
                (apply
                  (lambda (_2571 k2570 cl2569)
                    ((lambda (tmp2572)
                       ((lambda (tmp2574)
                          (if tmp2574
                              (apply
                                (lambda (cl2575)
                                  (list
                                    '#(syntax-object lambda ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    '#(syntax-object (x) ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    (cons
                                      '#(syntax-object syntax-case ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      (cons
                                        '#(syntax-object x ((top) #(ribcage #(cl) #((top)) #("i")) #(ribcage #(_ k cl) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (clause) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                        (cons k2570 cl2575)))))
                                tmp2574)
                              (syntax-error tmp2572)))
                         ($syntax-dispatch tmp2572 'each-any)))
                      (map clause2562 cl2569)))
                  tmp2564)
                (syntax-error tmp2563)))
           ($syntax-dispatch tmp2563 '(any each-any . each-any))))
        x2561)))
  '*top*)
($sc-put-cte
  '#(syntax-object or ((top) #(ribcage #(or) #((top)) #(or))))
  (lambda (x2590)
    ((lambda (tmp2591)
       ((lambda (tmp2592)
          (if tmp2592
              (apply
                (lambda (_2593)
                  '#(syntax-object #f ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                tmp2592)
              ((lambda (tmp2594)
                 (if tmp2594
                     (apply (lambda (_2596 e2595) e2595) tmp2594)
                     ((lambda (tmp2597)
                        (if tmp2597
                            (apply
                              (lambda (_2601 e12600 e22599 e32598)
                                (list
                                  '#(syntax-object let ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                  (list
                                    (list
                                      '#(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      e12600))
                                  (list
                                    '#(syntax-object if ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    '#(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    '#(syntax-object t ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                    (cons
                                      '#(syntax-object or ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                      (cons e22599 e32598)))))
                              tmp2597)
                            (syntax-error tmp2591)))
                       ($syntax-dispatch
                         tmp2591
                         '(any any any . each-any)))))
                ($syntax-dispatch tmp2591 '(any any)))))
         ($syntax-dispatch tmp2591 '(any))))
      x2590))
  '*top*)
($sc-put-cte
  '#(syntax-object and ((top) #(ribcage #(and) #((top)) #(and))))
  (lambda (x2603)
    ((lambda (tmp2604)
       ((lambda (tmp2605)
          (if tmp2605
              (apply
                (lambda (_2609 e12608 e22607 e32606)
                  (cons
                    '#(syntax-object if ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                    (cons
                      e12608
                      (cons
                        (cons
                          '#(syntax-object and ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                          (cons e22607 e32606))
                        '#(syntax-object (#f) ((top) #(ribcage #(_ e1 e2 e3) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))))))
                tmp2605)
              ((lambda (tmp2611)
                 (if tmp2611
                     (apply (lambda (_2613 e2612) e2612) tmp2611)
                     ((lambda (tmp2614)
                        (if tmp2614
                            (apply
                              (lambda (_2615)
                                '#(syntax-object #t ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                              tmp2614)
                            (syntax-error tmp2604)))
                       ($syntax-dispatch tmp2604 '(any)))))
                ($syntax-dispatch tmp2604 '(any any)))))
         ($syntax-dispatch tmp2604 '(any any any . each-any))))
      x2603))
  '*top*)
($sc-put-cte
  '#(syntax-object let ((top) #(ribcage #(let) #((top)) #(let))))
  (lambda (x2616)
    ((lambda (tmp2617)
       ((lambda (tmp2618)
          (if (if tmp2618
                  (apply
                    (lambda (_2623 x2622 v2621 e12620 e22619)
                      (andmap identifier? x2622))
                    tmp2618)
                  '#f)
              (apply
                (lambda (_2629 x2628 v2627 e12626 e22625)
                  (cons
                    (cons
                      '#(syntax-object lambda ((top) #(ribcage #(_ x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                      (cons x2628 (cons e12626 e22625)))
                    v2627))
                tmp2618)
              ((lambda (tmp2633)
                 (if (if tmp2633
                         (apply
                           (lambda (_2639 f2638 x2637 v2636 e12635 e22634)
                             (andmap identifier? (cons f2638 x2637)))
                           tmp2633)
                         '#f)
                     (apply
                       (lambda (_2646 f2645 x2644 v2643 e12642 e22641)
                         (cons
                           (list
                             '#(syntax-object letrec ((top) #(ribcage #(_ f x v e1 e2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                             (list
                               (list
                                 f2645
                                 (cons
                                   '#(syntax-object lambda ((top) #(ribcage #(_ f x v e1 e2) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                   (cons x2644 (cons e12642 e22641)))))
                             f2645)
                           v2643))
                       tmp2633)
                     (syntax-error tmp2617)))
                ($syntax-dispatch
                  tmp2617
                  '(any any #(each (any any)) any . each-any)))))
         ($syntax-dispatch
           tmp2617
           '(any #(each (any any)) any . each-any))))
      x2616))
  '*top*)
($sc-put-cte
  '#(syntax-object let* ((top) #(ribcage #(let*) #((top)) #(let*))))
  (lambda (x2650)
    ((lambda (tmp2651)
       ((lambda (tmp2652)
          (if (if tmp2652
                  (apply
                    (lambda (let*2657 x2656 v2655 e12654 e22653)
                      (andmap identifier? x2656))
                    tmp2652)
                  '#f)
              (apply
                (lambda (let*2663 x2662 v2661 e12660 e22659)
                  ((letrec ((f2664 (lambda (bindings2665)
                                     (if (null? bindings2665)
                                         (cons
                                           '#(syntax-object let ((top) #(ribcage () () ()) #(ribcage #(bindings) #((top)) #("i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                           (cons '() (cons e12660 e22659)))
                                         ((lambda (tmp2667)
                                            ((lambda (tmp2668)
                                               (if tmp2668
                                                   (apply
                                                     (lambda (body2670
                                                              binding2669)
                                                       (list
                                                         '#(syntax-object let ((top) #(ribcage #(body binding) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(bindings) #((top)) #("i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                         (list binding2669)
                                                         body2670))
                                                     tmp2668)
                                                   (syntax-error tmp2667)))
                                              ($syntax-dispatch
                                                tmp2667
                                                '(any any))))
                                           (list
                                             (f2664 (cdr bindings2665))
                                             (car bindings2665)))))))
                     f2664)
                    (map list x2662 v2661)))
                tmp2652)
              (syntax-error tmp2651)))
         ($syntax-dispatch
           tmp2651
           '(any #(each (any any)) any . each-any))))
      x2650))
  '*top*)
($sc-put-cte
  '#(syntax-object cond ((top) #(ribcage #(cond) #((top)) #(cond))))
  (lambda (x2673)
    ((lambda (tmp2674)
       ((lambda (tmp2675)
          (if tmp2675
              (apply
                (lambda (_2678 m12677 m22676)
                  ((letrec ((f2679 (lambda (clause2681 clauses2680)
                                     (if (null? clauses2680)
                                         ((lambda (tmp2682)
                                            ((lambda (tmp2683)
                                               (if tmp2683
                                                   (apply
                                                     (lambda (e12685
                                                              e22684)
                                                       (cons
                                                         '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                         (cons
                                                           e12685
                                                           e22684)))
                                                     tmp2683)
                                                   ((lambda (tmp2687)
                                                      (if tmp2687
                                                          (apply
                                                            (lambda (e02688)
                                                              (cons
                                                                '#(syntax-object let ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                (cons
                                                                  (list
                                                                    (list
                                                                      '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                      e02688))
                                                                  '#(syntax-object ((if t t)) ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))))
                                                            tmp2687)
                                                          ((lambda (tmp2689)
                                                             (if tmp2689
                                                                 (apply
                                                                   (lambda (e02691
                                                                            e12690)
                                                                     (list
                                                                       '#(syntax-object let ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                       (list
                                                                         (list
                                                                           '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                           e02691))
                                                                       (list
                                                                         '#(syntax-object if ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                         '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                         (cons
                                                                           e12690
                                                                           '#(syntax-object (t) ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))))))
                                                                   tmp2689)
                                                                 ((lambda (tmp2692)
                                                                    (if tmp2692
                                                                        (apply
                                                                          (lambda (e02695
                                                                                   e12694
                                                                                   e22693)
                                                                            (list
                                                                              '#(syntax-object if ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                              e02695
                                                                              (cons
                                                                                '#(syntax-object begin ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                                (cons
                                                                                  e12694
                                                                                  e22693))))
                                                                          tmp2692)
                                                                        ((lambda (_2697)
                                                                           (syntax-error
                                                                             x2673))
                                                                          tmp2682)))
                                                                   ($syntax-dispatch
                                                                     tmp2682
                                                                     '(any any
                                                                           .
                                                                           each-any)))))
                                                            ($syntax-dispatch
                                                              tmp2682
                                                              '(any #(free-id
                                                                      #(syntax-object => ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                                    any)))))
                                                     ($syntax-dispatch
                                                       tmp2682
                                                       '(any)))))
                                              ($syntax-dispatch
                                                tmp2682
                                                '(#(free-id
                                                    #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                   any
                                                   .
                                                   each-any))))
                                           clause2681)
                                         ((lambda (tmp2698)
                                            ((lambda (rest2699)
                                               ((lambda (tmp2700)
                                                  ((lambda (tmp2701)
                                                     (if tmp2701
                                                         (apply
                                                           (lambda (e02702)
                                                             (list
                                                               '#(syntax-object let ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                               (list
                                                                 (list
                                                                   '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   e02702))
                                                               (list
                                                                 '#(syntax-object if ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 '#(syntax-object t ((top) #(ribcage #(e0) #((top)) #("i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 rest2699)))
                                                           tmp2701)
                                                         ((lambda (tmp2703)
                                                            (if tmp2703
                                                                (apply
                                                                  (lambda (e02705
                                                                           e12704)
                                                                    (list
                                                                      '#(syntax-object let ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                      (list
                                                                        (list
                                                                          '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                          e02705))
                                                                      (list
                                                                        '#(syntax-object if ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                        '#(syntax-object t ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                        (cons
                                                                          e12704
                                                                          '#(syntax-object (t) ((top) #(ribcage #(e0 e1) #((top) (top)) #("i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                                        rest2699)))
                                                                  tmp2703)
                                                                ((lambda (tmp2706)
                                                                   (if tmp2706
                                                                       (apply
                                                                         (lambda (e02709
                                                                                  e12708
                                                                                  e22707)
                                                                           (list
                                                                             '#(syntax-object if ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                             e02709
                                                                             (cons
                                                                               '#(syntax-object begin ((top) #(ribcage #(e0 e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                               (cons
                                                                                 e12708
                                                                                 e22707))
                                                                             rest2699))
                                                                         tmp2706)
                                                                       ((lambda (_2711)
                                                                          (syntax-error
                                                                            x2673))
                                                                         tmp2700)))
                                                                  ($syntax-dispatch
                                                                    tmp2700
                                                                    '(any any
                                                                          .
                                                                          each-any)))))
                                                           ($syntax-dispatch
                                                             tmp2700
                                                             '(any #(free-id
                                                                     #(syntax-object => ((top) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ m1 m2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                                   any)))))
                                                    ($syntax-dispatch
                                                      tmp2700
                                                      '(any))))
                                                 clause2681))
                                              tmp2698))
                                           (f2679
                                             (car clauses2680)
                                             (cdr clauses2680)))))))
                     f2679)
                    m12677
                    m22676))
                tmp2675)
              (syntax-error tmp2674)))
         ($syntax-dispatch tmp2674 '(any any . each-any))))
      x2673))
  '*top*)
($sc-put-cte
  '#(syntax-object do ((top) #(ribcage #(do) #((top)) #(do))))
  (lambda (orig-x2713)
    ((lambda (tmp2714)
       ((lambda (tmp2715)
          (if tmp2715
              (apply
                (lambda (_2722 var2721 init2720 step2719 e02718 e12717
                         c2716)
                  ((lambda (tmp2723)
                     ((lambda (tmp2733)
                        (if tmp2733
                            (apply
                              (lambda (step2734)
                                ((lambda (tmp2735)
                                   ((lambda (tmp2737)
                                      (if tmp2737
                                          (apply
                                            (lambda ()
                                              (list
                                                '#(syntax-object let ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                '#(syntax-object do ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                (map list var2721 init2720)
                                                (list
                                                  '#(syntax-object if ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                  (list
                                                    '#(syntax-object not ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    e02718)
                                                  (cons
                                                    '#(syntax-object begin ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                    (append
                                                      c2716
                                                      (list
                                                        (cons
                                                          '#(syntax-object do ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                          step2734)))))))
                                            tmp2737)
                                          ((lambda (tmp2742)
                                             (if tmp2742
                                                 (apply
                                                   (lambda (e12744 e22743)
                                                     (list
                                                       '#(syntax-object let ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                       '#(syntax-object do ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                       (map list
                                                            var2721
                                                            init2720)
                                                       (list
                                                         '#(syntax-object if ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                         e02718
                                                         (cons
                                                           '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                           (cons
                                                             e12744
                                                             e22743))
                                                         (cons
                                                           '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                           (append
                                                             c2716
                                                             (list
                                                               (cons
                                                                 '#(syntax-object do ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 step2734)))))))
                                                   tmp2742)
                                                 (syntax-error tmp2735)))
                                            ($syntax-dispatch
                                              tmp2735
                                              '(any . each-any)))))
                                     ($syntax-dispatch tmp2735 '())))
                                  e12717))
                              tmp2733)
                            (syntax-error tmp2723)))
                       ($syntax-dispatch tmp2723 'each-any)))
                    (map (lambda (v2727 s2726)
                           ((lambda (tmp2728)
                              ((lambda (tmp2729)
                                 (if tmp2729
                                     (apply (lambda () v2727) tmp2729)
                                     ((lambda (tmp2730)
                                        (if tmp2730
                                            (apply
                                              (lambda (e2731) e2731)
                                              tmp2730)
                                            ((lambda (_2732)
                                               (syntax-error orig-x2713))
                                              tmp2728)))
                                       ($syntax-dispatch tmp2728 '(any)))))
                                ($syntax-dispatch tmp2728 '())))
                             s2726))
                         var2721
                         step2719)))
                tmp2715)
              (syntax-error tmp2714)))
         ($syntax-dispatch
           tmp2714
           '(any #(each (any any . any))
                 (any . each-any)
                 .
                 each-any))))
      orig-x2713))
  '*top*)
($sc-put-cte
  '#(syntax-object quasiquote ((top) #(ribcage #(quasiquote) #((top)) #(quasiquote))))
  (letrec ((isquote?2759 (lambda (x2888)
                           (if (identifier? x2888)
                               (free-identifier=?
                                 x2888
                                 '#(syntax-object quote ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                               '#f)))
           (islist?2758 (lambda (x2887)
                          (if (identifier? x2887)
                              (free-identifier=?
                                x2887
                                '#(syntax-object list ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                              '#f)))
           (iscons?2757 (lambda (x2886)
                          (if (identifier? x2886)
                              (free-identifier=?
                                x2886
                                '#(syntax-object cons ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                              '#f)))
           (quote-nil?2756 (lambda (x2881)
                             ((lambda (tmp2882)
                                ((lambda (tmp2883)
                                   (if tmp2883
                                       (apply
                                         (lambda (quote?2884)
                                           (isquote?2759 quote?2884))
                                         tmp2883)
                                       ((lambda (_2885) '#f) tmp2882)))
                                  ($syntax-dispatch tmp2882 '(any ()))))
                               x2881)))
           (quasilist*2755 (lambda (x2878 y2877)
                             ((letrec ((f2879 (lambda (x2880)
                                                (if (null? x2880)
                                                    y2877
                                                    (quasicons2754
                                                      (car x2880)
                                                      (f2879
                                                        (cdr x2880)))))))
                                f2879)
                               x2878)))
           (quasicons2754 (lambda (x2853 y2852)
                            ((lambda (tmp2854)
                               ((lambda (tmp2855)
                                  (if tmp2855
                                      (apply
                                        (lambda (x2857 y2856)
                                          ((lambda (tmp2858)
                                             ((lambda (tmp2859)
                                                (if (if tmp2859
                                                        (apply
                                                          (lambda (quote?2861
                                                                   dy2860)
                                                            (isquote?2759
                                                              quote?2861))
                                                          tmp2859)
                                                        '#f)
                                                    (apply
                                                      (lambda (quote?2863
                                                               dy2862)
                                                        ((lambda (tmp2864)
                                                           ((lambda (tmp2865)
                                                              (if (if tmp2865
                                                                      (apply
                                                                        (lambda (quote?2867
                                                                                 dx2866)
                                                                          (isquote?2759
                                                                            quote?2867))
                                                                        tmp2865)
                                                                      '#f)
                                                                  (apply
                                                                    (lambda (quote?2869
                                                                             dx2868)
                                                                      (list
                                                                        '#(syntax-object quote ((top) #(ribcage #(quote? dx) #((top) (top)) #("i" "i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                        (cons
                                                                          dx2868
                                                                          dy2862)))
                                                                    tmp2865)
                                                                  ((lambda (_2870)
                                                                     (if (null?
                                                                           dy2862)
                                                                         (list
                                                                           '#(syntax-object list ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                           x2857)
                                                                         (list
                                                                           '#(syntax-object cons ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(quote? dy) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                           x2857
                                                                           y2856)))
                                                                    tmp2864)))
                                                             ($syntax-dispatch
                                                               tmp2864
                                                               '(any any))))
                                                          x2857))
                                                      tmp2859)
                                                    ((lambda (tmp2871)
                                                       (if (if tmp2871
                                                               (apply
                                                                 (lambda (listp2873
                                                                          stuff2872)
                                                                   (islist?2758
                                                                     listp2873))
                                                                 tmp2871)
                                                               '#f)
                                                           (apply
                                                             (lambda (listp2875
                                                                      stuff2874)
                                                               (cons
                                                                 '#(syntax-object list ((top) #(ribcage #(listp stuff) #((top) (top)) #("i" "i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                 (cons
                                                                   x2857
                                                                   stuff2874)))
                                                             tmp2871)
                                                           ((lambda (else2876)
                                                              (list
                                                                '#(syntax-object cons ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                x2857
                                                                y2856))
                                                             tmp2858)))
                                                      ($syntax-dispatch
                                                        tmp2858
                                                        '(any . any)))))
                                               ($syntax-dispatch
                                                 tmp2858
                                                 '(any any))))
                                            y2856))
                                        tmp2855)
                                      (syntax-error tmp2854)))
                                 ($syntax-dispatch tmp2854 '(any any))))
                              (list x2853 y2852))))
           (quasiappend2753 (lambda (x2844 y2843)
                              ((lambda (ls2845)
                                 (if (null? ls2845)
                                     '#(syntax-object (quote ()) ((top) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                     (if (null? (cdr ls2845))
                                         (car ls2845)
                                         ((lambda (tmp2846)
                                            ((lambda (tmp2847)
                                               (if tmp2847
                                                   (apply
                                                     (lambda (p2848)
                                                       (cons
                                                         '#(syntax-object append ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                         p2848))
                                                     tmp2847)
                                                   (syntax-error tmp2846)))
                                              ($syntax-dispatch
                                                tmp2846
                                                'each-any)))
                                           ls2845))))
                                ((letrec ((f2850 (lambda (x2851)
                                                   (if (null? x2851)
                                                       (if (quote-nil?2756
                                                             y2843)
                                                           '()
                                                           (list y2843))
                                                       (if (quote-nil?2756
                                                             (car x2851))
                                                           (f2850
                                                             (cdr x2851))
                                                           (cons
                                                             (car x2851)
                                                             (f2850
                                                               (cdr x2851))))))))
                                   f2850)
                                  x2844))))
           (quasivector2752 (lambda (x2806)
                              ((lambda (tmp2807)
                                 ((lambda (pat-x2808)
                                    ((lambda (tmp2809)
                                       ((lambda (tmp2810)
                                          (if (if tmp2810
                                                  (apply
                                                    (lambda (quote?2812
                                                             x2811)
                                                      (isquote?2759
                                                        quote?2812))
                                                    tmp2810)
                                                  '#f)
                                              (apply
                                                (lambda (quote?2814 x2813)
                                                  (list
                                                    '#(syntax-object quote ((top) #(ribcage #(quote? x) #((top) (top)) #("i" "i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                    (list->vector x2813)))
                                                tmp2810)
                                              ((lambda (_2816)
                                                 ((letrec ((f2817 (lambda (x2819
                                                                           k2818)
                                                                    ((lambda (tmp2820)
                                                                       ((lambda (tmp2821)
                                                                          (if (if tmp2821
                                                                                  (apply
                                                                                    (lambda (quote?2823
                                                                                             x2822)
                                                                                      (isquote?2759
                                                                                        quote?2823))
                                                                                    tmp2821)
                                                                                  '#f)
                                                                              (apply
                                                                                (lambda (quote?2825
                                                                                         x2824)
                                                                                  (k2818
                                                                                    (map (lambda (tmp2826)
                                                                                           (list
                                                                                             '#(syntax-object quote ((top) #(ribcage #(quote? x) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x k) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                             tmp2826))
                                                                                         x2824)))
                                                                                tmp2821)
                                                                              ((lambda (tmp2827)
                                                                                 (if (if tmp2827
                                                                                         (apply
                                                                                           (lambda (listp2829
                                                                                                    x2828)
                                                                                             (islist?2758
                                                                                               listp2829))
                                                                                           tmp2827)
                                                                                         '#f)
                                                                                     (apply
                                                                                       (lambda (listp2831
                                                                                                x2830)
                                                                                         (k2818
                                                                                           x2830))
                                                                                       tmp2827)
                                                                                     ((lambda (tmp2833)
                                                                                        (if (if tmp2833
                                                                                                (apply
                                                                                                  (lambda (cons?2836
                                                                                                           x2835
                                                                                                           y2834)
                                                                                                    (iscons?2757
                                                                                                      cons?2836))
                                                                                                  tmp2833)
                                                                                                '#f)
                                                                                            (apply
                                                                                              (lambda (cons?2839
                                                                                                       x2838
                                                                                                       y2837)
                                                                                                (f2817
                                                                                                  y2837
                                                                                                  (lambda (ls2840)
                                                                                                    (k2818
                                                                                                      (cons
                                                                                                        x2838
                                                                                                        ls2840)))))
                                                                                              tmp2833)
                                                                                            ((lambda (else2841)
                                                                                               (list
                                                                                                 '#(syntax-object list->vector ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x k) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                                                 pat-x2808))
                                                                                              tmp2820)))
                                                                                       ($syntax-dispatch
                                                                                         tmp2820
                                                                                         '(any any
                                                                                               any)))))
                                                                                ($syntax-dispatch
                                                                                  tmp2820
                                                                                  '(any .
                                                                                        each-any)))))
                                                                         ($syntax-dispatch
                                                                           tmp2820
                                                                           '(any each-any))))
                                                                      x2819))))
                                                    f2817)
                                                   x2806
                                                   (lambda (ls2842)
                                                     (cons
                                                       '#(syntax-object vector ((top) #(ribcage () () ()) #(ribcage #(ls) #((top)) #("i")) #(ribcage #(_) #((top)) #("i")) #(ribcage #(pat-x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                       ls2842))))
                                                tmp2809)))
                                         ($syntax-dispatch
                                           tmp2809
                                           '(any each-any))))
                                      pat-x2808))
                                   tmp2807))
                                x2806)))
           (vquasi2751 (lambda (p2790 lev2789)
                         ((lambda (tmp2791)
                            ((lambda (tmp2792)
                               (if tmp2792
                                   (apply
                                     (lambda (p2794 q2793)
                                       ((lambda (tmp2795)
                                          ((lambda (tmp2796)
                                             (if tmp2796
                                                 (apply
                                                   (lambda (p2797)
                                                     (if (= lev2789 '0)
                                                         (quasilist*2755
                                                           p2797
                                                           (vquasi2751
                                                             q2793
                                                             lev2789))
                                                         (quasicons2754
                                                           (quasicons2754
                                                             '#(syntax-object (quote unquote) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                             (quasi2750
                                                               p2797
                                                               (- lev2789
                                                                  '1)))
                                                           (vquasi2751
                                                             q2793
                                                             lev2789))))
                                                   tmp2796)
                                                 ((lambda (tmp2800)
                                                    (if tmp2800
                                                        (apply
                                                          (lambda (p2801)
                                                            (if (= lev2789
                                                                   '0)
                                                                (quasiappend2753
                                                                  p2801
                                                                  (vquasi2751
                                                                    q2793
                                                                    lev2789))
                                                                (quasicons2754
                                                                  (quasicons2754
                                                                    '#(syntax-object (quote unquote-splicing) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                    (quasi2750
                                                                      p2801
                                                                      (- lev2789
                                                                         '1)))
                                                                  (vquasi2751
                                                                    q2793
                                                                    lev2789))))
                                                          tmp2800)
                                                        ((lambda (p2804)
                                                           (quasicons2754
                                                             (quasi2750
                                                               p2804
                                                               lev2789)
                                                             (vquasi2751
                                                               q2793
                                                               lev2789)))
                                                          tmp2795)))
                                                   ($syntax-dispatch
                                                     tmp2795
                                                     '(#(free-id
                                                         #(syntax-object unquote-splicing ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                        .
                                                        each-any)))))
                                            ($syntax-dispatch
                                              tmp2795
                                              '(#(free-id
                                                  #(syntax-object unquote ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                 .
                                                 each-any))))
                                         p2794))
                                     tmp2792)
                                   ((lambda (tmp2805)
                                      (if tmp2805
                                          (apply
                                            (lambda ()
                                              '#(syntax-object (quote ()) ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                            tmp2805)
                                          (syntax-error tmp2791)))
                                     ($syntax-dispatch tmp2791 '()))))
                              ($syntax-dispatch tmp2791 '(any . any))))
                           p2790)))
           (quasi2750 (lambda (p2766 lev2765)
                        ((lambda (tmp2767)
                           ((lambda (tmp2768)
                              (if tmp2768
                                  (apply
                                    (lambda (p2769)
                                      (if (= lev2765 '0)
                                          p2769
                                          (quasicons2754
                                            '#(syntax-object (quote unquote) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                            (quasi2750
                                              (list p2769)
                                              (- lev2765 '1)))))
                                    tmp2768)
                                  ((lambda (tmp2770)
                                     (if tmp2770
                                         (apply
                                           (lambda (p2772 q2771)
                                             (if (= lev2765 '0)
                                                 (quasilist*2755
                                                   p2772
                                                   (quasi2750
                                                     q2771
                                                     lev2765))
                                                 (quasicons2754
                                                   (quasicons2754
                                                     '#(syntax-object (quote unquote) ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                     (quasi2750
                                                       p2772
                                                       (- lev2765 '1)))
                                                   (quasi2750
                                                     q2771
                                                     lev2765))))
                                           tmp2770)
                                         ((lambda (tmp2775)
                                            (if tmp2775
                                                (apply
                                                  (lambda (p2777 q2776)
                                                    (if (= lev2765 '0)
                                                        (quasiappend2753
                                                          p2777
                                                          (quasi2750
                                                            q2776
                                                            lev2765))
                                                        (quasicons2754
                                                          (quasicons2754
                                                            '#(syntax-object (quote unquote-splicing) ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                            (quasi2750
                                                              p2777
                                                              (- lev2765
                                                                 '1)))
                                                          (quasi2750
                                                            q2776
                                                            lev2765))))
                                                  tmp2775)
                                                ((lambda (tmp2780)
                                                   (if tmp2780
                                                       (apply
                                                         (lambda (p2781)
                                                           (quasicons2754
                                                             '#(syntax-object (quote quasiquote) ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                             (quasi2750
                                                               (list p2781)
                                                               (+ lev2765
                                                                  '1))))
                                                         tmp2780)
                                                       ((lambda (tmp2782)
                                                          (if tmp2782
                                                              (apply
                                                                (lambda (p2784
                                                                         q2783)
                                                                  (quasicons2754
                                                                    (quasi2750
                                                                      p2784
                                                                      lev2765)
                                                                    (quasi2750
                                                                      q2783
                                                                      lev2765)))
                                                                tmp2782)
                                                              ((lambda (tmp2785)
                                                                 (if tmp2785
                                                                     (apply
                                                                       (lambda (x2786)
                                                                         (quasivector2752
                                                                           (vquasi2751
                                                                             x2786
                                                                             lev2765)))
                                                                       tmp2785)
                                                                     ((lambda (p2788)
                                                                        (list
                                                                          '#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t)))
                                                                          p2788))
                                                                       tmp2767)))
                                                                ($syntax-dispatch
                                                                  tmp2767
                                                                  '#(vector
                                                                     each-any)))))
                                                         ($syntax-dispatch
                                                           tmp2767
                                                           '(any . any)))))
                                                  ($syntax-dispatch
                                                    tmp2767
                                                    '(#(free-id
                                                        #(syntax-object quasiquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                       any)))))
                                           ($syntax-dispatch
                                             tmp2767
                                             '((#(free-id
                                                  #(syntax-object unquote-splicing ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                                 .
                                                 each-any)
                                                .
                                                any)))))
                                    ($syntax-dispatch
                                      tmp2767
                                      '((#(free-id
                                           #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                          .
                                          each-any)
                                         .
                                         any)))))
                             ($syntax-dispatch
                               tmp2767
                               '(#(free-id
                                   #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(isquote? islist? iscons? quote-nil? quasilist* quasicons quasiappend quasivector vquasi quasi) #((top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(top-ribcage *top* #t))))
                                  any))))
                          p2766))))
    (lambda (x2760)
      ((lambda (tmp2761)
         ((lambda (tmp2762)
            (if tmp2762
                (apply (lambda (_2764 e2763) (quasi2750 e2763 '0)) tmp2762)
                (syntax-error tmp2761)))
           ($syntax-dispatch tmp2761 '(any any))))
        x2760)))
  '*top*)
($sc-put-cte
  '#(syntax-object include ((top) #(ribcage #(include) #((top)) #(include))))
  (lambda (x2889)
    (letrec ((read-file2890 (lambda (fn2901 k2900)
                              ((lambda (p2902)
                                 ((letrec ((f2903 (lambda ()
                                                    ((lambda (x2904)
                                                       (if (eof-object?
                                                             x2904)
                                                           (begin
                                                             (close-input-port
                                                               p2902)
                                                             '())
                                                           (cons
                                                             (datum->syntax-object
                                                               k2900
                                                               x2904)
                                                             (f2903))))
                                                      (read p2902)))))
                                    f2903)))
                                (open-input-file fn2901)))))
      ((lambda (tmp2891)
         ((lambda (tmp2892)
            (if tmp2892
                (apply
                  (lambda (k2894 filename2893)
                    ((lambda (fn2895)
                       ((lambda (tmp2896)
                          ((lambda (tmp2897)
                             (if tmp2897
                                 (apply
                                   (lambda (exp2898)
                                     (cons
                                       '#(syntax-object begin ((top) #(ribcage #(exp) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(fn) #((top)) #("i")) #(ribcage #(k filename) #((top) (top)) #("i" "i")) #(ribcage (read-file) ((top)) ("i")) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                       exp2898))
                                   tmp2897)
                                 (syntax-error tmp2896)))
                            ($syntax-dispatch tmp2896 'each-any)))
                         (read-file2890 fn2895 k2894)))
                      (syntax-object->datum filename2893)))
                  tmp2892)
                (syntax-error tmp2891)))
           ($syntax-dispatch tmp2891 '(any any))))
        x2889)))
  '*top*)
($sc-put-cte
  '#(syntax-object unquote ((top) #(ribcage #(unquote) #((top)) #(unquote))))
  (lambda (x2905)
    ((lambda (tmp2906)
       ((lambda (tmp2907)
          (if tmp2907
              (apply
                (lambda (_2909 e2908)
                  (syntax-error
                    x2905
                    '"expression not valid outside of quasiquote"))
                tmp2907)
              (syntax-error tmp2906)))
         ($syntax-dispatch tmp2906 '(any . each-any))))
      x2905))
  '*top*)
($sc-put-cte
  '#(syntax-object unquote-splicing ((top) #(ribcage #(unquote-splicing) #((top)) #(unquote-splicing))))
  (lambda (x2910)
    ((lambda (tmp2911)
       ((lambda (tmp2912)
          (if tmp2912
              (apply
                (lambda (_2914 e2913)
                  (syntax-error
                    x2910
                    '"expression not valid outside of quasiquote"))
                tmp2912)
              (syntax-error tmp2911)))
         ($syntax-dispatch tmp2911 '(any . each-any))))
      x2910))
  '*top*)
($sc-put-cte
  '#(syntax-object case ((top) #(ribcage #(case) #((top)) #(case))))
  (lambda (x2915)
    ((lambda (tmp2916)
       ((lambda (tmp2917)
          (if tmp2917
              (apply
                (lambda (_2921 e2920 m12919 m22918)
                  ((lambda (tmp2922)
                     ((lambda (body2949)
                        (list
                          '#(syntax-object let ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                          (list
                            (list
                              '#(syntax-object t ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                              e2920))
                          body2949))
                       tmp2922))
                    ((letrec ((f2923 (lambda (clause2925 clauses2924)
                                       (if (null? clauses2924)
                                           ((lambda (tmp2926)
                                              ((lambda (tmp2927)
                                                 (if tmp2927
                                                     (apply
                                                       (lambda (e12929
                                                                e22928)
                                                         (cons
                                                           '#(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                           (cons
                                                             e12929
                                                             e22928)))
                                                       tmp2927)
                                                     ((lambda (tmp2931)
                                                        (if tmp2931
                                                            (apply
                                                              (lambda (k2934
                                                                       e12933
                                                                       e22932)
                                                                (list
                                                                  '#(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                  (list
                                                                    '#(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                    '#(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                    (list
                                                                      '#(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                      k2934))
                                                                  (cons
                                                                    '#(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                    (cons
                                                                      e12933
                                                                      e22932))))
                                                              tmp2931)
                                                            ((lambda (_2937)
                                                               (syntax-error
                                                                 x2915))
                                                              tmp2926)))
                                                       ($syntax-dispatch
                                                         tmp2926
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any)))))
                                                ($syntax-dispatch
                                                  tmp2926
                                                  '(#(free-id
                                                      #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t))))
                                                     any
                                                     .
                                                     each-any))))
                                             clause2925)
                                           ((lambda (tmp2938)
                                              ((lambda (rest2939)
                                                 ((lambda (tmp2940)
                                                    ((lambda (tmp2941)
                                                       (if tmp2941
                                                           (apply
                                                             (lambda (k2944
                                                                      e12943
                                                                      e22942)
                                                               (list
                                                                 '#(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                 (list
                                                                   '#(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   '#(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   (list
                                                                     '#(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                     k2944))
                                                                 (cons
                                                                   '#(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(clause clauses) #((top) (top)) #("i" "i")) #(ribcage #(f) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(top-ribcage *top* #t)))
                                                                   (cons
                                                                     e12943
                                                                     e22942))
                                                                 rest2939))
                                                             tmp2941)
                                                           ((lambda (_2947)
                                                              (syntax-error
                                                                x2915))
                                                             tmp2940)))
                                                      ($syntax-dispatch
                                                        tmp2940
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any))))
                                                   clause2925))
                                                tmp2938))
                                             (f2923
                                               (car clauses2924)
                                               (cdr clauses2924)))))))
                       f2923)
                      m12919
                      m22918)))
                tmp2917)
              (syntax-error tmp2916)))
         ($syntax-dispatch tmp2916 '(any any any . each-any))))
      x2915))
  '*top*)
($sc-put-cte
  '#(syntax-object identifier-syntax ((top) #(ribcage #(identifier-syntax) #((top)) #(identifier-syntax))))
  (lambda (x2950)
    ((lambda (tmp2951)
       ((lambda (tmp2952)
          (if tmp2952
              (apply
                (lambda (dummy2954 e2953)
                  (list
                    '#(syntax-object lambda ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    '#(syntax-object (x) ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                    (list
                      '#(syntax-object syntax-case ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      '#(syntax-object x ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                      '()
                      (list
                        '#(syntax-object id ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        '#(syntax-object (identifier? (syntax id)) ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                        (list
                          '#(syntax-object syntax ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                          e2953))
                      (list
                        '(#(syntax-object _ ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           #(syntax-object x ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           #(syntax-object ... ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))
                        (list
                          '#(syntax-object syntax ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                          (cons
                            e2953
                            '(#(syntax-object x ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               #(syntax-object ... ((top) #(ribcage #(dummy e) #(("m" top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))))))))
                tmp2952)
              ((lambda (tmp2955)
                 (if (if tmp2955
                         (apply
                           (lambda (dummy2961 id2960 exp12959 var2958
                                    val2957 exp22956)
                             (if (identifier? id2960)
                                 (identifier? var2958)
                                 '#f))
                           tmp2955)
                         '#f)
                     (apply
                       (lambda (dummy2967 id2966 exp12965 var2964 val2963
                                exp22962)
                         (list
                           '#(syntax-object cons ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           '#(syntax-object (quote macro!) ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                           (list
                             '#(syntax-object lambda ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                             '#(syntax-object (x) ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                             (list
                               '#(syntax-object syntax-case ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               '#(syntax-object x ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               '#(syntax-object (set!) ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                               (list
                                 (list
                                   '#(syntax-object set! ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   var2964
                                   val2963)
                                 (list
                                   '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   exp22962))
                               (list
                                 (cons
                                   id2966
                                   '(#(syntax-object x ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                      #(syntax-object ... ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))))
                                 (list
                                   '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   (cons
                                     exp12965
                                     '(#(syntax-object x ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                        #(syntax-object ... ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))))))
                               (list
                                 id2966
                                 (list
                                   '#(syntax-object identifier? ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   (list
                                     '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                     id2966))
                                 (list
                                   '#(syntax-object syntax ((top) #(ribcage #(dummy id exp1 var val exp2) #(("m" top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t)))
                                   exp12965))))))
                       tmp2955)
                     (syntax-error tmp2951)))
                ($syntax-dispatch
                  tmp2951
                  '(any (any any)
                        ((#(free-id
                            #(syntax-object set! ((top) #(ribcage () () ()) #(ribcage #(x) #(("m" top)) #("i")) #(top-ribcage *top* #t))))
                           any
                           any)
                          any))))))
         ($syntax-dispatch tmp2951 '(any any))))
      x2950))
  '*top*)
