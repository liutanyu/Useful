(when (true))
(how (true)
	(lambda (goal program s f)
		(s f)))

(when (fail))
(how (fail)
	(lambda (goal program s f)
		(f)))

(when (findall ?vars ?goal ?bag))
(how (findall ?vars ?goal ?bag)
	(lambda (goal program s f)
		(let*	((g-term (goal-term goal))
			(g (term-deref (comp-caddr g-term))))
			(arith-debug "in findall() with goal:")
			(arith-debug (term-instantiate g-term))
			(unify	(all-solutions
					(term-deref (comp-cadr g-term))
					(if	(and (term-var? g) (var-inst? g))
						(var-val g)
						g)
					program)
				(term-deref (comp-cadddr g-term)) program s f))))

(when (not ?goal))
(what (not ?goal)
	(findall ?any ?goal ()))

(when (debug))
(how (debug)
	(lambda (goal program s f)
		(set! user-debug? (not user-debug?))
		(s f)))
