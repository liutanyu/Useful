% scheme
Chez Scheme Version 4.1
Copyright (c) 1991 Cadence Research Systems

> (load "prolog.ss")
To start the Prolog interpreter, type:  (pro <file-names>...)
> (pro "ex.pro")

A Prolog goal is an unquoted LIST of predicate calls.
To toggle predicate tracing, type as a Prolog goal: ((debug))

Prolog 1.2 with Logical Arithmetic and Delays
?- ((app (a b c) (x y z) ?L))
Solution: ((app (a b c) (x y z) (a b c x y z)))
Floundered goals:
Splitting goals:
More? ?
Type one of the following:
  ;   display next solution
  ,   display all remaining solutions
  .   skip remaining solutions
More? ;
no more solutions
(time in seconds:  0.04)
?- ((app ?X ?Y (a b c)))
Solution: ((app () (a b c) (a b c)))
Floundered goals:
Splitting goals:
More? ;
Solution: ((app (a) (b c) (a b c)))
Floundered goals:
Splitting goals:
More? ,
Solution: ((app (a b) (c) (a b c)))
Floundered goals:
Splitting goals:
Solution: ((app (a b c) () (a b c)))
Floundered goals:
Splitting goals:
no more solutions
(time in seconds:  0.13)
?- ((app ?X ?Y ?L))
Solution: ((app ?x#44 ?y#45 ?l#46))
Floundered goals:
  (app ?x#44 ?y#45 ?l#46)
Splitting goals:
More? .
(time in seconds:  0.02)
?- ((unified (foo ?A x) ?N) (unified ?A bar))
Solution: ((unified (foo bar x) (foo bar x)) (unified bar bar))
Floundered goals:
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.01)
?- ((nrev (a b c) ?L))
Solution: ((nrev (a b c) (c b a)))
Floundered goals:
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.07)
?- ((rev (a b c) ?L))
Solution: ((rev (a b c) (c b a)))
Floundered goals:
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.05)
?- ((half 15 ?X))
Solution: ((half 15 (< 7.499999999999998 7.5 >)))
Floundered goals:
  (mult 2 (< 7.499999999999998 7.5 >) 15)
Splitting goals:
More? ;
Solution: ((half 15 ({ 7.5 7.5 })))
Floundered goals:
Splitting goals:
More? ;
Solution: ((half 15 (< 7.5 7.500000000000002 >)))
Floundered goals:
  (mult 2 (< 7.5 7.500000000000002 >) 15)
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.52)
?- ((half ?X 7.3))
Solution: ((half (< 14.599999999999996 14.600000000000003 >) 7.3))
Floundered goals:
  (mult 2 7.3 (< 14.599999999999996 14.600000000000003 >))
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.07)
?- ((root 2 ?X))
Solution: ((root 2 (< -1.4142135623730951 -1.414213562373095 >)))
Floundered goals:
  (square (< -1.4142135623730951 -1.414213562373095 >) 2)
Splitting goals:
More? ;
Solution: ((root 2 (< 1.414213562373095 1.4142135623730951 >)))
Floundered goals:
  (square (< 1.414213562373095 1.4142135623730951 >) 2)
Splitting goals:
More? ;
no more solutions
(time in seconds:  5.08)
?- ((poly ?X))
Solution: ((poly (< 7.104213591116952 7.104213591116959 >)))
Floundered goals:
  (mult (< 7.104213591116952 7.104213591116959 >) (< 0.8445692015091354 0.8445692015091371 >) 6)
  (mult (< 7.104213591116952 7.104213591116959 >) (< 1.1042135911169542 1.1042135911169568 >) (< 7.844569201509134 7.844569201509139 >))
  (add 7 (< 0.8445692015091354 0.8445692015091371 >) (< 7.844569201509134 7.844569201509139 >))
  (add 6 (< 1.1042135911169542 1.1042135911169568 >) (< 7.104213591116952 7.104213591116959 >))
Splitting goals:
More? ;
no more solutions
(time in seconds:  3.74)
?- ((simult ?X ?Y))
Solution: ((simult (< 1.4999999999999998 1.5 >) (< -0.5000000000000002 -0.5000000000000001 >)))
Floundered goals:
  (add (< 1.4999999999999998 1.5 >) (< -0.5000000000000002 -0.5000000000000001 >) 1)
  (add (< -0.5000000000000002 -0.5000000000000001 >) 2 (< 1.4999999999999998 1.5 >))
  (split (< 1.4999999999999998 1.5 >))
Splitting goals:
More? ;
Solution: ((simult (< 1.4999999999999998 1.5 >) ({ -0.5000000000000001 -0.5000000000000001 })))
Floundered goals:
  (add ({ -0.5000000000000001 -0.5000000000000001 }) 2 (< 1.4999999999999998 1.5 >))
  (add (< 1.4999999999999998 1.5 >) ({ -0.5000000000000001 -0.5000000000000001 }) 1)
  (split (< 1.4999999999999998 1.5 >))
Splitting goals:
More? ;
Solution: ((simult ({ 1.4999999999999998 1.5 >) (< -0.5000000000000001 -0.5 >)))
Floundered goals:
  (add ({ 1.4999999999999998 1.5 >) (< -0.5000000000000001 -0.5 >) 1)
  (add (< -0.5000000000000001 -0.5 >) 2 ({ 1.4999999999999998 1.5 >))
  (split ({ 1.4999999999999998 1.5 >))
Splitting goals:
More? ,
Solution: ((simult ({ 1.4999999999999998 1.5 >) ({ -0.5 -0.5 })))
Floundered goals:
  (add ({ -0.5 -0.5 }) 2 ({ 1.4999999999999998 1.5 >))
  (add ({ 1.4999999999999998 1.5 >) ({ -0.5 -0.5 }) 1)
  (split ({ 1.4999999999999998 1.5 >))
Splitting goals:
Solution: ((simult ({ 1.4999999999999998 1.5 >) (< -0.5 -0.4999999999999999 >)))
Floundered goals:
  (add (< -0.5 -0.4999999999999999 >) 2 ({ 1.4999999999999998 1.5 >))
  (add ({ 1.4999999999999998 1.5 >) (< -0.5 -0.4999999999999999 >) 1)
  (split ({ 1.4999999999999998 1.5 >))
Splitting goals:
Solution: ((simult ({ 1.4999999999999998 1.5 >) ({ -0.4999999999999999 -0.4999999999999999 })))
Floundered goals:
  (add ({ 1.4999999999999998 1.5 >) ({ -0.4999999999999999 -0.4999999999999999 }) 1)
  (add ({ -0.4999999999999999 -0.4999999999999999 }) 2 ({ 1.4999999999999998 1.5 >))
  (split ({ 1.4999999999999998 1.5 >))
Splitting goals:
Solution: ((simult ({ 1.4999999999999998 1.5 >) (< -0.4999999999999999 -0.4999999999999998 >)))
Floundered goals:
  (add ({ 1.4999999999999998 1.5 >) (< -0.4999999999999999 -0.4999999999999998 >) 1)
  (add (< -0.4999999999999999 -0.4999999999999998 >) 2 ({ 1.4999999999999998 1.5 >))
  (split ({ 1.4999999999999998 1.5 >))
Splitting goals:
Solution: ((simult ({ 1.4999999999999998 1.5 >) ({ -0.4999999999999998 -0.4999999999999998 })))
Floundered goals:
  (add ({ -0.4999999999999998 -0.4999999999999998 }) 2 ({ 1.4999999999999998 1.5 >))
  (add ({ 1.4999999999999998 1.5 >) ({ -0.4999999999999998 -0.4999999999999998 }) 1)
  (split ({ 1.4999999999999998 1.5 >))
Splitting goals:
Solution: ((simult ({ 1.4999999999999998 1.5 >) (< -0.4999999999999998 -0.49999999999999967 >)))
Floundered goals:
  (add (< -0.4999999999999998 -0.49999999999999967 >) 2 ({ 1.4999999999999998 1.5 >))
  (add ({ 1.4999999999999998 1.5 >) (< -0.4999999999999998 -0.49999999999999967 >) 1)
  (split ({ 1.4999999999999998 1.5 >))
Splitting goals:
Solution: ((simult ({ 1.5 1.5 }) (< -0.5000000000000002 -0.5000000000000001 >)))
Floundered goals:
  (add ({ 1.5 1.5 }) (< -0.5000000000000002 -0.5000000000000001 >) 1)
  (add (< -0.5000000000000002 -0.5000000000000001 >) 2 ({ 1.5 1.5 }))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000002 >) (< -0.5000000000000004 -0.5000000000000003 >)))
Floundered goals:
  (add (< -0.5000000000000004 -0.5000000000000003 >) 2 (< 1.5 1.5000000000000002 >))
  (add (< 1.5 1.5000000000000002 >) (< -0.5000000000000004 -0.5000000000000003 >) 1)
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000002 >) ({ -0.5000000000000003 -0.5000000000000003 })))
Floundered goals:
  (add (< 1.5 1.5000000000000002 >) ({ -0.5000000000000003 -0.5000000000000003 }) 1)
  (add ({ -0.5000000000000003 -0.5000000000000003 }) 2 (< 1.5 1.5000000000000002 >))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000004 >) (< -0.5000000000000003 -0.5000000000000002 >)))
Floundered goals:
  (add (< -0.5000000000000003 -0.5000000000000002 >) 2 (< 1.5 1.5000000000000004 >))
  (add (< 1.5 1.5000000000000004 >) (< -0.5000000000000003 -0.5000000000000002 >) 1)
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000004 >) ({ -0.5000000000000002 -0.5000000000000002 })))
Floundered goals:
  (add (< 1.5 1.5000000000000004 >) ({ -0.5000000000000002 -0.5000000000000002 }) 1)
  (add ({ -0.5000000000000002 -0.5000000000000002 }) 2 (< 1.5 1.5000000000000004 >))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000004 >) (< -0.5000000000000002 -0.5000000000000001 >)))
Floundered goals:
  (add (< 1.5 1.5000000000000004 >) (< -0.5000000000000002 -0.5000000000000001 >) 1)
  (add (< -0.5000000000000002 -0.5000000000000001 >) 2 (< 1.5 1.5000000000000004 >))
Splitting goals:
Solution: ((simult ({ 1.5 1.5 }) ({ -0.5000000000000001 -0.5000000000000001 })))
Floundered goals:
Splitting goals:
Solution: ((simult ({ 1.5 1.5 }) (< -0.5000000000000001 -0.5 >)))
Floundered goals:
  (add ({ 1.5 1.5 }) (< -0.5000000000000001 -0.5 >) 1)
  (add (< -0.5000000000000001 -0.5 >) 2 ({ 1.5 1.5 }))
Splitting goals:
Solution: ((simult ({ 1.5 1.5 }) ({ -0.5 -0.5 })))
Floundered goals:
Splitting goals:
Solution: ((simult ({ 1.5 1.5 }) (< -0.5 -0.4999999999999999 >)))
Floundered goals:
  (add ({ 1.5 1.5 }) (< -0.5 -0.4999999999999999 >) 1)
  (add (< -0.5 -0.4999999999999999 >) 2 ({ 1.5 1.5 }))
Splitting goals:
Solution: ((simult ({ 1.5 1.5 }) ({ -0.4999999999999999 -0.4999999999999999 })))
Floundered goals:
Splitting goals:
Solution: ((simult ({ 1.5 1.5 }) (< -0.4999999999999999 -0.4999999999999998 >)))
Floundered goals:
  (add ({ 1.5 1.5 }) (< -0.4999999999999999 -0.4999999999999998 >) 1)
  (add (< -0.4999999999999999 -0.4999999999999998 >) 2 ({ 1.5 1.5 }))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000004 >) ({ -0.5000000000000001 -0.5000000000000001 })))
Floundered goals:
  (add (< 1.5 1.5000000000000004 >) ({ -0.5000000000000001 -0.5000000000000001 }) 1)
  (add ({ -0.5000000000000001 -0.5000000000000001 }) 2 (< 1.5 1.5000000000000004 >))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000004 >) (< -0.5000000000000001 -0.5 >)))
Floundered goals:
  (add (< 1.5 1.5000000000000004 >) (< -0.5000000000000001 -0.5 >) 1)
  (add (< -0.5000000000000001 -0.5 >) 2 (< 1.5 1.5000000000000004 >))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000004 >) ({ -0.5 -0.5 })))
Floundered goals:
  (add (< 1.5 1.5000000000000004 >) ({ -0.5 -0.5 }) 1)
  (add ({ -0.5 -0.5 }) 2 (< 1.5 1.5000000000000004 >))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000004 >) (< -0.5 -0.4999999999999999 >)))
Floundered goals:
  (add (< 1.5 1.5000000000000004 >) (< -0.5 -0.4999999999999999 >) 1)
  (add (< -0.5 -0.4999999999999999 >) 2 (< 1.5 1.5000000000000004 >))
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000002 >) ({ -0.4999999999999999 -0.4999999999999999 })))
Floundered goals:
  (add ({ -0.4999999999999999 -0.4999999999999999 }) 2 (< 1.5 1.5000000000000002 >))
  (add (< 1.5 1.5000000000000002 >) ({ -0.4999999999999999 -0.4999999999999999 }) 1)
Splitting goals:
Solution: ((simult (< 1.5 1.5000000000000002 >) (< -0.4999999999999999 -0.4999999999999998 >)))
Floundered goals:
  (add (< -0.4999999999999999 -0.4999999999999998 >) 2 (< 1.5 1.5000000000000002 >))
  (add (< 1.5 1.5000000000000002 >) (< -0.4999999999999999 -0.4999999999999998 >) 1)
Splitting goals:
no more solutions
(time in seconds:  4.86)
?- ((divisors ?X ?Y 12) (split ?X))
Solution: ((divisors ({ 2.0 2.0 }) ({ 6.0 6.0 }) 12) (split ({ 2.0 2.0 })))
Floundered goals:
Splitting goals:
More? ;
Solution: ((divisors ({ 3.0 3.0 }) ({ 4.0 4.0 }) 12) (split ({ 3.0 3.0 })))
Floundered goals:
Splitting goals:
More? ;
no more solutions
(time in seconds:  1.05)
?- ((divisors ?X ?Y 12))
Solution: ((divisors ({ 2.0 6.0 }) ({ 2.0 6.0 }) 12))
Floundered goals:
  (mult ({ 2.0 6.0 }) ({ 2.0 6.0 }) 12)
  (geq ({ 2.0 6.0 }) ({ 2.0 6.0 }))
  (int ({ 2.0 6.0 }))
  (int ({ 2.0 6.0 }))
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.43)
?- ((mod 100 23 ?Z))
Solution: ((mod 100 23 ({ 8.0 8.0 })))
Floundered goals:
  (add (< 91.99999999999999 92.00000000000001 >) ({ 8.0 8.0 }) 100)
  (mult 23 ({ 4.0 4.0 }) (< 91.99999999999999 92.00000000000001 >))
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.76)
?- ((mod 100 ?Y 18))
Solution: ((mod 100 ({ 41.0 82.0 }) 18))
Floundered goals:
  (mult ({ 41.0 82.0 }) ({ 1.0 2.0 }) (< 81.99999999999997 82.00000000000003 >))
  (int ({ 41.0 82.0 }))
  (int ({ 1.0 2.0 }))
  (add (< 81.99999999999997 82.00000000000003 >) 18 100)
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.74)
?- ((mod 100 ?Y 18) (split ?Y))
Solution: ((mod 100 ({ 41.0 41.0 }) 18) (split ({ 41.0 41.0 })))
Floundered goals:
  (add (< 81.99999999999999 82.00000000000001 >) 18 100)
  (mult ({ 41.0 41.0 }) ({ 2.0 2.0 }) (< 81.99999999999999 82.00000000000001 >))
Splitting goals:
More? ;
Solution: ((mod 100 ({ 82.0 82.0 }) 18) (split ({ 82.0 82.0 })))
Floundered goals:
  (add (< 81.99999999999999 82.00000000000001 >) 18 100)
  (mult ({ 82.0 82.0 }) ({ 1.0 1.0 }) (< 81.99999999999999 82.00000000000001 >))
Splitting goals:
More? ;
no more solutions
(time in seconds:  1.26)
?- ((fact 5 ?F))
Solution: ((fact 5 (< 119.99999999999991 120.00000000000014 >)))
Floundered goals:
  (mult (< 23.99999999999999 24.00000000000002 >) 5 (< 119.99999999999991 120.00000000000014 >))
  (mult (< 5.999999999999998 6.0000000000000036 >) ({ 4.0 4.0 }) (< 23.99999999999999 24.00000000000002 >))
  (mult ({ 2.0 2.0000000000000004 >) ({ 3.0 3.0 }) (< 5.999999999999998 6.0000000000000036 >))
  (mult ({ 1 1 }) ({ 2.0 2.0 }) ({ 2.0 2.0000000000000004 >))
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.9)
?- ((fact ?N 120))
Solution: ((fact ({ 5.0 5.0 }) 120))
Floundered goals:
  (mult (< 5.999999999999998 6.0000000000000036 >) ({ 4.0 4.0 }) (< 23.99999999999999 24.000000000000014 >))
  (mult ({ 2 2.0000000000000004 >) ({ 3.0 3.0 }) (< 5.999999999999998 6.0000000000000036 >))
  (mult ({ 1 1 }) ({ 2 2.0 }) ({ 2 2.0000000000000004 >))
  (mult (< 23.99999999999999 24.000000000000014 >) ({ 5.0 5.0 }) 120)
Splitting goals:
More? ;
no more solutions
(time in seconds:  3.62)
?- ((floun ?X))
Solution: ((floun ?x#224))
Floundered goals:
  (app ?a#226 ?b#227 ?c#228)
Splitting goals:
More? ;
no more solutions
(time in seconds:  0.01)
?- q
bye
> (pro "polytest.pro")

A Prolog goal is an unquoted LIST of predicate calls.
To toggle predicate tracing, type as a Prolog goal: ((debug))

Prolog 1.2 with Logical Arithmetic and Delays
?- ((test_sqrt2))
?x#229?X
(< -w 0.0 >)?X
(< -2.000000000000004 -0.9999999999999984 >)?X
(< -1.5000000000000029 -1.3333333333333306 >)?X
(< -1.4285714285714317 -1.399999999999997 >)?X
(< -1.4166666666666698 -1.41176470588235 >)?X
(< -1.4146341463414662 -1.413793103448273 >)?X
(< -1.4142857142857175 -1.414141414141411 >)?X
(< -1.414225941422597 -1.4142011834319497 >)?X
(< -1.414215686274513 -1.4142114384748672 >)?X
(< -1.4142139267767437 -1.4142131979695403 >)?X
(< -1.4142136248948727 -1.4142134998513203 >)?X
(< -1.4142135731001384 -1.414213551646052 >)?X
(< -1.4142135642135674 -1.414213560532623 >)?X
(< -1.4142135626888728 -1.4142135620573175 >)?X
(< -1.4142135624272762 -1.4142135623189136 >)?X
(< -1.4142135623823935 -1.4142135623637964 >)?X
(< -1.414213562374693 -1.4142135623714973 >)?X
(< -1.4142135623733718 -1.4142135623728185 >)?X
(< -1.4142135623731449 -1.414213562373045 >)?X
(< -1.4142135623731062 -1.414213562373084 >)?X
(< -1.4142135623730996 -1.4142135623730907 >)?X
(< -1.4142135623730983 -1.4142135623730916 >)?X
(< -1.4142135623730983 -1.414213562373092 >)?X
Solution: ((test_sqrt2))
Floundered goals:
  (add (< -2.4142135623730967 -2.4142135623730936 >) 2 (< -0.414213562373096 -0.4142135623730941 >))
  (monitor (< -1.4142135623730983 -1.414213562373092 >) ?X)
  (square (< -1.4142135623730983 -1.414213562373092 >) 2)
  (mult (< -2.4142135623730976 -2.4142135623730927 >) (< -0.414213562373096 -0.4142135623730941 >) (< 0.9999999999999993 1.0000000000000007 >))
  (add (< -2.4142135623730976 -2.4142135623730927 >) 1 (< -1.4142135623730983 -1.414213562373092 >))
  (mult (< -2.4142135623730976 -2.4142135623730927 >) ({ 1 1 }) (< -2.4142135623730967 -2.4142135623730936 >))
  (add (< 0.9999999999999993 1.0000000000000007 >) 1 2)
Splitting goals:
More? ;
(< 0.0 w >)?X
(< 1 2.000000000000001 >)?X
(< 1.3333333333333324 1.5000000000000009 >)?X
(< 1.399999999999999 1.4285714285714297 >)?X
(< 1.411764705882352 1.4166666666666679 >)?X
(< 1.413793103448275 1.4146341463414644 >)?X
(< 1.414141414141413 1.4142857142857155 >)?X
(< 1.4142011834319517 1.4142259414225953 >)?X
(< 1.414211438474869 1.414215686274511 >)?X
(< 1.414213197969542 1.414213926776742 >)?X
(< 1.4142134998513223 1.4142136248948707 >)?X
(< 1.4142135516460537 1.4142135731001366 >)?X
(< 1.414213560532625 1.4142135642135654 >)?X
(< 1.4142135620573193 1.4142135626888708 >)?X
(< 1.4142135623189156 1.4142135624272745 >)?X
(< 1.4142135623637984 1.4142135623823917 >)?X
(< 1.414213562371499 1.414213562374691 >)?X
(< 1.4142135623728203 1.4142135623733698 >)?X
(< 1.414213562373047 1.414213562373143 >)?X
(< 1.414213562373086 1.4142135623731042 >)?X
(< 1.4142135623730925 1.4142135623730976 >)?X
(< 1.4142135623730938 1.4142135623730963 >)?X
(< 1.414213562373094 1.4142135623730963 >)?X
Solution: ((test_sqrt2))
Floundered goals:
  (add (< 0.41421356237309415 0.4142135623730959 >) 2 (< 2.4142135623730936 2.4142135623730967 >))
  (monitor (< 1.414213562373094 1.4142135623730963 >) ?X)
  (square (< 1.414213562373094 1.4142135623730963 >) 2)
  (mult (< 0.41421356237309426 0.4142135623730958 >) ({ 1 1 }) (< 0.41421356237309415 0.4142135623730959 >))
  (add (< 0.41421356237309426 0.4142135623730958 >) 1 (< 1.414213562373094 1.4142135623730963 >))
  (mult (< 0.41421356237309426 0.4142135623730958 >) (< 2.4142135623730936 2.4142135623730967 >) (< 0.9999999999999993 1.0000000000000007 >))
  (add (< 0.9999999999999993 1.0000000000000007 >) 1 2)
Splitting goals:
More? ;
no more solutions
(time in seconds:  8.07)
?- q
bye
> (exit)
%
